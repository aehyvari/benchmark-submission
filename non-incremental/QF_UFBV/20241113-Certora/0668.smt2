(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x99 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x88 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x102 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x14 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x7 ((_ BitVec 256)) Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x63 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x86 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x59 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x38 ((_ BitVec 256)) (_ BitVec 256))
(define-fun x6 ((x48 (_ BitVec 256)) (x69 (_ BitVec 256))) Bool (= x48 (bvudiv (bvmul x69 x48) x69)))
(define-fun x76 ((x48 (_ BitVec 256)) (x69 (_ BitVec 256))) Bool (= x48 (bvsdiv (bvmul x48 x69) x69)))
(define-fun x73 ((x48 (_ BitVec 256)) (x69 (_ BitVec 256))) Bool (= x48 (bvsdiv (bvmul x69 x48) x69)))
(define-fun x67 ((x33 (_ BitVec 256))) (_ BitVec 256) (ite (= x33 x55) x57 (x99 x33)))
(define-fun x21 ((x33 (_ BitVec 256))) (_ BitVec 256) (ite (= x33 x9) x89 (x14 x33)))
(define-fun x20 ((x33 (_ BitVec 256))) (_ BitVec 256) (ite (= x33 x19) x83 (x21 x33)))
(assert (x7 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x86 (_ bv1889567281 256)) (_ bv0 256)))
(assert (x7 (_ bv404098525 256)))
(assert (bvugt (x102 (_ bv64 256) x104 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x38 (x102 (_ bv64 256) x90 (_ bv2 256))) (_ bv64 256)))
(assert (x7 (_ bv599290589 256)))
(assert (= (x88 (x102 (_ bv64 256) x90 (_ bv2 256))) (_ bv2 256)))
(assert (=> (bvule x55 (_ bv10000 256)) (= (x86 x55) (_ bv0 256))))
(assert (= (=> (and (and (and (bvule x62 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x2 (bvudiv x80 (_ bv1000000000000000000 256))) (= (_ bv36 256) x108) (= x61 (bvudiv x80 x62)) (= (x59 x4) x36) (= (bvmul x32 (_ bv1000000000000000000 256)) x80) (= (_ bv1289409798 256) x16) (= x32 x23) (= x32 x2) (bvule (_ bv1 256) x36) (= x10 x32) (bvule (_ bv1 256) x62)) (and (and (= x90 x106) (= (x63 (_ bv36 256)) x90) (= x30 (x59 x79)) (= (bvule x61 x103) x71) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x90) x71 (= x78 x4) (= x81 x34) (= x78 x50) (= (_ bv1889567281 256) x60) (= (x63 (_ bv4 256)) x104) (bvuge x30 (_ bv1 256)) (= x103 (x14 x15)) (= (x63 (_ bv68 256)) x81) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x104) (= (x102 (_ bv64 256) x78 (_ bv2 256)) x15) (= x104 x35)) (and (and (and (= (_ bv36 256) x12) (= (x102 (_ bv64 256) x104 (_ bv2 256)) x9) (= x82 x39) (= (x59 x4) x53) (= (x59 x79) x28) (= x110 (x102 (_ bv64 256) x107 x43)) (bvule (_ bv1 256) x28) (not (bvult x96 x105)) (= x94 (_ bv404098525 256)) (= x96 (x31 x110)) (= x70 (x14 x37)) (= x19 (x102 (_ bv64 256) x90 (_ bv2 256))) (= (_ bv599290589 256) x100) (= (x99 x55) x57) (= x37 (x102 (_ bv64 256) x104 (_ bv2 256))) (= x84 x106) (= x46 (x21 x11)) (= x57 x92) (= (x102 (_ bv64 256) x90 (_ bv2 256)) x11) (bvuge x53 (_ bv1 256)) (= (_ bv4 256) x85) (not (bvult x70 x89)) (= x35 x95) (= x55 x18) (= x83 (bvadd x81 x46)) (not (bvugt x81 x70)) (not (bvugt x46 (bvadd x81 x46))) (= x43 (x102 (_ bv64 256) x104 (_ bv3 256))) (= x89 (bvadd (bvneg x81) x70)) (not (bvugt x46 (bvadd x46 x81))) (= x45 x34) (not (bvugt x81 x96)) (= x105 (bvadd x96 (bvneg x81))) (= (x67 x79) x39)) (and (and (= x1 (_ bv1289409798 256)) (= x23 x5) (= x29 (x59 x4)) (= (_ bv36 256) x87) (= x5 x77) (bvuge x29 (_ bv1 256)) (= x24 (bvudiv x97 (_ bv1000000000000000000 256))) (= (bvmul (_ bv1000000000000000000 256) x5) x97) (= x5 x24) (= x98 (bvudiv x97 x62))) (and (= x68 (x59 x79)) (bvuge x68 (_ bv1 256)) (= x4 x91) (= (_ bv1889567281 256) x74) (= (bvule x98 x56) x51) (= x56 (x20 x58)) (= x75 x91) (= x58 (x102 (_ bv64 256) x91 (_ bv2 256)))))) (= x18 x107)))) (and (bvule x109 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x25) x54 (= x54 (bvugt (x59 x4) (_ bv0 256))) (bvuge x44 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x79) x13 (= (bvugt (x59 x79) (_ bv0 256)) x101) (= x27 (_ bv36 256)) (= x13 (bvult (_ bv0 256) (x59 x3))) (bvule x22 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x18 (_ bv0 256)) (bvuge x3 (_ bv1 256)) (bvule x64 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x23 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (bvule x93 (_ bv4294967295 256)) (bvule (_ bv1 256) x8) (= (_ bv4 256) x47) (bvule x4 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x93) (bvuge x42 (_ bv0 256)) (bvuge x65 (_ bv0 256)) (bvuge x72 (_ bv0 256)) (not (= x3 x4)) (bvuge x17 (_ bv0 256)) (bvule x3 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x79 x4)) (bvule x65 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x109) (= x8 (x59 x4)) (bvule (_ bv1 256) x4) (bvule (_ bv1 256) x79) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x72) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x49) x101 (= x52 (_ bv0 256)) (bvule x42 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x25) (not (= x79 x3)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x44) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x18) (= (_ bv404098525 256) x66) (bvule (_ bv0 256) x22) (bvuge x49 (_ bv100 256)) (bvule x17 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x64))) x51) x40))
(assert (= (x86 (x102 (_ bv64 256) x78 (_ bv2 256))) (x102 (_ bv64 256) x78 (_ bv2 256))))
(assert (= x90 (x41 (x102 (_ bv64 256) x90 (_ bv2 256)))))
(assert (= (x86 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (not (x7 (x102 (_ bv64 256) x90 (_ bv2 256)))))
(assert (= (x86 (_ bv599290589 256)) (_ bv0 256)))
(assert (=> (bvule x91 (_ bv10000 256)) (= (x86 x91) (_ bv0 256))))
(assert (x7 (_ bv4294967295 256)))
(assert (= (_ bv2 256) (x88 (x102 (_ bv64 256) x91 (_ bv2 256)))))
(assert (= (x88 (x102 (_ bv64 256) x107 x43)) x43))
(assert (= (_ bv2 256) (x88 (x102 (_ bv64 256) x104 (_ bv2 256)))))
(assert (x7 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (=> (bvuge (_ bv10000 256) x4) (= (x86 x4) (_ bv0 256))))
(assert (= true x26))
(assert (= (x102 (_ bv64 256) x107 x43) (x86 (x102 (_ bv64 256) x107 x43))))
(assert (= (x102 (_ bv64 256) x90 (_ bv2 256)) (x86 (x102 (_ bv64 256) x90 (_ bv2 256)))))
(assert (= (x41 (x102 (_ bv64 256) x78 (_ bv2 256))) x78))
(assert (= (x102 (_ bv64 256) x91 (_ bv2 256)) (x86 (x102 (_ bv64 256) x91 (_ bv2 256)))))
(assert (= (_ bv0 256) (x86 (_ bv1289409798 256))))
(assert (not (x7 (x102 (_ bv64 256) x104 (_ bv2 256)))))
(assert (= (x41 (x102 (_ bv64 256) x107 x43)) x107))
(assert (bvugt (x102 (_ bv64 256) x78 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x88 (x102 (_ bv64 256) x104 (_ bv3 256))) (_ bv3 256)))
(assert (= (x86 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (_ bv2 256) (x88 (x102 (_ bv64 256) x78 (_ bv2 256)))))
(assert (= (_ bv64 256) (x38 (x102 (_ bv64 256) x104 (_ bv3 256)))))
(assert (= (x86 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x86 (_ bv115792089237316195423570985008687907853269984665640564039457 256))))
(assert (= (x86 (_ bv404098525 256)) (_ bv0 256)))
(assert (x7 (_ bv1889567281 256)))
(assert (=> (bvuge (_ bv10000 256) x90) (= (_ bv0 256) (x86 x90))))
(assert (not (x7 (x102 (_ bv64 256) x104 (_ bv3 256)))))
(assert (x7 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (bvugt (x102 (_ bv64 256) x91 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x86 (x102 (_ bv64 256) x104 (_ bv3 256))) (x102 (_ bv64 256) x104 (_ bv3 256))))
(assert (bvult (_ bv10000 256) (x102 (_ bv64 256) x104 (_ bv3 256))))
(assert (= (_ bv64 256) (x38 (x102 (_ bv64 256) x104 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x3) (= (x86 x3) (_ bv0 256))))
(assert (= (_ bv64 256) (x38 (x102 (_ bv64 256) x91 (_ bv2 256)))))
(assert (= (x86 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (not (x7 (x102 (_ bv64 256) x107 x43))))
(assert (bvult (_ bv10000 256) (x102 (_ bv64 256) x90 (_ bv2 256))))
(assert (= (x41 (x102 (_ bv64 256) x104 (_ bv2 256))) x104))
(assert (= (_ bv64 256) (x38 (x102 (_ bv64 256) x78 (_ bv2 256)))))
(assert (= x104 (x41 (x102 (_ bv64 256) x104 (_ bv3 256)))))
(assert (=> (bvule x79 (_ bv10000 256)) (= (_ bv0 256) (x86 x79))))
(assert (x7 (_ bv1289409798 256)))
(assert (x7 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x102 (_ bv64 256) x104 (_ bv2 256)) (x86 (x102 (_ bv64 256) x104 (_ bv2 256)))))
(assert (= (x86 (_ bv4294967295 256)) (_ bv0 256)))
(assert (bvult (_ bv10000 256) (x102 (_ bv64 256) x107 x43)))
(assert (not x40))
(assert (x7 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (=> (bvule x78 (_ bv10000 256)) (= (x86 x78) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x104) (= (x86 x104) (_ bv0 256))))
(assert (= (x86 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x38 (x102 (_ bv64 256) x107 x43))))
(assert (not (x7 (x102 (_ bv64 256) x91 (_ bv2 256)))))
(assert (x7 (_ bv1000000000000000000 256)))
(assert (= (x41 (x102 (_ bv64 256) x91 (_ bv2 256))) x91))
(assert (=> (bvuge (_ bv10000 256) x107) (= (x86 x107) (_ bv0 256))))
(assert (not (x7 (x102 (_ bv64 256) x78 (_ bv2 256)))))
(check-sat)
(exit)
