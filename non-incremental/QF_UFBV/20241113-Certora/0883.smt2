(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x128 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x197 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x203 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x207 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x196 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x148 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x211 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x70 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x32 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x224 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x45 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x87 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x240 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x85 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x96 () Bool)
(declare-fun x234 () Bool)
(declare-fun x216 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x72 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x63 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x135 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x26 () Bool)
(declare-fun x120 () Bool)
(declare-fun x91 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x23 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x181 () Bool)
(declare-fun x77 () Bool)
(declare-fun x160 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x239 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x68 ((_ BitVec 256)) Bool)
(declare-fun x110 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x83 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x226 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x43 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(define-fun x136 ((x93 (_ BitVec 256)) (x164 (_ BitVec 256))) Bool (= x93 (bvudiv (bvmul x164 x93) x164)))
(define-fun x213 ((x93 (_ BitVec 256)) (x164 (_ BitVec 256))) Bool (= x93 (bvsdiv (bvmul x93 x164) x164)))
(define-fun x192 ((x93 (_ BitVec 256)) (x164 (_ BitVec 256))) Bool (= x93 (bvsdiv (bvmul x164 x93) x164)))
(define-fun x44 ((x155 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x4 ((x155 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x89 ((x155 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x16 ((x155 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x209 ((x155 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x105 ((x155 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x156 ((x155 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x200 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 x176) x84 (x45 x155)))
(define-fun x66 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 x59) x82 (x200 x155)))
(define-fun x67 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv128 256)) x199 (x44 x155)))
(define-fun x69 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv164 256)) x73 (x4 x155)))
(define-fun x24 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv196 256)) x7 (x69 x155)))
(define-fun x54 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x155) (_ bv68 256) (x89 x155)))
(define-fun x52 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv160 256)) x117 (x24 x155)))
(define-fun x98 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv292 256) x155) x166 (x67 x155)))
(define-fun x8 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv324 256)) x15 (x98 x155)))
(define-fun x9 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv356 256)) x195 (x8 x155)))
(define-fun x29 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv292 256) x155) (_ bv32 256) (x105 x155)))
(define-fun x88 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x155) (_ bv1 256) (x87 x155)))
(define-fun x58 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv324 256) x155) (bvugt (_ bv356 256) x155)) (x88 (bvadd (bvneg (_ bv324 256)) x155)) (x156 x155)))
(define-fun x172 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 (_ bv388 256)) x119 (x9 x155)))
(define-fun x75 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite x77 (x9 x155) (ite x49 (x8 x155) (ite x1 (x98 x155) (ite x147 (x67 x155) (x172 x155))))))
(define-fun x173 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x218 x155) (_ bv0 256) (x75 x155)))
(define-fun x3 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x59 x155) x42 (x66 x155)))
(define-fun x97 ((x155 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 x55) x161 (x197 x155)))
(assert (= (_ bv0 256) (x63 (_ bv115792089237316195423570985008687907853269984665640564039456584007913129639935 256))))
(assert (= (_ bv64 256) (x110 (x160 (_ bv64 256) x142 (_ bv62 256)))))
(assert (x68 (_ bv1000000000000000000 256)))
(assert (=> (bvuge (_ bv10000 256) x130) (= (_ bv0 256) (x63 x130))))
(assert (= (x110 (x160 (_ bv64 256) x130 (_ bv62 256))) (_ bv64 256)))
(assert (x68 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)))
(assert (= x157 (=> (and (and (= (_ bv292 256) x121) (= x61 (bvult (_ bv0 256) x134)) (= x194 (_ bv292 256)) (= x184 (_ bv292 256)) (= x134 (x29 (_ bv292 256)))) (or (and x61 (and (bvuge x239 (_ bv32 256)) (= x241 (_ bv1 256)) (= (x58 (_ bv324 256)) x241) (bvule x239 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x239 (x29 (_ bv292 256))))) (not x61))) x224)))
(assert (= (_ bv0 256) (x63 (_ bv1145441982 256))))
(assert (bvult (_ bv10000 256) (x160 (_ bv64 256) x142 (_ bv62 256))))
(assert (= (or x147 x77 x49 x1 x137) x240))
(assert (not (x68 (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (= (_ bv0 256) (x63 (_ bv1099511627775 256))))
(assert (=> (bvuge (_ bv10000 256) x59) (= (x63 x59) (_ bv0 256))))
(assert (= (and x181 x163) x122))
(assert (= (_ bv62 256) (x148 (x160 (_ bv64 256) x142 (_ bv62 256)))))
(assert (= (x160 (_ bv64 256) x73 (_ bv2 256)) (x63 (x160 (_ bv64 256) x73 (_ bv2 256)))))
(assert (= (x70 (x160 (_ bv64 256) x130 (_ bv62 256))) x130))
(assert (= (x70 (x160 (_ bv64 256) x73 (_ bv2 256))) x73))
(assert (x68 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)))
(assert (= x179 (or x175 x138)))
(assert (= (=> (and (or (and (and (bvule (_ bv1 256) x193) (= x193 (x32 x162)) (= x26 true)) x101) (not x101)) (and (= (x97 x190) x146) (= x7 x81) (not (bvult x86 x161)) (= (_ bv68 256) x133) (not (bvult x95 x146)) (= (bvadd x7 x146) x95) (= x132 (_ bv2835717307 256)) (= x38 x180) (= x13 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)) (= (bvadd (_ bv292 256) x219) x218) (= x170 (_ bv292 256)) (= (_ bv292 256) x40) (= x230 (bvadd x218 (bvneg (_ bv292 256)))) (= x90 x71) (= (x29 (_ bv292 256)) x46) (= (x32 x162) x111) (= (x3 x162) x180) (= x174 x81) (= x190 (x160 (_ bv64 256) x73 (_ bv2 256))) (= x101 (= x46 (_ bv0 256))) (not (bvult x95 x146)) (= (x66 x59) x42) (= (x197 x141) x86) (= x210 x90) (not (bvugt x7 x86)) (= x141 (x160 (_ bv64 256) x59 (_ bv2 256))) (= x230 (_ bv68 256)) (= x42 x131) (= x161 (bvadd (bvneg x7) x86)) (= (x160 (_ bv64 256) x59 (_ bv2 256)) x55) (bvule (_ bv1 256) x111) (= x21 (_ bv1 256)))) x157) x20))
(assert (= (x160 (_ bv64 256) x142 (_ bv62 256)) (x63 (x160 (_ bv64 256) x142 (_ bv62 256)))))
(assert (= (_ bv64 256) (x110 (x160 (_ bv64 256) x73 (_ bv2 256)))))
(assert (= (x63 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x160 (_ bv64 256) x183 (_ bv62 256)) (x63 (x160 (_ bv64 256) x183 (_ bv62 256)))))
(assert (bvult (_ bv10000 256) (x160 (_ bv64 256) x130 (_ bv62 256))))
(assert (not (x68 (x160 (_ bv64 256) x145 (_ bv62 256)))))
(assert (= (x148 (x160 (_ bv64 256) x183 (_ bv62 256))) (_ bv62 256)))
(assert (= (x70 (x160 (_ bv64 256) x145 (_ bv62 256))) x145))
(assert (= x77 (and (not x127) x185)))
(assert (=> (bvule x162 (_ bv10000 256)) (= (_ bv0 256) (x63 x162))))
(assert (= (x70 (x160 (_ bv64 256) x183 (_ bv62 256))) x183))
(assert (= (x70 (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (_ bv0 256)))
(assert (= (x148 (x160 (_ bv64 256) x73 (_ bv2 256))) (_ bv2 256)))
(assert (= (_ bv0 256) (x63 (_ bv50023813 256))))
(assert (= x85 (and x240 x101)))
(assert (x68 (_ bv1145441982 256)))
(assert (not (x68 (x160 (_ bv64 256) x130 (_ bv62 256)))))
(assert (= (x70 (x160 (_ bv64 256) x142 (_ bv62 256))) x142))
(assert (x68 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256)))
(assert (= x207 true))
(assert (= (x110 (x160 (_ bv64 256) x59 (_ bv2 256))) (_ bv64 256)))
(assert (= x150 (and x61 x23)))
(assert (= (x63 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (bvugt (x160 (_ bv64 256) x59 (_ bv2 256)) (_ bv10000 256)))
(assert (x68 (_ bv4294967295 256)))
(assert (x68 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (_ bv0 256) (x63 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (= (x110 (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (_ bv64 256)))
(assert (x68 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (bvugt (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256)) (_ bv10000 256)))
(assert (= (x63 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (x160 (_ bv64 256) x130 (_ bv62 256)) (x63 (x160 (_ bv64 256) x130 (_ bv62 256)))))
(assert (x68 (_ bv115792089237316195423570985008687907853269984665640564039456584007913129639935 256)))
(assert (= (x160 (_ bv64 256) x59 (_ bv2 256)) (x63 (x160 (_ bv64 256) x59 (_ bv2 256)))))
(assert (bvugt (x160 (_ bv64 256) x73 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x110 (x160 (_ bv64 256) x183 (_ bv62 256))) (_ bv64 256)))
(assert (= x137 (and x185 x127)))
(assert (= x138 (and x207 x128)))
(assert (= (x70 (x160 (_ bv64 256) x59 (_ bv2 256))) x59))
(assert (= x118 (or (and x23 (not x61)) x150)))
(assert (= x185 (and x227 x122)))
(assert (= (and x122 (not x227)) x49))
(assert (bvugt (x160 (_ bv64 256) x145 (_ bv62 256)) (_ bv10000 256)))
(assert (=> (bvule x183 (_ bv10000 256)) (= (_ bv0 256) (x63 x183))))
(assert (=> (bvule x142 (_ bv10000 256)) (= (_ bv0 256) (x63 x142))))
(assert (= (x63 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x63 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256))))
(assert (= (_ bv0 256) (x63 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= x175 (and x207 (not x128))))
(assert (x68 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x224 (=> (and (and (and (= x18 x183) (bvule (_ bv1 256) x171) (= x53 (x160 (_ bv64 256) x183 (_ bv62 256))) (= (x203 x53) x14) (= x183 x60) (= (_ bv36 256) x37) (= (x32 x59) x171) (bvule x14 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x236 (bvugt x14 (_ bv0 256))) (= (_ bv2432040568 256) x208) (= x178 x233)) (and (= x94 (x160 (_ bv64 256) x130 (_ bv62 256))) (= x130 x28) (bvuge (_ bv1099511627775 256) x39) (= x233 x130) (= x228 (or (not x236) x182)) (= (_ bv1145441982 256) x222) (= (x91 x94) x39) (bvuge x27 (_ bv1 256)) (= (bvugt x39 (_ bv0 256)) x182) (= (x32 x59) x27))) (and (= x10 (_ bv36 256)) (= x18 x178))) x228)))
(assert (= (x148 (x160 (_ bv64 256) x145 (_ bv62 256))) (_ bv62 256)))
(assert (x68 (_ bv2432040568 256)))
(assert (= (x63 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (x68 (_ bv50023813 256)))
(assert (x68 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (not (x68 (x160 (_ bv64 256) x142 (_ bv62 256)))))
(assert (= (x63 (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256))))
(assert (=> (bvuge (_ bv10000 256) x176) (= (_ bv0 256) (x63 x176))))
(assert (not x220))
(assert (= (=> (and (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x78) x64 (bvuge x178 (_ bv0 256)) (bvuge x79 (_ bv0 256)) x135 (bvule x6 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x74) (not (= x162 x59)) (= x235 (_ bv0 256)) (bvuge x22 (_ bv0 256)) (bvuge x103 (_ bv0 256)) (= (_ bv36 256) x165) (bvule x126 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x217 (_ bv0 256)) (bvuge (_ bv4294967295 256) x79) (bvuge x80 (_ bv0 256)) (bvuge x153 (_ bv1 256)) (bvuge x50 (_ bv0 256)) (bvule (_ bv1 256) x167) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x232) (bvule (_ bv0 256) x6) (bvule x153 (_ bv4294967295 256)) (bvuge (_ bv4294967295 256) x167) (bvuge x113 (_ bv0 256)) (bvule x162 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x50 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x223 (bvule (_ bv1 256) x162) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x80) (bvuge x56 (_ bv0 256)) (bvule x11 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x217) (= x65 x178) (bvule x22 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x59 (_ bv1 256)) (bvule x178 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x238 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x149) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x56) (bvuge x149 (_ bv0 256)) (= x223 (= x167 x153)) (= x64 (bvult (_ bv0 256) (x32 x59))) (bvule (_ bv0 256) x74) (= (bvult (_ bv0 256) (x32 x162)) x135) (bvule x103 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x11) (bvule (_ bv68 256) x112) (bvule x151 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x59 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x231 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x126) (bvule (_ bv0 256) x231) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x112) (bvuge x78 (_ bv0 256)) (bvule (_ bv0 256) x151) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x113) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x238) (bvule (_ bv0 256) x232)) (and (and (and (and (and (= x201 (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (= x144 (x83 x201)) (= x35 (_ bv0 256)) (bvule (_ bv1 256) x2) (= x2 x41) (bvule (_ bv1 256) x189) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x144) (bvule x2 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (= x106 (x200 x59)) (= x151 x176) (bvule (_ bv1 256) x125) (= x212 x84) (= x82 x106) (= x41 (bvudiv x221 (_ bv1000000000000000000 256))) (= x128 (= (_ bv0 256) x216)) (bvule x25 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256)) (= x189 (x32 x59)) (bvule x125 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= (x45 x176) x84) (= x108 (_ bv0 256)) (= x104 (_ bv50023813 256)) (= x144 x154) (= (bvmul (_ bv1000000000000000000 256) x2) x221) (= x36 x71) (bvuge x25 (_ bv1 256)) (= x25 (bvudiv x221 x125))) (or (and (not x128) (and (= (bvudiv x51 (_ bv10000 256)) x31) (= x31 x114) (bvuge x51 (_ bv1 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x51) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x216) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x25) (= x102 (bvudiv (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x216)) (bvuge x25 (_ bv1 256)) (= x51 (bvmul x216 x25)) (x136 x25 x216) (not (bvugt x25 x102)) (bvule (_ bv1 256) x216))) (and x128 (= x114 (_ bv0 256))))) (= x154 x151)) (and (= x191 x145) (= x204 (x32 x59)) x43 (= (x91 x19) x57) (bvuge x33 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x73) (= x99 (_ bv1145441982 256)) (= x43 (or (not x120) x214)) (= x19 (x160 (_ bv64 256) x145 (_ bv62 256))) (bvule (_ bv1 256) x204) (bvuge (_ bv1099511627775 256) x57) (= x214 (bvult (_ bv0 256) x57)) (= x73 x36) (= x33 x107) (= x73 (x196 (_ bv4 256))) (= x145 x123) (= (x196 (_ bv36 256)) x33))) (and (= x169 (x203 x48)) (= x140 (_ bv2432040568 256)) (bvule x169 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x142 x65) (= x143 (_ bv36 256)) (= x142 x34) (= (bvult (_ bv0 256) x169) x120) (bvule (_ bv1 256) x109) (= x48 (x160 (_ bv64 256) x142 (_ bv62 256))) (= (x32 x59) x109) (= x123 x178)))) x76) x220))
(assert (= (x160 (_ bv64 256) x145 (_ bv62 256)) (x63 (x160 (_ bv64 256) x145 (_ bv62 256)))))
(assert (=> (bvuge (_ bv10000 256) x73) (= (_ bv0 256) (x63 x73))))
(assert (= (x63 (_ bv2835717307 256)) (_ bv0 256)))
(assert (= (x63 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x110 (x160 (_ bv64 256) x145 (_ bv62 256)))))
(assert (= (x63 (_ bv2432040568 256)) (_ bv0 256)))
(assert (x68 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (x68 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (=> (bvuge (_ bv10000 256) x145) (= (_ bv0 256) (x63 x145))))
(assert (= (or x85 (and (not x101) x240)) x23))
(assert (= (x148 (x160 (_ bv64 256) x59 (_ bv2 256))) (_ bv2 256)))
(assert (= (_ bv0 256) (x63 (_ bv4294967295 256))))
(assert (x68 (_ bv1099511627775 256)))
(assert (= x76 (=> (and (= x129 (x24 (_ bv160 256))) (bvule x199 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (not (bvult x229 x237)) (= (x54 (_ bv128 256)) x219) (= (_ bv0 256) x187) (= x177 (bvadd x25 (bvneg x7))) (not (bvugt x206 x5)) (bvule (_ bv1 256) x177) (= (bvadd (bvneg x7) x25) x229) (= (_ bv1000000000000000000 256) x47) (not (bvugt x30 (bvadd x177 x30))) (= (_ bv228 256) x168) (= (bvadd (bvneg (_ bv1 256)) x5) x206) (not (bvugt x177 x25)) (= x205 (bvugt x219 (_ bv0 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256) x229) (= x117 (bvadd (bvneg (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)) x124)) (bvule (_ bv2 256) x5) (not (bvult x25 x229)) (= x188 x199) (bvule x237 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256)) (= (bvadd x177 x30) x5) (= x7 (ite (bvugt x33 x114) x114 x33)) (= x30 (bvmul x2 (_ bv1000000000000000000 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039456584007913129639935 256) x177) (= x47 (bvudiv x30 x2)) (= x198 (_ bv128 256)) (= x199 (bvudiv x206 x177)) (bvule (_ bv1 256) x199) (= (bvand x129 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) x124)) (and (=> (and x205 (and (= x181 (bvugt x219 (_ bv32 256))) (= x166 (x52 (_ bv160 256))))) (and (=> (and (and (= x227 (bvugt x219 (_ bv64 256))) (= x15 (x52 (_ bv192 256)))) x181) (and (=> (not x227) x20) (=> (and x227 (and (= (x52 (_ bv224 256)) x195) (= x127 (bvugt x219 (_ bv96 256))))) (and (=> x127 x226) (=> (not x127) x20))))) (=> (not x181) x20))) (=> (not x205) x20)))))
(assert (x68 (_ bv2835717307 256)))
(assert (= x147 (and (not x205) x179)))
(assert (= x163 (and x205 x179)))
(assert (= x1 (and x163 (not x181))))
(assert (= (_ bv0 256) (x63 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))))
(assert (bvult (_ bv10000 256) (x160 (_ bv64 256) x183 (_ bv62 256))))
(assert (not (x68 (x160 (_ bv64 256) x73 (_ bv2 256)))))
(assert (= (_ bv69 256) (x148 (x160 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (not (x68 (x160 (_ bv64 256) x59 (_ bv2 256)))))
(assert (= (_ bv62 256) (x148 (x160 (_ bv64 256) x130 (_ bv62 256)))))
(assert (not (x68 (x160 (_ bv64 256) x183 (_ bv62 256)))))
(assert (= x226 (=> (and (= (x52 (_ bv256 256)) x119) (= (not (bvugt x219 (_ bv128 256))) x92)) (and x92 x20))))
(check-sat)
(exit)
