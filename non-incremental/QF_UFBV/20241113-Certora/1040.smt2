(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x232 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x71 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x61 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x70 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x62 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x182 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x115 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x224 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x110 () Bool)
(declare-fun x53 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x159 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x73 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x82 ((_ BitVec 256)) Bool)
(declare-fun x218 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x35 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x190 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x100 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x162 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x6 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x59 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x193 () Bool)
(declare-fun x141 () Bool)
(declare-fun x95 () Bool)
(declare-fun x33 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x184 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x56 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x237 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x109 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x208 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x220 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x26 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x214 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x161 () Bool)
(declare-fun x169 () Bool)
(declare-fun x140 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x39 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x12 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x78 () Bool)
(declare-fun x157 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x40 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x48 () Bool)
(declare-fun x2 () Bool)
(declare-fun x120 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x239 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(define-fun x21 ((x34 (_ BitVec 256)) (x122 (_ BitVec 256))) Bool (= x34 (bvudiv (bvmul x122 x34) x122)))
(define-fun x129 ((x34 (_ BitVec 256)) (x122 (_ BitVec 256))) Bool (= x34 (bvsdiv (bvmul x34 x122) x122)))
(define-fun x219 ((x34 (_ BitVec 256)) (x122 (_ BitVec 256))) Bool (= x34 (bvsdiv (bvmul x122 x34) x122)))
(define-fun x114 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x43 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x22 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x189 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x175 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x19 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x3 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x238 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x213 ((x229 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x16 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= x229 x147) x173 (x190 x229)))
(define-fun x7 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= x229 (_ bv512 256)) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x114 x229)))
(define-fun x126 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= x229 (_ bv516 256)) x148 (x7 x229)))
(define-fun x212 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= x229 (_ bv512 256)) x50 (x126 x229)))
(define-fun x172 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= x229 (_ bv512 256)) (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256) (x212 x229)))
(define-fun x93 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv516 256) x229) x183 (x172 x229)))
(define-fun x228 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= x229 (_ bv548 256)) x112 (x93 x229)))
(define-fun x8 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv580 256) x229) x233 (x228 x229)))
(define-fun x45 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x229 (_ bv544 256)) (bvule (_ bv512 256) x229)) (x56 (bvadd x229 (bvneg (_ bv512 256)))) (x8 x229)))
(define-fun x132 ((x229 (_ BitVec 256))) (_ BitVec 256) (ite x76 (x45 x229) (x8 x229)))
(define-fun x136 ((x35 (_ BitVec 256))) Bool (or (= (bvadd (_ bv1 256) x35) (x182 (x33 x35))) (not (and (bvult x35 x60) (bvule (_ bv0 256) x35))) (not (and (bvuge x35 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x35)))))
(define-fun x106 ((x234 (_ BitVec 256))) Bool (or (and (bvule (x182 x234) x60) (and (= x234 (x33 (bvadd (x182 x234) (bvneg (_ bv1 256))))) (bvule (_ bv1 256) (x182 x234)))) (= (_ bv0 256) (x182 x234)) (not (and (bvule (_ bv0 256) x234) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x234)))))
(define-fun x24 ((x206 (_ BitVec 256)) (x92 (_ BitVec 256))) Bool (or (or (not (and (bvuge x92 (_ bv0 256)) (bvule x92 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (x100 x206 (x115 x206 x92)) (bvadd (_ bv1 256) x92)) (not (and (bvuge x92 (_ bv0 256)) (bvult x92 (x224 x206))))) (not (and (bvule (_ bv0 256) x206) (bvule x206 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x204 ((x27 (_ BitVec 256)) (x88 (_ BitVec 256))) Bool (or (not (and (bvuge x27 (_ bv0 256)) (bvule x27 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (= (x100 x27 x88) (_ bv0 256)) (and (bvule (x100 x27 x88) (x224 x27)) (and (= x88 (x115 x27 (bvadd (bvneg (_ bv1 256)) (x100 x27 x88)))) (bvule (_ bv1 256) (x100 x27 x88)))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x88) (bvule (_ bv0 256) x88))))))
(define-fun x158 ((x96 (_ BitVec 256)) (x44 (_ BitVec 256))) Bool (or (or (not (and (bvule (_ bv0 256) x44) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x44))) (not (and (bvuge x44 (_ bv0 256)) (bvugt (x6 x96) x44))) (= (bvadd x44 (_ bv1 256)) (x40 x96 (x70 x96 x44)))) (not (and (bvule x96 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x96)))))
(define-fun x28 ((x207 (_ BitVec 256)) (x77 (_ BitVec 256))) Bool (or (or (= (_ bv0 256) (x40 x207 x77)) (not (and (bvule x77 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x77 (_ bv0 256)))) (and (and (= x77 (x70 x207 (bvadd (bvneg (_ bv1 256)) (x40 x207 x77)))) (bvuge (x40 x207 x77) (_ bv1 256))) (bvule (x40 x207 x77) (x6 x207)))) (not (and (bvuge x207 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x207)))))
(define-fun x99 ((x4 (_ BitVec 256)) (x191 (_ BitVec 256))) Bool (or (or (not (= (_ bv0 256) (x182 x191))) (not (and (bvuge x191 (_ bv0 256)) (bvule x191 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (not (or (not (= (_ bv0 256) (x40 x4 x191))) (not (= (x100 x4 x191) (_ bv0 256)))))) (not (and (bvule (_ bv0 256) x4) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x4)))))
(define-fun x235 ((x209 (_ BitVec 256))) Bool (or (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x209) (bvule (_ bv0 256) x209))) (bvult (x224 x209) (_ bv340282366920938463463374607431768211455 256))))
(define-fun x163 ((x201 (_ BitVec 256))) Bool (or (bvugt (_ bv340282366920938463463374607431768211455 256) (x6 x201)) (not (and (bvule (_ bv0 256) x201) (bvule x201 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x174 () Bool (x136 (bvadd (x182 x137) (bvneg (_ bv1 256)))))
(define-fun x138 () Bool x174)
(define-fun x89 () Bool (x106 x137))
(define-fun x41 () Bool x89)
(define-fun x25 () Bool (x24 x198 (bvadd (bvneg (_ bv1 256)) (x100 x198 x137))))
(define-fun x194 () Bool x25)
(define-fun x167 () Bool (x204 x198 x137))
(define-fun x80 () Bool x167)
(define-fun x117 () Bool (x158 x198 (bvadd (x40 x198 x137) (bvneg (_ bv1 256)))))
(define-fun x58 () Bool x117)
(define-fun x215 () Bool (x28 x198 x137))
(define-fun x222 () Bool x215)
(define-fun x57 () Bool (x99 x198 x137))
(define-fun x87 () Bool (x99 x198 x137))
(define-fun x17 () Bool (and x57 x87))
(define-fun x230 () Bool (x235 x198))
(define-fun x85 () Bool x230)
(define-fun x151 () Bool (x163 x198))
(define-fun x72 () Bool x151)
(assert (= (or (and x54 x156) x196) x210))
(assert (=> (bvule x168 (_ bv10000 256)) (= (_ bv0 256) (x39 x168))))
(assert (= (x39 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (x162 (x26 (_ bv64 256) x148 (_ bv103 256))) (_ bv64 256)))
(assert (x82 (_ bv1889567281 256)))
(assert (= (and x13 x108) x221))
(assert (x82 (_ bv3511166865 256)))
(assert (=> (bvule x181 (_ bv10000 256)) (= (x39 x181) (_ bv0 256))))
(assert x85)
(assert (bvult x60 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (and x1 x9) x76))
(assert (=> (bvuge (_ bv10000 256) x170) (= (_ bv0 256) (x39 x170))))
(assert (= x148 (x208 (x26 (_ bv64 256) x148 (_ bv103 256)))))
(assert (= (x39 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (=> (and (and (= x30 (_ bv512 256)) (bvule (_ bv1 256) x236) (not (bvult x69 x199)) (= x48 (= (_ bv0 256) x146)) (= x113 (bvadd x69 (bvneg x199))) (bvuge (_ bv1000000000000000 256) x146) (= (x132 (_ bv512 256)) x146)) (or (and (= (_ bv0 256) x185) x48) (and (not x48) (and (= (bvmul x113 x146) x188) (x21 x146 x113) (= x185 x188))))) x179) x74))
(assert (=> (bvule x90 (_ bv10000 256)) (= (_ bv0 256) (x39 x90))))
(assert (not x223))
(assert (= (_ bv0 256) (x39 (_ bv1889567281 256))))
(assert (= (=> (and (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x79) x95 (= x17 x61) (not (= x18 x186)) (not (= x170 x139)) (= x95 (bvult (_ bv0 256) (x62 x86))) (not (= x18 x86)) x205 (not (= x86 x168)) (not (= x170 x186)) (= x194 x237) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x91) (not (= x18 x148)) (bvule x168 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x148 x170)) x73 (bvule (_ bv0 256) x37) (bvuge x107 (_ bv1 256)) (bvuge x32 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x107) x11 (not (= x181 x168)) (not (= x90 x181)) (bvule (_ bv1 256) x170) (bvuge x168 (_ bv1 256)) (bvule x98 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x220 (not (= x170 x181)) (= x143 (bvugt (x62 x139) (_ bv0 256))) (bvuge x139 (_ bv1 256)) (= x120 x222) (not (= x168 x90)) (= x160 x139) (bvule (_ bv4 256) x31) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x31) (= x41 x149) x216 (= x75 x18) (not (= x186 x181)) (not (= x90 x186)) (not (= x148 x90)) (not (= x18 x168)) (not (= x148 x181)) (bvuge x18 (_ bv1 256)) (not (= x86 x139)) (bvule (_ bv1 256) x160) (bvuge x186 (_ bv1 256)) x120 (= (bvult (_ bv0 256) (x62 x18)) x38) (bvule x32 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x159 x138) (= x216 (bvugt (x62 x170) (_ bv0 256))) (not (= x90 x86)) x159 (bvule x231 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x168 x148)) (bvuge x192 (_ bv0 256)) (bvule (_ bv0 256) x119) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x160) (bvule x90 (_ bv1461501637330902918203684832716283019655932542975 256)) x133 x61 (bvule x192 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x58 x205) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x37) (not (= x186 x168)) (not (= x186 x139)) (not (= x86 x186)) (bvule x18 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x181) (not (= x148 x186)) (bvuge (_ bv4294967295 256) x84) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x75) x38 (not (= x90 x18)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x102) (bvule (_ bv0 256) x104) (not (= x139 x18)) (= x107 x181) (= x123 (bvult (_ bv0 256) (x62 x181))) (bvuge x79 (_ bv0 256)) (bvule x119 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x181) x237 x123 (bvule (_ bv1 256) x148) (bvuge x102 (_ bv0 256)) (bvule (_ bv0 256) x98) x143 (not (= x170 x168)) (bvule x170 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x90) (not (= x170 x86)) (not (= x139 x181)) (bvule x20 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x168 x32) (bvuge x86 (_ bv1 256)) (not (= x18 x170)) (bvule x148 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x130 (_ bv0 256)) (not (= x181 x18)) (= x11 x80) (not (= x168 x139)) (not (= x148 x139)) (= x220 (bvult (_ bv0 256) (x62 x168))) (not (= x86 x148)) (bvule (_ bv1 256) x75) (not (= x86 x181)) (not (= x170 x90)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x86) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x186) (= x18 x231) (bvuge x231 (_ bv1 256)) (= x78 (bvult (_ bv0 256) (x62 x186))) (bvuge x154 (_ bv0 256)) (= x133 (bvugt (x62 x148) (_ bv0 256))) (not (= x139 x90)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x104) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x154) (= x73 (bvult (_ bv0 256) (x62 x90))) x149 (bvule (_ bv0 256) x91) (bvuge x20 (_ bv0 256)) (bvule (_ bv0 256) x84) x78 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x139)) (and (= x69 x102) (and (= (x190 x147) x173) (= x173 x105) (= x91 x147) (= x211 (x62 x148)) (= x227 x36) (bvuge x211 (_ bv1 256)) (= x54 (= x69 x199)) (= x36 (x16 x148)) (= (_ bv3511166865 256) x195)))) (and (=> x54 x110) (=> (and (and (or (and x1 (and (= x236 (_ bv1 256)) (bvuge (_ bv4294967295 256) x23) (bvuge x23 (_ bv32 256)))) (and (= x131 x236) (not x1))) (and (= x67 (_ bv1889567281 256)) (bvule (_ bv1 256) x200) (= (x239 x83) x50) (= (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) x101) (= (x62 x134) x180) (= (x62 x148) x200) (bvule (_ bv1 256) x180) (= x1 (bvugt x131 (_ bv0 256))) (= x183 (x212 (_ bv512 256))) (= (_ bv512 256) x10) (bvule x134 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x148 x121) (bvule (_ bv1 256) x165) (bvuge x23 (_ bv32 256)) (= x148 x226) (bvule (_ bv1 256) x121) (= x165 (x62 x121)) (= x197 (_ bv36 256)) (= x226 x135) (= (x26 (_ bv64 256) x148 (_ bv103 256)) x83) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x121) (= x153 (_ bv512 256)))) (not x54)) x74))) x223))
(assert (x82 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)))
(assert (=> (bvuge (_ bv10000 256) x148) (= (x39 x148) (_ bv0 256))))
(assert (= (and x184 x177) x97))
(assert (x82 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)))
(assert (= (_ bv0 256) (x39 (_ bv1000000000000000 256))))
(assert (=> (bvule x147 (_ bv10000 256)) (= (x39 x147) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x18) (= (_ bv0 256) (x39 x18))))
(assert (= (=> (and (and (not (bvugt x14 (bvadd x14 x233))) (= (= (_ bv0 256) x185) x177) (= (bvudiv x166 (_ bv1000000000000000000 256)) x14) (= (bvadd x233 x14) x47) (= (_ bv640 256) x225) (= x171 (_ bv1000000000000000000 256))) (or (and x177 (= x203 (_ bv0 256))) (and (not x177) (and (= x203 x29) (= x29 (bvmul x185 x144)) (x21 x185 x144))))) x55) x142))
(assert (x82 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (and (not x1) x9) x128))
(assert (x82 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= x110 (=> (= x53 (or (not (and (bvule x198 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x198 (_ bv0 256)))) (or (not (or (not (= (_ bv0 256) (x100 x198 x137))) (not (= (x40 x198 x137) (_ bv0 256))))) (not (and (bvule x137 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x137))) (not (= (x182 x137) (_ bv0 256)))))) x53)))
(assert (= (=> (and (and (= x127 (_ bv1000000000000000000 256)) (= x13 (= x185 (_ bv0 256)))) (or (and (= x66 (_ bv0 256)) x13) (and (and (x21 x185 x112) (= x68 x66) (= x68 (bvmul x112 x185))) (not x13)))) x157) x179))
(assert (not (x82 (x26 (_ bv64 256) x148 (_ bv103 256)))))
(assert (= (or x140 x51) x184))
(assert (x82 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x39 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)) (_ bv0 256)))
(assert (= (and (not x177) x184) x193))
(assert x72)
(assert (bvult (_ bv10000 256) (x26 (_ bv64 256) x148 (_ bv103 256))))
(assert (= x157 (=> (and (and (= (_ bv576 256) x103) (= x81 (= x118 (_ bv0 256))) (= (bvudiv x66 (_ bv1000000000000000000 256)) x63) (= (bvadd x63 x112) x124) (not (bvult (bvadd x63 x112) x63)) (= x152 (_ bv1000000000000000000 256))) (or (and (and (= (bvmul x118 x63) x150) (x21 x118 x63) (= x166 x150)) (not x81)) (and (= (_ bv0 256) x166) x81))) x142)))
(assert (= (and (not x54) x156) x9))
(assert (= x12 (or x164 x221)))
(assert (=> (bvule x86 (_ bv10000 256)) (= (x39 x86) (_ bv0 256))))
(assert (= (x39 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x39 (x26 (_ bv64 256) x148 (_ bv103 256))) (x26 (_ bv64 256) x148 (_ bv103 256))))
(assert (= x196 (or x97 x193)))
(assert (= (_ bv0 256) (x39 (_ bv3511166865 256))))
(assert (=> (bvuge (_ bv10000 256) x121) (= (_ bv0 256) (x39 x121))))
(assert (=> (bvule x139 (_ bv10000 256)) (= (_ bv0 256) (x39 x139))))
(assert (= (_ bv0 256) (x39 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= x71 (and x169 (not x48))))
(assert (= true x156))
(assert (= x59 (and x48 x169)))
(assert (= x164 (and (not x13) x108)))
(assert (= x140 (and x12 x81)))
(assert (= x55 (=> (and (= (bvadd x144 x65) x111) (= (_ bv704 256) x5) (not (bvult (bvadd x144 x65) x65)) (= x65 (bvudiv x203 (_ bv1000000000000000000 256)))) x110)))
(assert (x82 (_ bv4294967295 256)))
(assert (=> (bvule x186 (_ bv10000 256)) (= (_ bv0 256) (x39 x186))))
(assert (x82 (_ bv1000000000000000000 256)))
(assert (= x169 (or x128 x76)))
(assert (= (x39 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x214 (x26 (_ bv64 256) x148 (_ bv103 256))) (_ bv103 256)))
(assert (=> (bvule x134 (_ bv10000 256)) (= (x39 x134) (_ bv0 256))))
(assert (= (or x59 x71) x108))
(assert (= (_ bv0 256) (x39 (_ bv4294967295 256))))
(assert (x82 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv0 256) (x39 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256))))
(assert (= x51 (and (not x81) x12)))
(assert (x82 (_ bv1000000000000000 256)))
(check-sat)
(exit)
