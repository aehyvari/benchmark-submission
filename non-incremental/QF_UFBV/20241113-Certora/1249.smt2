(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x43 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x18 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x274 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x55 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x25 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x117 () Bool)
(declare-fun x178 () Bool)
(declare-fun x214 () Bool)
(declare-fun x135 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x171 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x75 () Bool)
(declare-fun x194 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x23 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x136 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x257 () Bool)
(declare-fun x159 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x100 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x258 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x8 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x210 () (_ BitVec 256))
(declare-fun x61 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x124 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x60 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x66 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x259 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x11 () Bool)
(declare-fun x103 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x195 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x262 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x286 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x79 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x138 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x62 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x240 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x46 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x110 ((_ BitVec 256)) Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x229 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x148 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x217 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x280 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x282 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x263 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x255 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x246 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x222 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x45 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x261 () Bool)
(define-fun x152 ((x64 (_ BitVec 256)) (x21 (_ BitVec 256))) Bool (= x64 (bvudiv (bvmul x21 x64) x21)))
(define-fun x213 ((x64 (_ BitVec 256)) (x21 (_ BitVec 256))) Bool (= x64 (bvsdiv (bvmul x64 x21) x21)))
(define-fun x271 ((x64 (_ BitVec 256)) (x21 (_ BitVec 256))) Bool (= x64 (bvsdiv (bvmul x21 x64) x21)))
(define-fun x104 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x264 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x192 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x200 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x24 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x97 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x172 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x180 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x151 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x58 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x215 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x175 ((x54 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x28 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 x216) x6 (x222 x54)))
(define-fun x203 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 (_ bv128 256)) (_ bv114138022719912475680867045629478960338713192110453415424194996738542475935744 256) (x104 x54)))
(define-fun x248 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 (_ bv132 256)) x72 (x203 x54)))
(define-fun x98 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 (_ bv0 256)) x20 (x138 x54)))
(define-fun x153 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv128 256) x54) (bvugt (_ bv160 256) x54)) (x98 (bvadd x54 (bvneg (_ bv128 256)))) (x248 x54)))
(define-fun x244 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x54) (_ bv114138022719912475680867045629478960338713192110453415424194996738542475935744 256) (x153 x54)))
(define-fun x211 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x54) x224 (x244 x54)))
(define-fun x105 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x54) x299 (x62 x54)))
(define-fun x94 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x54 (_ bv192 256)) (bvuge x54 (_ bv160 256))) (x105 (bvadd (bvneg (_ bv160 256)) x54)) (x211 x54)))
(define-fun x144 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 (_ bv256 256)) (_ bv10936679508223583803006762266923565500374401145016910147028117655998246682624 256) (x94 x54)))
(define-fun x233 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x54) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x180 x54)))
(define-fun x146 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 (_ bv132 256)) x93 (x233 x54)))
(define-fun x34 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x54) x162 (x79 x54)))
(define-fun x204 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 (_ bv128 256)) x162 (x146 x54)))
(define-fun x185 ((x54 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x54) x149 (x144 x54)))
(define-fun x243 ((x170 (_ BitVec 256))) Bool (or (not (and (bvuge x170 (_ bv0 256)) (bvule x170 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (not (and (bvule (_ bv0 256) x170) (bvult x170 x143))) (= (bvadd x170 (_ bv1 256)) (x240 (x18 x170)))))
(define-fun x141 ((x198 (_ BitVec 256))) Bool (or (= (x240 x198) (_ bv0 256)) (and (bvuge x143 (x240 x198)) (and (bvule (_ bv1 256) (x240 x198)) (= (x18 (bvadd (bvneg (_ bv1 256)) (x240 x198))) x198))) (not (and (bvuge x198 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x198)))))
(define-fun x245 ((x91 (_ BitVec 256)) (x5 (_ BitVec 256))) Bool (or (not (and (bvuge x91 (_ bv0 256)) (bvule x91 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (not (and (bvugt (x148 x91) x5) (bvule (_ bv0 256) x5))) (= (x258 x91 (x103 x91 x5)) (bvadd (_ bv1 256) x5)) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x5) (bvule (_ bv0 256) x5))))))
(define-fun x37 ((x74 (_ BitVec 256)) (x130 (_ BitVec 256))) Bool (or (or (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x130) (bvule (_ bv0 256) x130))) (= (x258 x74 x130) (_ bv0 256)) (and (bvule (x258 x74 x130) (x148 x74)) (and (bvule (_ bv1 256) (x258 x74 x130)) (= x130 (x103 x74 (bvadd (x258 x74 x130) (bvneg (_ bv1 256)))))))) (not (and (bvuge x74 (_ bv0 256)) (bvule x74 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x293 ((x145 (_ BitVec 256)) (x69 (_ BitVec 256))) Bool (or (not (and (bvuge x145 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x145))) (or (not (and (bvugt (x136 x145) x69) (bvule (_ bv0 256) x69))) (= (bvadd (_ bv1 256) x69) (x41 x145 (x55 x145 x69))) (not (and (bvule x69 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x69 (_ bv0 256)))))))
(define-fun x283 ((x269 (_ BitVec 256)) (x73 (_ BitVec 256))) Bool (or (or (= (_ bv0 256) (x41 x269 x73)) (not (and (bvuge x73 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x73))) (and (and (bvule (_ bv1 256) (x41 x269 x73)) (= (x55 x269 (bvadd (x41 x269 x73) (bvneg (_ bv1 256)))) x73)) (bvule (x41 x269 x73) (x136 x269)))) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x269) (bvuge x269 (_ bv0 256))))))
(define-fun x176 ((x67 (_ BitVec 256)) (x285 (_ BitVec 256))) Bool (or (not (and (bvuge x67 (_ bv0 256)) (bvule x67 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (not (= (_ bv0 256) (x240 x285))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x285) (bvuge x285 (_ bv0 256)))) (not (or (not (= (x258 x67 x285) (_ bv0 256))) (not (= (x41 x67 x285) (_ bv0 256))))))))
(define-fun x190 ((x237 (_ BitVec 256))) Bool (or (not (and (bvule x237 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x237 (_ bv0 256)))) (bvult (x148 x237) (_ bv340282366920938463463374607431768211455 256))))
(define-fun x242 ((x109 (_ BitVec 256))) Bool (or (not (and (bvuge x109 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x109))) (bvugt (_ bv340282366920938463463374607431768211455 256) (x136 x109))))
(define-fun x44 () Bool (x243 (bvadd (x240 x156) (bvneg (_ bv1 256)))))
(define-fun x68 () Bool x44)
(define-fun x208 () Bool (x141 x156))
(define-fun x249 () Bool x208)
(define-fun x177 () Bool (x245 x132 (bvadd (x258 x132 x156) (bvneg (_ bv1 256)))))
(define-fun x165 () Bool x177)
(define-fun x267 () Bool (x37 x132 x156))
(define-fun x230 () Bool x267)
(define-fun x277 () Bool (x293 x132 (bvadd (x41 x132 x156) (bvneg (_ bv1 256)))))
(define-fun x197 () Bool x277)
(define-fun x290 () Bool (x283 x132 x156))
(define-fun x218 () Bool x290)
(define-fun x26 () Bool (x176 x132 x156))
(define-fun x265 () Bool (x176 x132 x156))
(define-fun x155 () Bool (and x265 x26))
(define-fun x235 () Bool (x190 x132))
(define-fun x39 () Bool x235)
(define-fun x239 () Bool (x242 x132))
(define-fun x163 () Bool x239)
(assert (x110 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)))
(assert (= (=> (and (and (= x57 (x185 (_ bv256 256))) (= (= (_ bv0 256) x206) x297) (= (_ bv1000000000000000000 256) x7) (bvule (_ bv1 256) x57)) (or (and (= (_ bv0 256) x188) x297) (and (and (= x85 (bvmul x206 (_ bv1000000000000000000 256))) (x152 x206 (_ bv1000000000000000000 256)) (= x188 x85)) (not x297)))) x280) x246))
(assert (=> (bvule x247 (_ bv10000 256)) (= (x195 x247) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x216) (= (x195 x216) (_ bv0 256))))
(assert (bvugt (x194 (_ bv64 256) x224 (_ bv54 256)) (_ bv10000 256)))
(assert (= (_ bv67 256) (x46 (x194 (_ bv64 256) x51 (_ bv67 256)))))
(assert (= (and x126 x32) x259))
(assert (= x171 (and x297 x257)))
(assert (=> (bvule x53 (_ bv10000 256)) (= (_ bv0 256) (x195 x53))))
(assert (=> (bvuge (_ bv10000 256) x129) (= (x195 x129) (_ bv0 256))))
(assert (= (=> (and (= (_ bv256 256) x15) (= (bvudiv x147 (_ bv1000000000000000000 256)) x206) (= (x8 x224) x82) (bvule (_ bv1 256) x82) (= (= (_ bv0 256) x191) x32) (= x262 (x8 x93)) (= x224 x93) (= (_ bv4 256) x83) (= x1 (_ bv192 256)) (= (_ bv405663989 256) x31) (bvuge x262 (_ bv1 256)) (= (_ bv10936679508223583803006762266923565500374401145016910147028117655998246682624 256) x125)) (and (=> (and (= (_ bv1000000000000000000 256) x149) x32) x246) (=> (and (and (or (and x186 (= x4 (_ bv0 256))) (and (and (x152 x80 (_ bv1000000000000000000 256)) (= (bvmul x80 (_ bv1000000000000000000 256)) x150) (= x4 x150)) (not x186))) (and (= (_ bv128 256) x42) (= (_ bv36 256) x14) (= (_ bv128 256) x241) (= x256 (x8 x202)) (= (bvadd x221 x210) x59) (= x207 x65) (= (x194 (_ bv64 256) x93 (_ bv103 256)) x167) (not (bvugt x252 x59)) (= (x8 x93) x81) (bvuge x256 (_ bv1 256)) (= (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) x284) (= x93 x202) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x202) (= x162 (x263 x167)) (bvule (_ bv1 256) x81) (= x186 (= x80 (_ bv0 256))) (= x93 x65) (= (x204 (_ bv128 256)) x210) (= (_ bv1000000000000000000 256) x295) (bvule (_ bv1 256) x202) (= x38 (_ bv1889567281 256)) (bvule (_ bv1 256) x191) (= x80 (bvadd (bvneg x252) x59)) (not (bvugt x210 (bvadd x210 x221))))) (not x32)) x164))) x261))
(assert (= (and x126 (not x32)) x71))
(assert (= x114 (or x122 x86)))
(assert (=> (bvule x202 (_ bv10000 256)) (= (_ bv0 256) (x195 x202))))
(assert (= (_ bv0 256) (x195 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= x75 (or x171 x142)))
(assert (not (x110 (x194 (_ bv64 256) x51 (_ bv67 256)))))
(assert (= x288 (and (not x173) x10)))
(assert (= (x195 x157) (x195 (bvadd x182 x157))))
(assert (x110 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x122 (and x71 (not x186))))
(assert (=> (bvule x123 (_ bv10000 256)) (= (x195 x123) (_ bv0 256))))
(assert (= (x195 (bvadd (_ bv4 256) x225)) (x195 x225)))
(assert (bvult x143 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (_ bv0 256) (x195 (_ bv405663989 256))))
(assert (= (or x259 x114) x257))
(assert (x110 (_ bv405663989 256)))
(assert (x110 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv54 256) (x46 (x194 (_ bv64 256) x224 (_ bv54 256)))))
(assert (not (x110 (x194 (_ bv64 256) x224 (_ bv54 256)))))
(assert (= (_ bv32 256) (x282 (x61 (_ bv32 256) (_ bv65 256)))))
(assert (x110 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (_ bv0 256) (x195 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x195 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)) (_ bv0 256)))
(assert (bvugt (x194 (_ bv64 256) x51 (_ bv67 256)) (_ bv10000 256)))
(assert (= (x195 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (=> (and (and (= (_ bv1000000000000000000 256) x253) (= (= (_ bv0 256) x84) x3)) (or (and (not x3) (and (= x147 x12) (= x12 (bvmul x140 x84)) (x152 x84 x140))) (and x3 (= (_ bv0 256) x147)))) x261) x275))
(assert (= (and x186 x71) x86))
(assert (= (_ bv64 256) (x282 (x194 (_ bv64 256) x51 (_ bv67 256)))))
(assert (bvugt (x61 (_ bv32 256) (_ bv65 256)) (_ bv10000 256)))
(assert (=> (bvuge (_ bv10000 256) x51) (= (_ bv0 256) (x195 x51))))
(assert (=> (bvuge (_ bv10000 256) x29) (= (x195 x29) (_ bv0 256))))
(assert (=> (bvule x209 (_ bv10000 256)) (= (x195 x209) (_ bv0 256))))
(assert (= (x195 (_ bv114138022719912475680867045629478960338713192110453415424194996738542475935744 256)) (_ bv0 256)))
(assert (= x158 (and x10 x173)))
(assert (x110 (_ bv1000000000000000000 256)))
(assert (= x126 (or x33 x133)))
(assert (=> (bvule x101 (_ bv10000 256)) (= (_ bv0 256) (x195 x101))))
(assert (=> (bvuge (_ bv10000 256) x224) (= (x195 x224) (_ bv0 256))))
(assert x39)
(assert (=> (bvuge (_ bv10000 256) x183) (= (_ bv0 256) (x195 x183))))
(assert x163)
(assert (= (=> (and (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x181) (bvule x279 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x230 x232) (bvuge x183 (_ bv1 256)) (not (= x209 x93)) (not (= x205 x93)) (not (= x101 x123)) (bvule x53 (_ bv1461501637330902918203684832716283019655932542975 256)) x187 (= x205 x184) (bvule (_ bv0 256) x96) (not (= x247 x29)) (not (= x209 x29)) (= x35 x51) (bvule x224 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x189 x197) (not (= x29 x93)) (not (= x247 x123)) (bvuge x251 (_ bv0 256)) (= x178 (bvugt (x8 x209) (_ bv0 256))) (= (_ bv0 256) x30) x255 x89 (bvule x154 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x116 x53) (bvule (_ bv1 256) x219) (bvule x219 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x209 x123)) (= x29 x161) (bvule x116 (_ bv1461501637330902918203684832716283019655932542975 256)) x70 x117 (bvule x123 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x209 x53)) (bvule (_ bv0 256) x160) (= x218 x260) (= x249 x278) (= (bvult (_ bv0 256) (x8 x183)) x179) (not (= x209 x101)) (bvuge x279 (_ bv0 256)) (= x127 x113) (= x117 (bvugt (x8 x53) (_ bv0 256))) x229 (not (= x93 x53)) (not (= x205 x101)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x13) x260 (bvule x184 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x184) (= x23 x165) (not (= x205 x53)) (not (= x183 x53)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x121) (bvule x29 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x205 x247)) (not (= x101 x247)) (bvuge x13 (_ bv0 256)) (not (= x123 x93)) (= x292 (bvult (_ bv0 256) (x8 x29))) (bvule x161 (_ bv1461501637330902918203684832716283019655932542975 256)) x23 (= (x45 (_ bv4 256)) x72) (bvule x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x187 (bvugt (x8 x247) (_ bv0 256))) (= x219 x53) (bvule (_ bv1 256) x123) (bvuge x29 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x51) (not (= x93 x183)) (not (= x247 x183)) (bvule x183 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x205 x209)) (bvule (_ bv1 256) x116) (bvule (_ bv0 256) x159) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x159) x278 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x96) (not (= x183 x101)) (= x174 x224) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x298) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x251) x178 (bvuge x224 (_ bv1 256)) (not (= x123 x53)) (not (= x247 x93)) (bvuge x209 (_ bv1 256)) (bvuge x272 (_ bv0 256)) (not (= x205 x29)) (= (x45 (_ bv68 256)) x127) x232 (not (= x29 x101)) (= (x45 (_ bv36 256)) x224) (not (= x123 x205)) x120 (= x255 (bvult (_ bv0 256) (x8 x101))) (bvule (_ bv0 256) x296) (bvuge x205 (_ bv1 256)) (bvule x272 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x29 x183)) (= x120 (bvugt (x8 x123) (_ bv0 256))) (= x298 x247) (bvuge x298 (_ bv1 256)) (bvule x93 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x247 (_ bv1 256)) (not (= x247 x53)) (= x155 x89) (bvule (_ bv1 256) x53) (= x48 x68) (bvule (_ bv0 256) x154) (not (= x123 x29)) (bvule x247 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x229 (bvult (_ bv0 256) (x8 x93))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x205) (bvuge (_ bv4294967295 256) x296) (bvule (_ bv0 256) x181) (bvule (_ bv1 256) x93) (bvule (_ bv1 256) x101) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x72) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x209) (not (= x183 x209)) (= (x45 (_ bv100 256)) x51) (bvule (_ bv132 256) x52) x292 (not (= x183 x123)) x48 (bvule x52 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (not (= x29 x53)) (= (bvult (_ bv0 256) (x8 x205)) x70) (not (= x183 x205)) (bvuge x161 (_ bv1 256)) x179 (not (= x247 x209)) x189 (bvule (_ bv0 256) x121) (= x78 x72) (bvule x101 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x101 x53)) (not (= x93 x101))) (and (and (and (and (or (and (not x173) (and (x152 x127 x87) (= x50 (bvmul x127 x87)) (= x50 x84))) (and x173 (= x84 (_ bv0 256)))) (and (bvugt x270 x268) (or x238 x238) (= (bvadd (_ bv4 256) x225) x228) (= (x66 x16) x134) (bvuge (_ bv255 256) x212) (= x157 (x61 (_ bv32 256) (_ bv65 256))) (bvule (_ bv1 256) x270) (= x173 (= x127 (_ bv0 256))) (= (x124 x228) x212) (bvuge x115 (_ bv1 256)) (= x140 (x60 x234)) (= (ite (= x134 x212) x134 (_ bv0 256)) x268) (= x225 (x194 (_ bv64 256) x224 (_ bv54 256))) (= x299 x108) (= x115 (x94 (_ bv160 256))) (= x16 (x194 (_ bv64 256) x51 (_ bv67 256))) (= (not (= x87 (_ bv0 256))) x238) (bvule x134 (_ bv255 256)) (= x182 (bvmul x268 (_ bv3 256))) (= x234 (bvadd x182 x157)))) (and (bvule x108 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x286 x137 x223) x108) (bvuge x108 (_ bv0 256)) (= x137 x88) (= x87 (x153 (_ bv128 256))) (= (_ bv160 256) x226) (= x20 x139) (= x266 (x211 (_ bv164 256))) (= x166 x223) (= x166 x193) (= x88 x266) (bvuge x2 (_ bv1 256)) (= x2 (x8 x129)) (= x193 x250))) (and (bvule (_ bv0 256) x139) (= x107 x95) (= x112 x289) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x139) (= x131 (_ bv128 256)) (= x17 x201) (= (x8 x129) x49) (= x119 x35) (= x281 x113) (= x139 (x286 x22 x17)) (= (_ bv842934766 256) x36) (= (x248 (_ bv132 256)) x95) (= x6 x118) (= x254 x78) (= x201 x106) (= x9 (x8 x209)) (= x250 x106) (= x96 x216) (= x6 (x222 x216)) (bvule (_ bv1 256) x49) (bvule (_ bv1 256) x9) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x129) (= x289 (x28 x209)) (= x174 x231) (= x107 x22))) (= x250 x121))) x275) x214))
(assert (not (x110 (x194 (_ bv64 256) x93 (_ bv103 256)))))
(assert (=> (bvule x205 (_ bv10000 256)) (= (x195 x205) (_ bv0 256))))
(assert (bvult (_ bv10000 256) (x194 (_ bv64 256) x93 (_ bv103 256))))
(assert (not x214))
(assert (= (x217 (x194 (_ bv64 256) x224 (_ bv54 256))) x224))
(assert (= (and (not x297) x257) x142))
(assert (= x93 (x217 (x194 (_ bv64 256) x93 (_ bv103 256)))))
(assert (= (=> (and (= x99 (bvudiv x196 x115)) (= (_ bv288 256) x287) (= x19 (or (not (and (bvule (_ bv0 256) x132) (bvule x132 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (not (or (not (= (_ bv0 256) (x41 x132 x156))) (not (= (x258 x132 x156) (_ bv0 256))))) (not (= (_ bv0 256) (x240 x156))) (not (and (bvule (_ bv0 256) x156) (bvule x156 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))))) (= (bvudiv x188 x57) x196) (= (_ bv352 256) x199)) x19) x280))
(assert (= x133 (and x11 x3)))
(assert (x110 (_ bv842934766 256)))
(assert (= (x195 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (x195 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x195 (x194 (_ bv64 256) x93 (_ bv103 256))) (x194 (_ bv64 256) x93 (_ bv103 256))))
(assert (= (x282 (x194 (_ bv64 256) x93 (_ bv103 256))) (_ bv64 256)))
(assert (= (x194 (_ bv64 256) x224 (_ bv54 256)) (x195 (x194 (_ bv64 256) x224 (_ bv54 256)))))
(assert (= x11 (or x158 x288)))
(assert (x110 (_ bv114138022719912475680867045629478960338713192110453415424194996738542475935744 256)))
(assert (= x10 true))
(assert (= x51 (x217 (x194 (_ bv64 256) x51 (_ bv67 256)))))
(assert (= (x46 (x194 (_ bv64 256) x93 (_ bv103 256))) (_ bv103 256)))
(assert (= (_ bv0 256) (x195 (_ bv842934766 256))))
(assert (= x164 (=> (and (= x47 x149) (= (bvudiv x4 x191) x47) (= (_ bv192 256) x128)) x246)))
(assert (= (_ bv0 256) (x195 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (and (not x3) x11) x33))
(assert (not (x110 (x61 (_ bv32 256) (_ bv65 256)))))
(assert (x110 (_ bv10936679508223583803006762266923565500374401145016910147028117655998246682624 256)))
(assert (=> (bvuge (_ bv10000 256) x93) (= (x195 x93) (_ bv0 256))))
(assert (= (_ bv65 256) (x217 (x61 (_ bv32 256) (_ bv65 256)))))
(assert (= (x195 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x282 (x194 (_ bv64 256) x224 (_ bv54 256)))))
(assert (= (x194 (_ bv64 256) x51 (_ bv67 256)) (x195 (x194 (_ bv64 256) x51 (_ bv67 256)))))
(assert (x110 (_ bv4294967295 256)))
(assert (x110 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x61 (_ bv32 256) (_ bv65 256)) (x195 (x61 (_ bv32 256) (_ bv65 256)))))
(assert (= (x195 (_ bv10936679508223583803006762266923565500374401145016910147028117655998246682624 256)) (_ bv0 256)))
(assert (x110 (_ bv1889567281 256)))
(check-sat)
(exit)
