(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x24 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x16 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x58 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x3 ((_ BitVec 256)) Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x90 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x67 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x64 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x72 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x23 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x1 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x81 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x51 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x43 () Bool)
(define-fun x38 ((x4 (_ BitVec 256)) (x12 (_ BitVec 256))) Bool (= x4 (bvudiv (bvmul x12 x4) x12)))
(define-fun x6 ((x4 (_ BitVec 256)) (x12 (_ BitVec 256))) Bool (= x4 (bvsdiv (bvmul x4 x12) x12)))
(define-fun x77 ((x4 (_ BitVec 256)) (x12 (_ BitVec 256))) Bool (= x4 (bvsdiv (bvmul x12 x4) x12)))
(define-fun x46 ((x84 (_ BitVec 256))) (_ BitVec 256) (ite (= x84 x44) x39 (x1 x84)))
(assert (not (x3 (x81 (_ bv64 256) x82 (_ bv2 256)))))
(assert (not (x3 (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256)))))
(assert (x3 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not (x3 (x81 (_ bv64 256) x7 (_ bv2 256)))))
(assert (x3 (_ bv1889567281 256)))
(assert (= (x67 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (x24 (x81 (_ bv64 256) x82 (_ bv2 256))) x82))
(assert (= (_ bv0 256) (x67 (_ bv1889567281 256))))
(assert (x3 (_ bv4294967295 256)))
(assert (= x7 (x24 (x81 (_ bv64 256) x7 (_ bv2 256)))))
(assert (x3 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= (x90 (x81 (_ bv64 256) x82 (_ bv2 256))) (_ bv2 256)))
(assert (= (_ bv2 256) (x90 (x81 (_ bv64 256) x7 (_ bv2 256)))))
(assert (= x86 (=> (and (and (and (= (_ bv36 256) x15) (= x89 x14) (= x52 (bvudiv x40 (_ bv1000000000000000000 256))) (bvule (_ bv1 256) x78) (= x40 (bvmul x14 (_ bv1000000000000000000 256))) (= (bvudiv x40 x85) x27) (= x14 x52) (= x70 (_ bv1289409798 256)) (= x14 x17) (bvule (_ bv1 256) x85) (bvule x85 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x78 (x23 x87))) (and (and (= (x31 (_ bv4 256)) x57) (= (_ bv1889567281 256) x73) (bvule (_ bv1 256) x49) x51 (= (x58 x83) x41) (= x49 (x23 x19)) (= x57 x72) (= (bvule x27 x41) x51) (= x83 (x81 (_ bv64 256) x82 (_ bv2 256))) (= x82 x37) (= x87 x82)) (and (and (and (= (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256)) x61) (= (_ bv4 256) x76) (= (x1 x44) x39) (= (x16 x61) x28) (= (_ bv404098525 256) x35) (= (x23 x87) x34) (= x59 (x46 x87)) (= x65 x72) (= (x23 x87) x75) (= x18 x59) (= (_ bv1 256) x29) (= x60 (_ bv2069565783 256)) (= x39 x54) (bvuge x34 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x28) (bvuge x75 (_ bv1 256)) (= x44 x45) (= x28 x25) (= (_ bv36 256) x32)) (and (and (= (x58 x47) x2) (= x92 (x23 x19)) (= x91 (_ bv1889567281 256)) (bvule (_ bv1 256) x92) (= x7 x87) (= (x81 (_ bv64 256) x7 (_ bv2 256)) x47) (= x21 x7) (= (bvule x42 x2) x8)) (and (= x53 x56) (bvuge x20 (_ bv1 256)) (= x69 (bvmul x53 (_ bv1000000000000000000 256))) (= x53 x89) (= x88 (_ bv36 256)) (= x42 (bvudiv x69 x85)) (= x62 (bvudiv x69 (_ bv1000000000000000000 256))) (= x20 (x23 x87)) (= x62 x53) (= (_ bv1289409798 256) x93)))) (= x45 x25)))) (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x71) (bvule (_ bv0 256) x74) (= x80 (_ bv0 256)) (bvuge x45 (_ bv0 256)) (bvule x87 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x33 (bvugt (x23 x19) (_ bv0 256))) (bvule x50 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge x71 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x66) (= (bvugt (x23 x87) (_ bv0 256)) x43) (bvuge (_ bv4294967295 256) x30) (not (= x19 x87)) (bvule (_ bv0 256) x13) (= x55 (_ bv4 256)) x63 (not (= x87 x71)) (bvuge x66 (_ bv0 256)) (= x11 (_ bv404098525 256)) (bvule x13 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x19 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x19 (_ bv1 256)) (bvule (_ bv36 256) x50) (bvule (_ bv0 256) x5) (= x79 (x23 x87)) (= (bvult (_ bv0 256) (x23 x71)) x63) (bvuge x22 (_ bv0 256)) (bvule x22 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv1 256) x87) (bvule (_ bv0 256) x30) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x36) (= (_ bv36 256) x48) (bvule (_ bv0 256) x26) (bvuge x79 (_ bv1 256)) (bvule x89 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (bvule (_ bv0 256) x36) x33 (not (= x19 x71)) (bvule x10 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x45) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x9) (bvule x74 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x43 (bvule (_ bv0 256) x9) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x5) (bvule (_ bv0 256) x10) (bvule x26 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) x8)))
(assert (x3 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (x3 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv0 256) (x67 (_ bv1000000000000000000 256))))
(assert (= (x67 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (=> (bvule x71 (_ bv10000 256)) (= (_ bv0 256) (x67 x71))))
(assert (= (x67 (_ bv2069565783 256)) (_ bv0 256)))
(assert (= (x67 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x67 (_ bv404098525 256))))
(assert (x3 (_ bv1000000000000000000 256)))
(assert (=> (bvule x19 (_ bv10000 256)) (= (x67 x19) (_ bv0 256))))
(assert (bvugt (x81 (_ bv64 256) x82 (_ bv2 256)) (_ bv10000 256)))
(assert (x3 (_ bv2069565783 256)))
(assert (= (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256)) (x67 (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256)))))
(assert (= (x24 (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256))) (_ bv1 256)))
(assert (= x68 true))
(assert (= (x81 (_ bv64 256) x82 (_ bv2 256)) (x67 (x81 (_ bv64 256) x82 (_ bv2 256)))))
(assert (bvugt (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256)) (_ bv10000 256)))
(assert (= (_ bv0 256) (x67 (_ bv115792089237316195423570985008687907853269984665640564039457 256))))
(assert (= (_ bv64 256) (x64 (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256)))))
(assert (x3 (_ bv1289409798 256)))
(assert (=> (bvuge (_ bv10000 256) x82) (= (_ bv0 256) (x67 x82))))
(assert (= (_ bv0 256) (x67 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (x64 (x81 (_ bv64 256) x7 (_ bv2 256))) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x44) (= (x67 x44) (_ bv0 256))))
(assert (x3 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x3 (_ bv404098525 256)))
(assert (= (x90 (x81 (_ bv64 256) (_ bv1 256) (_ bv69 256))) (_ bv69 256)))
(assert (= (_ bv64 256) (x64 (x81 (_ bv64 256) x82 (_ bv2 256)))))
(assert (= (_ bv0 256) (x67 (_ bv1289409798 256))))
(assert (= (x81 (_ bv64 256) x7 (_ bv2 256)) (x67 (x81 (_ bv64 256) x7 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x81 (_ bv64 256) x7 (_ bv2 256))))
(assert (not x86))
(assert (=> (bvule x7 (_ bv10000 256)) (= (_ bv0 256) (x67 x7))))
(assert (= (_ bv0 256) (x67 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (=> (bvuge (_ bv10000 256) x87) (= (_ bv0 256) (x67 x87))))
(check-sat)
(exit)
