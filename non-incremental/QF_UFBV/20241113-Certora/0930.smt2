(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x15 () Bool)
(declare-fun x11 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x244 () Bool)
(declare-fun x292 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x282 () (_ BitVec 256))
(declare-fun x98 () Bool)
(declare-fun x46 () Bool)
(declare-fun x224 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x181 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x240 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x290 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x261 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x57 () Bool)
(declare-fun x194 () Bool)
(declare-fun x201 () Bool)
(declare-fun x162 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x259 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x254 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x68 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x159 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x148 () Bool)
(declare-fun x214 ((_ BitVec 256)) Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x72 () (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x274 () Bool)
(declare-fun x123 () Bool)
(declare-fun x106 () Bool)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x110 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x32 () Bool)
(declare-fun x257 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x152 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x167 () Bool)
(declare-fun x208 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x270 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x219 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x277 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x267 () Bool)
(declare-fun x271 () Bool)
(declare-fun x238 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x101 () Bool)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x14 () Bool)
(declare-fun x3 () Bool)
(declare-fun x189 () Bool)
(declare-fun x215 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x296 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x1 () Bool)
(declare-fun x95 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x77 () Bool)
(declare-fun x209 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x7 () Bool)
(declare-fun x198 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x48 () Bool)
(declare-fun x207 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x272 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x67 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x19 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x138 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x71 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x180 () Bool)
(declare-fun x88 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x139 () Bool)
(declare-fun x45 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x4 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x294 () Bool)
(declare-fun x248 () Bool)
(declare-fun x236 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x149 () Bool)
(declare-fun x263 () Bool)
(declare-fun x90 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x80 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x49 () Bool)
(define-fun x70 ((x5 (_ BitVec 256)) (x99 (_ BitVec 256))) Bool (= x5 (bvudiv (bvmul x99 x5) x99)))
(define-fun x125 ((x5 (_ BitVec 256)) (x99 (_ BitVec 256))) Bool (= x5 (bvsdiv (bvmul x5 x99) x99)))
(define-fun x93 ((x5 (_ BitVec 256)) (x99 (_ BitVec 256))) Bool (= x5 (bvsdiv (bvmul x99 x5) x99)))
(define-fun x79 ((x213 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x147 ((x213 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x286 ((x213 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x241 ((x213 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x253 ((x213 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x295 ((x213 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x44 ((x213 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x264 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 x171) x10 (x19 x213)))
(define-fun x102 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 x155) x176 (x264 x213)))
(define-fun x192 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 (_ bv128 256)) x195 (x253 x213)))
(define-fun x278 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite x170 (ite x101 (x253 x213) (x192 x213)) (x253 x213)))
(define-fun x74 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 (_ bv128 256)) x58 (x278 x213)))
(define-fun x17 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite x67 (x278 x213) (x74 x213)))
(define-fun x269 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x213) x105 (x17 x213)))
(define-fun x137 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x213) x13 (x269 x213)))
(define-fun x249 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite x231 (x17 x213) (x137 x213)))
(define-fun x108 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x213) x296 (x79 x213)))
(define-fun x131 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x213) x52 (x108 x213)))
(define-fun x97 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x213) x245 (x131 x213)))
(define-fun x163 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 (_ bv128 256)) (_ bv100 256) (x147 x213)))
(define-fun x177 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x213) x190 (x97 x213)))
(define-fun x246 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 (_ bv324 256)) x223 (x249 x213)))
(define-fun x280 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv356 256) x213) x33 (x246 x213)))
(define-fun x184 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 (_ bv388 256)) x116 (x280 x213)))
(define-fun x55 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 (_ bv324 256)) (_ bv32 256) (x295 x213)))
(define-fun x133 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x213) (_ bv1 256) (x4 x213)))
(define-fun x202 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x213 (_ bv356 256)) (bvult x213 (_ bv388 256))) (x133 (bvadd (bvneg (_ bv356 256)) x213)) (x44 x213)))
(define-fun x21 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 (_ bv420 256)) x117 (x184 x213)))
(define-fun x242 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite x187 (x184 x213) (ite x186 (x280 x213) (ite x103 (x246 x213) (ite x104 (x249 x213) (x21 x213))))))
(define-fun x233 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 x262) (_ bv0 256) (x242 x213)))
(define-fun x206 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x155 x213) x62 (x102 x213)))
(define-fun x127 ((x213 (_ BitVec 256))) (_ BitVec 256) (ite (= x183 x213) x210 (x181 x213)))
(assert (= x277 (or x119 (and (not x254) x109))))
(assert (= (_ bv0 256) (x152 (x219 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= (=> (and (or (not x254) (and (and (= x69 true) (= x261 (x272 x81)) (bvule (_ bv1 256) x261)) x254)) (and (= (x206 x81) x40) (bvule (_ bv1 256) x35) (= (x219 (_ bv64 256) x296 (_ bv2 256)) x212) (= x210 (bvadd x28 (bvneg x245))) (= x199 (x127 x285)) (= x24 x162) (not (bvugt x199 x42)) (= x124 (x219 (_ bv64 256) x155 x217)) (= (_ bv100 256) x30) (= (_ bv324 256) x50) (= x92 (_ bv1 256)) (not (bvugt x245 x35)) (= (_ bv599290589 256) x252) (= x42 (bvadd x245 x199)) (= x28 (x181 x212)) (= (x219 (_ bv64 256) x296 (_ bv2 256)) x183) (= x62 (x102 x155)) (not (bvult x28 x210)) (= x211 x84) (= x86 (x272 x81)) (= x31 x230) (= x35 (x215 x124)) (= x112 x84) (not (bvult x42 x199)) (= x40 x47) (= (bvadd x262 (bvneg (_ bv324 256))) x76) (= x197 x62) (not (bvugt x245 x28)) (bvuge x86 (_ bv1 256)) (= x254 (= (_ bv0 256) x200)) (= (x219 (_ bv64 256) x52 (_ bv2 256)) x285) (= x245 x24) (bvuge x28 (_ bv1 256)) (= (_ bv100 256) x76) (= x29 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (= x157 (_ bv324 256)) (= x217 (x219 (_ bv64 256) x296 (_ bv3 256))) (not (bvult x35 x283)) (= x262 (bvadd (_ bv324 256) x85)) (= (x55 (_ bv324 256)) x200) (= (bvadd (bvneg x245) x35) x283) (= x230 x296))) x201) x98))
(assert (= (_ bv0 256) (x240 (_ bv1889567281 256))))
(assert (not (x214 (x219 (_ bv64 256) x155 (_ bv60 256)))))
(assert (= (and x75 (not x142)) x68))
(assert (= (=> (and (and (not (bvult (bvadd x204 x13) x204)) (= (x198 x111) x204) (= x111 (x219 (_ bv64 256) x105 (_ bv61 256))) (= (= (_ bv0 256) x13) x49) (= x279 (bvadd x204 x13))) (or (not x49) x49)) x276) x164))
(assert (not (x214 (x219 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= x243 (=> (and (and (and (= (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256)) x36) (bvule (_ bv1 256) x82) (= x158 (_ bv0 256)) (= x205 x105) (= (_ bv1889567281 256) x238) (bvuge x166 (_ bv1 256)) (bvule x105 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv0 256) x43) (= (x290 (_ bv36 256)) x52) (= x232 (_ bv0 256)) (= (x207 x36) x158) (= x82 (x290 (_ bv68 256))) (= (x272 x155) x166) (= x52 x288) (= x82 x270) (bvule x52 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x290 (_ bv4 256)) x105)) (and (= x228 x8) (and (= x239 x114) (and (= x8 x171) (= (bvadd (_ bv2 256) x281) x89) (= (x219 (_ bv64 256) x105 x89) x60) (= x173 (x219 (_ bv64 256) x105 (_ bv0 256))) (= x175 (bvadd (bvneg x255) x114)) (bvuge (_ bv340282366920938463463374607431768211455 256) x255) (= x2 (_ bv2 256)) (= x129 x270) (= x228 x9) (= x25 (_ bv553353397 256)) (= x94 x176) (= x289 (bvult (_ bv0 256) x175)) (= x297 (x207 x173)) (= (x219 (_ bv64 256) x155 (_ bv60 256)) x281) (= x53 (x80 x60)) (= (x159 x281) x255) (= (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256)) x121) (= x78 x10) (= x9 (x71 x121)) (= (bvadd (_ bv1 256) x281) x182) (bvule (_ bv1 256) x91) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x9) (bvuge (_ bv20282409603651670423947251286015 256) x297) (= (_ bv0 256) x154) (= (x19 x171) x10) (= (x95 x182) x16) (= x211 x288) (= x12 x205) (= x94 (x264 x155)) (= x91 (x272 x155)))))) (and (bvule x20 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv36 256) x136) (bvuge x239 (_ bv0 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x151) (= x247 (_ bv0 256)) x226 (bvule x81 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x20 (_ bv0 256)) (= (bvult (_ bv0 256) (x272 x155)) x189) x189 (bvule x257 (_ bv4294967295 256)) (bvuge x8 (_ bv0 256)) (bvule x266 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x26 (_ bv0 256)) (bvuge x266 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x26) (bvuge x151 (_ bv100 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x8) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x237) (bvule (_ bv0 256) x237) (bvule x273 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x226 (bvugt (x272 x81) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x96) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x239) (bvule x54 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv1 256) x81) (bvule (_ bv0 256) x96) (not (= x81 x155)) (bvule (_ bv0 256) x54) (bvule (_ bv1 256) x155) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x100) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x155) (bvule (_ bv0 256) x100) (bvuge x257 (_ bv0 256)) (bvule (_ bv0 256) x273))) (and (=> (and (not x289) (= x58 x16)) x41) (=> (and x289 (and (or (and x142 (= x57 x142)) (and (not x142) (= x57 (= x114 x255)))) (and (= x142 (ite (= (_ bv0 256) x196) (= (_ bv0 256) x196) (= (_ bv0 256) x27))) (= (x138 x281) x196) (bvuge (_ bv340282366920938463463374607431768211455 256) x196)))) x292)))))
(assert (= (x259 (x219 (_ bv64 256) x105 x89)) x105))
(assert (=> (bvule x171 (_ bv10000 256)) (= (_ bv0 256) (x240 x171))))
(assert (= (_ bv0 256) (x240 (_ bv340282366920938463463374607431768211455 256))))
(assert (= x104 (and x48 (not x167))))
(assert (= (x240 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (_ bv0 256)))
(assert (= (_ bv69 256) (x152 (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (x214 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x155 (x259 (x219 (_ bv64 256) x155 (_ bv60 256)))))
(assert (= (x219 (_ bv64 256) x155 x217) (x240 (x219 (_ bv64 256) x155 x217))))
(assert (= (x240 (x219 (_ bv64 256) x52 (_ bv2 256))) (x219 (_ bv64 256) x52 (_ bv2 256))))
(assert (bvult (_ bv10000 256) (x219 (_ bv64 256) x52 (_ bv2 256))))
(assert (= (_ bv0 256) (x240 (_ bv1000000000000000000 256))))
(assert (= (and x254 x109) x119))
(assert (x214 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= x34 (and x216 (not x7))))
(assert (= x191 (=> (and (= x188 x146) (not (bvugt x56 x135)) (= x195 x256) (bvule x188 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv0 256) x188) (not (bvult (bvadd x16 x118) x118)) (= x128 (bvudiv x229 x146)) (x70 x196 x56) (bvule (_ bv1 256) x27) (= x15 (= (_ bv1000000000000000000 256) x128)) (= x56 (bvadd x135 (bvneg x255))) (= x188 (bvmul x196 x56)) (= (bvadd x16 x118) x256) (= (bvmul (_ bv1000000000000000000 256) x146) x229) (= x156 (= (_ bv0 256) x146)) (= x118 (bvudiv x229 x27)) (or x15 x156)) x160)))
(assert (= (x152 (x219 (_ bv64 256) x296 (_ bv3 256))) (_ bv3 256)))
(assert (= (and (not x289) x106) x235))
(assert (not (x214 (x219 (_ bv64 256) x105 (_ bv61 256)))))
(assert (bvugt (x219 (_ bv64 256) x155 (_ bv60 256)) (_ bv10000 256)))
(assert (= x130 (and x148 (not x22))))
(assert (= x126 (or x274 x67)))
(assert (= (x219 (_ bv64 256) x105 x89) (x240 (x219 (_ bv64 256) x105 x89))))
(assert (x214 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) x105 x89))))
(assert (= x52 (x259 (x219 (_ bv64 256) x52 (_ bv2 256)))))
(assert (x214 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x219 (_ bv64 256) x155 (_ bv60 256)) (x240 (x219 (_ bv64 256) x155 (_ bv60 256)))))
(assert (= (=> (and (or (and (and (= x61 (x55 (_ bv324 256))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x61) (bvule (_ bv32 256) x61) (= (_ bv1 256) x23) (= x23 (x202 (_ bv356 256)))) x59) (not x59)) (and (= x193 (x55 (_ bv324 256))) (= (bvugt x193 (_ bv0 256)) x59) (= (_ bv324 256) x73) (= x287 (_ bv324 256)) (= x144 (_ bv324 256)))) x260) x201))
(assert (= (x259 (x219 (_ bv64 256) x155 x217)) x155))
(assert (= (x152 (x219 (_ bv64 256) x105 x89)) x89))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) x296 (_ bv3 256)))))
(assert (= x106 true))
(assert (= (x208 (x219 (_ bv64 256) x105 (_ bv61 256))) (_ bv64 256)))
(assert (= (x152 (x219 (_ bv64 256) x52 (_ bv2 256))) (_ bv2 256)))
(assert (= x170 (or x45 x101)))
(assert (= x77 (or x203 x244)))
(assert (x214 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (or x149 x51) x274))
(assert (= x180 (and x167 x48)))
(assert (= (_ bv0 256) (x240 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (_ bv0 256) (x240 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (= (and x267 x268) x165))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) x155 x217))))
(assert (bvugt (x219 (_ bv64 256) x105 (_ bv61 256)) (_ bv10000 256)))
(assert (= (x240 (_ bv553353397 256)) (_ bv0 256)))
(assert (= x179 (and x142 x75)))
(assert (bvult (_ bv10000 256) (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256))))
(assert (x214 (_ bv599290589 256)))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (=> (bvule x155 (_ bv10000 256)) (= (x240 x155) (_ bv0 256))))
(assert (= (x219 (_ bv64 256) x105 (_ bv0 256)) (x240 (x219 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= (x240 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x214 (_ bv1889567281 256)))
(assert (= (and x46 x77) x101))
(assert (=> (bvuge (_ bv10000 256) x105) (= (x240 x105) (_ bv0 256))))
(assert (= x105 (x259 (x219 (_ bv64 256) x105 (_ bv61 256)))))
(assert (= (and x110 x180) x90))
(assert (x214 (_ bv20282409603651670423947251286015 256)))
(assert (= x160 (=> (and (= x46 (= x16 x195)) (or (not x46) x46)) x37)))
(assert (=> (bvule x52 (_ bv10000 256)) (= (x240 x52) (_ bv0 256))))
(assert (= (and x22 x148) x271))
(assert (x214 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (=> (bvuge (_ bv10000 256) x296) (= (x240 x296) (_ bv0 256))))
(assert (= x105 (x259 (x219 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= (x240 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (x214 (_ bv553353397 256)))
(assert (= (and x90 x38) x268))
(assert (= (=> (and (and (bvuge x250 (_ bv1 256)) (= x134 (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256))) (= x265 (x207 x134)) (= x6 (_ bv0 256)) (= x250 (x272 x155)) (= x83 (_ bv1889567281 256)) (= x88 (= x265 (_ bv0 256))) (bvule x265 (_ bv20282409603651670423947251286015 256))) (= (_ bv36 256) x65)) x88) x260))
(assert (= (or x130 x271) x203))
(assert (= (x208 (x219 (_ bv64 256) x296 (_ bv2 256))) (_ bv64 256)))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (and (not x110) x180) x103))
(assert (= (_ bv0 256) (x152 (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (=> (= x161 x13) x164) x251))
(assert (= x109 (or x187 x165 x104 x186 x103)))
(assert (bvugt (x219 (_ bv64 256) x296 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x240 (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256))))
(assert (not x243))
(assert (not (x214 (x219 (_ bv64 256) x296 (_ bv3 256)))))
(assert (=> (bvule x81 (_ bv10000 256)) (= (x240 x81) (_ bv0 256))))
(assert (= x216 (or x170 x235)))
(assert (= x169 (and x59 x277)))
(assert (= (or x218 x231) x48))
(assert (not (x214 (x219 (_ bv64 256) x155 x217))))
(assert (not (x214 (x219 (_ bv64 256) x52 (_ bv2 256)))))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) x155 (_ bv60 256)))))
(assert (not (x214 (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (x152 (x219 (_ bv64 256) x155 (_ bv60 256))) (_ bv60 256)))
(assert (= (and x90 (not x38)) x186))
(assert (= x115 (or (and x277 (not x59)) x169)))
(assert (= (x240 (bvadd (_ bv2 256) x281)) (x240 x281)))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) x52 (_ bv2 256)))))
(assert (= (x219 (_ bv64 256) x296 (_ bv2 256)) (x240 (x219 (_ bv64 256) x296 (_ bv2 256)))))
(assert (= x41 (=> (= x7 (= x58 x53)) (and (=> (and (not x7) (and (= x3 (= (_ bv0 256) x297)) (or (and (not x3) (and (x70 x297 x107) (= (bvadd x58 (bvneg x53)) x107) (bvule (_ bv0 256) x282) (= x168 (bvudiv x282 (_ bv1000000000000000000 256))) (= x168 x161) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x282) (= x282 (bvmul x297 x107)) (not (bvult x58 x107)))) (and (= x161 (_ bv0 256)) x3)))) x251) (=> (and x7 (= x13 (_ bv0 256))) x164)))))
(assert (= (=> (and (= (x163 (_ bv128 256)) x85) (= x245 (ite (bvugt x82 x279) x279 x82)) (= (_ bv128 256) x132) (not (bvugt x174 x279)) (= x167 (bvult (_ bv0 256) x85)) (bvuge x245 (_ bv1 256)) (= x296 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x150)) (= (bvand x291 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) x225) (= (bvadd (bvneg x245) x279) x174) (= (x97 (_ bv160 256)) x291) (= (_ bv260 256) x221) (= x122 (_ bv0 256)) (= (bvadd x225 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) x190)) (and (=> (and (and (= x223 (x177 (_ bv160 256))) (= x110 (bvugt x85 (_ bv32 256)))) x167) (and (=> (not x110) x98) (=> (and (and (= x38 (bvult (_ bv64 256) x85)) (= x33 (x177 (_ bv192 256)))) x110) (and (=> (not x38) x98) (=> (and x38 (and (= (x177 (_ bv224 256)) x116) (= (bvult (_ bv96 256) x85) x267))) (and (=> x267 x263) (=> (not x267) x98))))))) (=> (not x167) x98))) x276))
(assert (= (and x216 x7) x67))
(assert (= (and x126 (not x49)) x218))
(assert (not (x214 (x219 (_ bv64 256) x296 (_ bv2 256)))))
(assert (= (_ bv0 256) (x240 (_ bv4294967295 256))))
(assert (not (x214 (x219 (_ bv64 256) x105 x89))))
(assert (= (_ bv0 256) (x240 (_ bv20282409603651670423947251286015 256))))
(assert (= (x259 (x219 (_ bv64 256) x296 (_ bv2 256))) x296))
(assert (bvult (_ bv10000 256) (x219 (_ bv64 256) x296 (_ bv3 256))))
(assert (= (x240 (x219 (_ bv64 256) x105 (_ bv61 256))) (x219 (_ bv64 256) x105 (_ bv61 256))))
(assert (= (and x126 x49) x231))
(assert (= (and x34 (not x3)) x149))
(assert (= (and (not x46) x77) x45))
(assert (= (_ bv0 256) (x240 (_ bv599290589 256))))
(assert (= x187 (and (not x267) x268)))
(assert (= x148 (and x248 (not x153))))
(assert (x214 (_ bv1000000000000000000 256)))
(assert (= (_ bv2 256) (x259 (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (= x292 (=> (= x153 (ite x57 x57 (not (bvult x255 x143)))) (and (=> (and (and (= x22 (bvugt x114 x143)) (or (and (= x135 x143) x22) (and (not x22) (= x114 x135)))) (not x153)) x191) (=> (and (= x195 x16) x153) x160)))))
(assert (x214 (_ bv4294967295 256)))
(assert (= (or x68 x179) x248))
(assert (= (and x248 x153) x244))
(assert (= (=> (and (= (bvand x114 (_ bv340282366920938463463374607431768211455 256)) x72) (= x195 x58)) x41) x37))
(assert (bvugt (x219 (_ bv64 256) x105 x89) (_ bv10000 256)))
(assert (= (_ bv64 256) (x208 (x219 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256)) (x240 (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (bvult (_ bv10000 256) (x219 (_ bv64 256) x105 (_ bv0 256))))
(assert (= (x240 x281) (x240 (bvadd x281 (_ bv1 256)))))
(assert (= (x152 (x219 (_ bv64 256) x155 x217)) x217))
(assert (not (x214 (x219 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (= (and x3 x34) x51))
(assert (= (_ bv2 256) (x152 (x219 (_ bv64 256) x296 (_ bv2 256)))))
(assert (= (_ bv0 256) (x259 (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= x263 (=> (and (= x117 (x177 (_ bv256 256))) (= (not (bvult (_ bv128 256) x85)) x236)) (and x236 x98))))
(assert (bvult (_ bv10000 256) (x219 (_ bv64 256) (_ bv0 256) (_ bv0 256))))
(assert (= (_ bv61 256) (x152 (x219 (_ bv64 256) x105 (_ bv61 256)))))
(assert (= (and x106 x289) x75))
(assert (bvugt (x219 (_ bv64 256) x155 x217) (_ bv10000 256)))
(assert (= (x219 (_ bv64 256) x296 (_ bv3 256)) (x240 (x219 (_ bv64 256) x296 (_ bv3 256)))))
(assert (= (x259 (x219 (_ bv64 256) x296 (_ bv3 256))) x296))
(check-sat)
(exit)
