(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x298 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x349 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x347 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x183 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x237 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x317 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x356 () Bool)
(declare-fun x326 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x353 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x366 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x303 () Bool)
(declare-fun x367 () (_ BitVec 256))
(declare-fun x181 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x185 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x350 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x363 () (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x357 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x211 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x30 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x187 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x345 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x304 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x78 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x79 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x320 () Bool)
(declare-fun x240 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x323 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x219 () Bool)
(declare-fun x302 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x300 () Bool)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x334 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x346 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x27 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x364 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x35 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x97 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x341 () (_ BitVec 256))
(declare-fun x112 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x308 () Bool)
(declare-fun x42 () Bool)
(declare-fun x338 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x186 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x332 ((_ BitVec 256)) Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x339 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x342 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x368 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x360 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x333 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x358 () Bool)
(declare-fun x273 () Bool)
(declare-fun x108 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x86 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x328 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x322 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x174 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x321 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x297 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x312 () (_ BitVec 256))
(declare-fun x233 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x370 () Bool)
(declare-fun x130 () Bool)
(declare-fun x257 () Bool)
(declare-fun x352 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x289 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x246 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x191 () Bool)
(declare-fun x245 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x144 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x296 () Bool)
(declare-fun x318 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x21 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x313 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x309 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x344 () Bool)
(declare-fun x47 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x226 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x152 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x324 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x362 () Bool)
(declare-fun x281 () Bool)
(declare-fun x340 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x113 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x192 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x359 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x267 () Bool)
(declare-fun x135 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x294 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x335 () Bool)
(declare-fun x1 () Bool)
(declare-fun x146 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x228 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x176 () Bool)
(define-fun x119 ((x36 (_ BitVec 256)) (x172 (_ BitVec 256))) Bool (= x36 (bvudiv (bvmul x172 x36) x172)))
(define-fun x274 ((x36 (_ BitVec 256)) (x172 (_ BitVec 256))) Bool (= x36 (bvsdiv (bvmul x36 x172) x172)))
(define-fun x354 ((x36 (_ BitVec 256)) (x172 (_ BitVec 256))) Bool (= x36 (bvsdiv (bvmul x172 x36) x172)))
(define-fun x319 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x134 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x216 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x348 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x49 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x263 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x121 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x251 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x336 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x276 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x270 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x369 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x34 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x25 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x154 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x45 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x63 ((x361 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x177 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x3) x254 (x240 x361)))
(define-fun x2 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x70) x238 (x177 x361)))
(define-fun x330 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv512 256)) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x319 x361)))
(define-fun x329 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv516 256)) x70 (x330 x361)))
(define-fun x65 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv0 256)) x314 (x27 x361)))
(define-fun x58 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv512 256) x361) x314 (x329 x361)))
(define-fun x136 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv512 256)) (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256) (x58 x361)))
(define-fun x147 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv516 256) x361) x306 (x136 x361)))
(define-fun x117 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv548 256)) x151 (x147 x361)))
(define-fun x120 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv580 256)) x262 (x117 x361)))
(define-fun x231 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x361 (_ bv544 256)) (bvuge x361 (_ bv512 256))) (x313 (bvadd x361 (bvneg (_ bv512 256)))) (x120 x361)))
(define-fun x142 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite x257 (x231 x361) (x120 x361)))
(define-fun x118 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv768 256) x361) x367 (x142 x361)))
(define-fun x234 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv800 256)) x31 (x118 x361)))
(define-fun x197 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv832 256) x361) x249 (x234 x361)))
(define-fun x217 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv864 256)) x306 (x197 x361)))
(define-fun x331 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv896 256)) x115 (x217 x361)))
(define-fun x123 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv928 256) x361) x157 (x331 x361)))
(define-fun x66 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite x303 (x319 x361) (x123 x361)))
(define-fun x110 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x145) (_ bv10049708693891714625633490409375016547535144715664560469602540866729785950208 256) (x66 x361)))
(define-fun x213 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x107 x361) x70 (x110 x361)))
(define-fun x214 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x189) x248 (x213 x361)))
(define-fun x164 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x346) x248 (x214 x361)))
(define-fun x71 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x175) x143 (x164 x361)))
(define-fun x131 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x361 x145) (bvult x361 x145)) (x321 (bvadd x361 (bvneg x145))) (x71 x361)))
(define-fun x327 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x113 x361) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x131 x361)))
(define-fun x202 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x23 x361) x70 (x327 x361)))
(define-fun x12 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 (_ bv0 256)) x178 (x246 x361)))
(define-fun x310 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x39 x361) x248 (x134 x361)))
(define-fun x278 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x93) x70 (x310 x361)))
(define-fun x61 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x351 x361) x225 (x278 x361)))
(define-fun x158 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x361 x113) x292 (x216 x361)))
(define-fun x82 ((x361 (_ BitVec 256))) (_ BitVec 256) (ite (= x156 x361) x312 (x61 x361)))
(define-fun x295 ((x28 (_ BitVec 256))) Bool (or (= (x86 (x174 x28)) (bvadd (_ bv1 256) x28)) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x28) (bvuge x28 (_ bv0 256)))) (not (and (bvult x28 x209) (bvuge x28 (_ bv0 256))))))
(define-fun x139 ((x103 (_ BitVec 256))) Bool (or (= (_ bv0 256) (x86 x103)) (and (bvule (x86 x103) x209) (and (= x103 (x174 (bvadd (x86 x103) (bvneg (_ bv1 256))))) (bvule (_ bv1 256) (x86 x103)))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x103) (bvule (_ bv0 256) x103)))))
(define-fun x316 ((x212 (_ BitVec 256)) (x89 (_ BitVec 256))) Bool (or (or (not (and (bvule (_ bv0 256) x89) (bvule x89 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (x228 x212 (x186 x212 x89)) (bvadd x89 (_ bv1 256))) (not (and (bvugt (x79 x212) x89) (bvuge x89 (_ bv0 256))))) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x212) (bvuge x212 (_ bv0 256))))))
(define-fun x94 ((x133 (_ BitVec 256)) (x116 (_ BitVec 256))) Bool (or (not (and (bvuge x133 (_ bv0 256)) (bvule x133 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (= (x228 x133 x116) (_ bv0 256)) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x116) (bvuge x116 (_ bv0 256)))) (and (and (bvuge (x228 x133 x116) (_ bv1 256)) (= x116 (x186 x133 (bvadd (x228 x133 x116) (bvneg (_ bv1 256)))))) (bvule (x228 x133 x116) (x79 x133))))))
(define-fun x343 ((x20 (_ BitVec 256)) (x162 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x20) (bvule x20 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (= (bvadd x162 (_ bv1 256)) (x360 x20 (x226 x20 x162))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x162) (bvule (_ bv0 256) x162))) (not (and (bvugt (x47 x20) x162) (bvule (_ bv0 256) x162))))))
(define-fun x48 ((x101 (_ BitVec 256)) (x51 (_ BitVec 256))) Bool (or (or (= (x360 x101 x51) (_ bv0 256)) (and (bvule (x360 x101 x51) (x47 x101)) (and (= (x226 x101 (bvadd (x360 x101 x51) (bvneg (_ bv1 256)))) x51) (bvule (_ bv1 256) (x360 x101 x51)))) (not (and (bvule (_ bv0 256) x51) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x51)))) (not (and (bvuge x101 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x101)))))
(define-fun x230 ((x236 (_ BitVec 256)) (x206 (_ BitVec 256))) Bool (or (or (not (= (_ bv0 256) (x86 x206))) (not (or (not (= (_ bv0 256) (x228 x236 x206))) (not (= (_ bv0 256) (x360 x236 x206))))) (not (and (bvuge x206 (_ bv0 256)) (bvule x206 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))) (not (and (bvule (_ bv0 256) x236) (bvule x236 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x193 ((x340 (_ BitVec 256))) Bool (or (bvugt (_ bv340282366920938463463374607431768211455 256) (x79 x340)) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x340) (bvule (_ bv0 256) x340)))))
(define-fun x88 ((x80 (_ BitVec 256))) Bool (or (bvugt (_ bv340282366920938463463374607431768211455 256) (x47 x80)) (not (and (bvule (_ bv0 256) x80) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x80)))))
(define-fun x325 () Bool true)
(define-fun x284 () Bool x325)
(define-fun x52 () Bool true)
(define-fun x279 () Bool x52)
(define-fun x98 () Bool true)
(define-fun x46 () Bool x98)
(define-fun x76 () Bool true)
(define-fun x355 () Bool x76)
(define-fun x11 () Bool true)
(define-fun x106 () Bool x11)
(define-fun x210 () Bool true)
(define-fun x224 () Bool x210)
(define-fun x261 () Bool true)
(define-fun x73 () Bool true)
(define-fun x138 () Bool (and x261 x73))
(define-fun x229 () Bool true)
(define-fun x17 () Bool x229)
(define-fun x201 () Bool true)
(define-fun x74 () Bool x201)
(assert (= x78 (=> (and (or (and (= x91 (_ bv0 256)) x54) (and (not x54) (and (= (bvmul x8 x199) x190) (= x91 x190) (x119 x8 x199)))) (and (= x289 (_ bv512 256)) (= (bvadd (bvneg x33) x367) x199) (bvule (_ bv1 256) x124) (not (bvugt x33 x367)) (= (= (_ bv0 256) x8) x54) (bvule x8 (_ bv1000000000000000 256)) (= (x142 (_ bv512 256)) x8))) x67)))
(assert (=> (bvule x141 (_ bv10000 256)) (= (x112 x141) (_ bv0 256))))
(assert (= (_ bv0 256) (x112 (_ bv1000000000000000000 256))))
(assert (= x220 (or x235 x245)))
(assert (x332 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x194 (and x333 (not x159))))
(assert (= x318 (and x296 x102)))
(assert (bvugt (x97 (_ bv64 256) x248 (_ bv169 256)) (_ bv10000 256)))
(assert (= (x112 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= x282 (or x290 x194)))
(assert (=> (bvule x70 (_ bv10000 256)) (= (x112 x70) (_ bv0 256))))
(assert (=> (bvule x40 (_ bv10000 256)) (= (x112 x40) (_ bv0 256))))
(assert (= (x112 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)) (_ bv0 256)))
(assert (= (x112 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)) (_ bv0 256)))
(assert (= (x97 (_ bv64 256) x70 (_ bv103 256)) (x112 (x97 (_ bv64 256) x70 (_ bv103 256)))))
(assert (= (x112 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x332 (_ bv4294967295 256)))
(assert x17)
(assert (= (x112 (_ bv1889567281 256)) (_ bv0 256)))
(assert (bvult x18 (_ bv340282366920938463463374607431768211455 256)))
(assert (=> (bvule x3 (_ bv10000 256)) (= (_ bv0 256) (x112 x3))))
(assert (= x243 (and (not x344) x221)))
(assert (= (or x92 x176) x237))
(assert (= (_ bv0 256) (x112 (_ bv4294967295 256))))
(assert (not (x332 (x97 (_ bv64 256) x70 (_ bv103 256)))))
(assert (x332 (_ bv1000000000000000000 256)))
(assert (x332 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)))
(assert (= x293 (and x237 (not x168))))
(assert (= x59 (=> (and (and (= x296 (= (_ bv0 256) x260)) (not (bvugt x31 (bvadd x151 x31))) (= x366 (_ bv1000000000000000000 256)) (= (_ bv576 256) x255) (= x31 (bvudiv x171 (_ bv1000000000000000000 256))) (= (bvadd x151 x31) x115)) (or (and x296 (= (_ bv0 256) x352)) (and (not x296) (and (= (bvmul x31 x260) x161) (= x161 x352) (x119 x260 x31))))) x219)))
(assert (= (and x335 (not x54)) x176))
(assert (x332 (_ bv10049708693891714625633490409375016547535144715664560469602540866729785950208 256)))
(assert (= x335 (or x288 x257)))
(assert (= (x112 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= x362 (and (not x296) x102)))
(assert (= (_ bv0 256) (x112 (_ bv1000000000000000 256))))
(assert (= (_ bv0 256) (x112 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (x332 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x328 (or x318 x362)))
(assert (= x219 (=> (and (or (and (and (= x69 x10) (= x10 (bvmul x334 x91)) (x119 x91 x334)) (not x169)) (and x169 (= x69 (_ bv0 256)))) (and (= x169 (= x91 (_ bv0 256))) (= (bvudiv x352 (_ bv1000000000000000000 256)) x309) (not (bvugt x309 (bvadd x309 x262))) (= (_ bv640 256) x22) (= (bvadd x309 x262) x157) (= x85 (_ bv1000000000000000000 256)))) x72)))
(assert (= (x359 (x97 (_ bv64 256) x248 (_ bv169 256))) x248))
(assert (=> (bvuge (_ bv10000 256) x41) (= (x112 x41) (_ bv0 256))))
(assert (=> (bvule x299 (_ bv10000 256)) (= (_ bv0 256) (x112 x299))))
(assert (= (=> (and (= (bvadd x341 x55) x250) (= (bvadd x268 (bvneg (_ bv1 256))) x341) (= (bvadd x167 (_ bv64 256)) x275) (= x114 x75) (= (bvadd x145 (_ bv64 256)) x167) (= (_ bv1 256) x173) (= (bvudiv x250 x268) x75) (not (bvugt x55 (bvadd x55 x341))) (= x275 x113)) x308) x127))
(assert (=> (bvuge (_ bv10000 256) x252) (= (_ bv0 256) (x112 x252))))
(assert (=> (bvule x248 (_ bv10000 256)) (= (x112 x248) (_ bv0 256))))
(assert (= (_ bv0 256) (x112 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (x332 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (=> (and (or (and (and (= x294 (= (_ bv0 256) x166)) (= (x185 x87) x166) (= (bvadd x244 (_ bv1 256)) x87)) (not x159)) (and x159 (= x159 x294))) (and x337 (= (x146 x198) x32) (= x132 x367) (= x189 (bvadd (_ bv32 256) x107)) (bvule x198 (_ bv1461501637330902918203684832716283019655932542975 256)) x368 (= x175 (bvadd x346 (_ bv32 256))) (= x346 (bvadd x189 (_ bv32 256))) (= x244 (x97 (_ bv64 256) x248 (_ bv169 256))) (bvuge x32 (_ bv1 256)) (bvule (_ bv1 256) x128) (= x222 (x144 x244)) (= x107 (bvadd (_ bv4 256) x145)) (= (= x222 (_ bv0 256)) x159) (= (bvule x311 (x304 x70)) x337) (bvule x323 (_ bv4294967295 256)) (= (x2 x198) x256) (= (x2 x70) x311) (= x368 (= (x304 x198) x256)))) x324) x7))
(assert (= x182 (and x320 (not x42))))
(assert (= x200 (and x169 x328)))
(assert (= (or x326 x293) x102))
(assert (=> (bvuge (_ bv10000 256) x83) (= (x112 x83) (_ bv0 256))))
(assert (= (=> (and (= (_ bv768 256) x145) (= x272 x291) (= x249 (bvadd x334 x84)) (= x132 x90) (not (bvult (bvadd x334 x84) x84)) (= x84 (bvudiv x69 (_ bv1000000000000000000 256))) (= x291 (bvadd x334 x84)) (= (_ bv704 256) x26)) x7) x72))
(assert (= x290 (and x333 x159)))
(assert (bvult x209 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x308 (=> (and (= (bvadd (_ bv32 256) x93) x351) (bvule x141 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvadd (_ bv32 256) x113) x156) (= (x146 x141) x184) (= (bvadd x113 (_ bv36 256)) x39) (= x264 x70) (= (x61 x156) x349) (= x285 (_ bv1889567281 256)) (= x305 (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x349)) (= (bvadd x227 (bvneg x113)) x286) (bvuge x184 (_ bv1 256)) (= (bvult (bvadd (bvneg (_ bv128 256)) x342) (_ bv32 256)) x60) (bvuge x9 (_ bv1 256)) (= x286 (_ bv36 256)) (= (x158 x113) x342) (= x264 x125) (= x93 (bvadd x39 (_ bv32 256))) (= x292 (bvadd (bvneg (_ bv32 256)) x100)) (= x70 x141) (bvule (_ bv1 256) x179) (= x187 true) (bvule (_ bv128 256) x342) (= x271 (_ bv0 256)) (= (x146 x141) x9) (= (bvadd x113 (_ bv4 256)) x23) (bvule (_ bv1 256) x141) (= x178 (x108 x37)) (= x227 (bvadd (_ bv32 256) x23)) (= (x97 (_ bv64 256) x70 (_ bv103 256)) x37) (= (bvadd x305 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) x312) (= (_ bv36 256) x122) (= (bvadd (bvneg x113) x155) x100) (= x225 (ite (bvult x114 x143) x114 x143)) (= (bvadd x351 (_ bv32 256)) x155) (= x179 (x146 x70)) (= (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) x205)) x60)))
(assert (= x320 (and x282 (not x294))))
(assert x74)
(assert (= x92 (and x335 x54)))
(assert (x332 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (or x140 x303) x333))
(assert (= (_ bv0 256) (x112 (_ bv10049708693891714625633490409375016547535144715664560469602540866729785950208 256))))
(assert (x332 (_ bv1889567281 256)))
(assert (x332 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (x332 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)))
(assert (= (and x168 x237) x326))
(assert (= (_ bv0 256) (x112 (_ bv242558722 256))))
(assert (= (and (=> (and (not x294) (and (and (= (= (_ bv0 256) x364) x42) (= (x185 x56) x268) (= x56 (bvadd x244 (_ bv1 256))) (= x364 (x144 x244)) (bvule (_ bv1 256) x268)) (or (and (not x42) (and (x119 x364 x272) (= x307 (bvmul x364 x272)) (= x307 x55))) (and (= x55 (_ bv0 256)) x42)))) x127) (=> (and (and (= (_ bv0 256) x114) (= x113 x145)) x294) x308)) x324))
(assert (= (_ bv64 256) (x35 (x97 (_ bv64 256) x248 (_ bv169 256)))))
(assert (x332 (_ bv1000000000000000 256)))
(assert (= x5 (and x328 (not x169))))
(assert (=> (bvuge (_ bv10000 256) x64) (= (_ bv0 256) (x112 x64))))
(assert (= (x112 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= x70 (x359 (x97 (_ bv64 256) x70 (_ bv103 256)))))
(assert (bvult (_ bv10000 256) (x97 (_ bv64 256) x70 (_ bv103 256))))
(assert (=> (bvuge (_ bv10000 256) x203) (= (_ bv0 256) (x112 x203))))
(assert (=> (bvuge (_ bv10000 256) x153) (= (x112 x153) (_ bv0 256))))
(assert (x332 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (=> (bvuge (_ bv10000 256) x198) (= (_ bv0 256) (x112 x198))))
(assert (= (and x221 x344) x303))
(assert (= x67 (=> (and (or (and (and (x119 x91 x151) (= x44 (bvmul x151 x91)) (= x44 x171)) (not x168)) (and (= x171 (_ bv0 256)) x168)) (and (= (= x91 (_ bv0 256)) x168) (= x363 (_ bv1000000000000000000 256)))) x59)))
(assert (= (and x370 x243) x257))
(assert (= (x233 (x97 (_ bv64 256) x248 (_ bv169 256))) (_ bv169 256)))
(assert (not x181))
(assert (= (=> (and (and (not (= x299 x203)) (bvule (_ bv1 256) x64) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x126) (bvule x207 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvugt (x146 x203) (_ bv0 256)) x188) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x322) (bvule (_ bv0 256) x347) (not (= x70 x252)) (not (= x299 x41)) (not (= x41 x203)) x149 (= (bvugt (x146 x70) (_ bv0 256)) x356) (not (= x203 x259)) x356 (not (= x41 x64)) (not (= x40 x41)) (bvule x40 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x283 (bvult (_ bv0 256) (x146 x41))) (bvuge x207 (_ bv1 256)) (bvule (_ bv0 256) x90) x339 (not (= x70 x40)) x105 (bvule x241 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x143 (x21 (_ bv4 256))) (= x339 x224) (bvule x301 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x299 x64)) (bvuge x70 (_ bv1 256)) (not (= x70 x299)) (= x322 x64) (bvuge x266 (_ bv1 256)) (bvule (_ bv0 256) x297) (not (= x153 x40)) (= x192 (bvult (_ bv0 256) (x146 x40))) (bvuge x299 (_ bv1 256)) x183 (bvuge x57 (_ bv0 256)) (bvule x347 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x252 x259)) (bvule (_ bv1 256) x165) (= (bvult (_ bv0 256) (x146 x299)) x105) x195 (not (= x153 x203)) (not (= x299 x40)) (not (= x153 x41)) x287 (= x183 x138) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x57) (not (= x153 x64)) (not (= x252 x299)) (not (= x259 x153)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x252) (not (= x259 x299)) (bvuge x126 (_ bv36 256)) (bvule (_ bv0 256) x53) (bvule x259 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x259 x207) (bvule x265 (_ bv4294967295 256)) x283 (= x215 x40) (not (= x40 x203)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x165) (not (= x70 x153)) (not (= x203 x252)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x215) (= (bvult (_ bv0 256) (x146 x252)) x149) x38 (not (= x40 x252)) (not (= x203 x70)) (bvuge x24 (_ bv0 256)) x358 x302 (bvuge x259 (_ bv1 256)) x281 (not (= x153 x252)) (= x281 (bvult (_ bv0 256) (x146 x153))) (bvule (_ bv1 256) x322) (= x38 x279) (bvule x70 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x70 x41)) (= x259 x165) (not (= x40 x259)) (= x258 x284) (not (= x64 x259)) (bvuge x252 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x299) (not (= x64 x40)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x203) (bvule x24 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x287 x355) (bvule x41 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x70 x259)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x111) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x266) (bvuge x40 (_ bv1 256)) (bvuge x111 (_ bv0 256)) (= (bvult (_ bv0 256) (x146 x259)) x4) (bvule (_ bv0 256) x137) (= x106 x302) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x64) (bvule (_ bv1 256) x153) (bvuge x241 (_ bv0 256)) (bvule x297 (_ bv1461501637330902918203684832716283019655932542975 256)) x192 (not (= x299 x153)) (= x317 (_ bv0 256)) (bvule x90 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x153) (= x143 x13) x4 x258 (bvule (_ bv0 256) x265) (bvule x137 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv1 256) x41) (not (= x252 x41)) (not (= x70 x64)) (not (= x41 x259)) (bvuge x215 (_ bv1 256)) (= x153 x266) (not (= x64 x252)) (= x46 x358) (not (= x203 x64)) (= (bvult (_ bv0 256) (x146 x64)) x195) (bvuge x301 (_ bv0 256)) (bvule (_ bv1 256) x203) x188 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x53)) (and (= x248 x53) (and (and (= x6 (_ bv242558722 256)) (= x238 x180) (= x223 (x146 x70)) (= x344 (= x33 x367)) (= x269 x13) (= x148 x254) (= x3 x53) (= x254 (x240 x3)) (bvuge x223 (_ bv1 256)) (not (= (_ bv2 256) x50)) (= (x177 x70) x180)) (= x90 x367)))) (and (=> (and (and (and (bvule (_ bv1 256) x277) (= (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) x19) (= (_ bv1889567281 256) x208) (= x280 (_ bv36 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x141) (= x99 (x97 (_ bv64 256) x70 (_ bv103 256))) (= (bvugt x160 (_ bv0 256)) x370) (bvule (_ bv1 256) x170) (bvule (_ bv32 256) x16) (bvuge x68 (_ bv1 256)) (= (_ bv512 256) x365) (bvuge x141 (_ bv1 256)) (= x70 x141) (bvule x83 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x253 x70) (= (x58 (_ bv512 256)) x306) (= x277 (x146 x141)) (= x129 x253) (= (x146 x70) x170) (= (_ bv512 256) x62) (= (x108 x99) x314) (= x68 (x146 x83))) (or (and x370 (and (bvule x16 (_ bv4294967295 256)) (bvule (_ bv32 256) x16) (= (_ bv1 256) x124))) (and (= x124 x160) (not x370)))) (not x344)) x78) (=> (and x344 (and (= (_ bv128 256) x145) (= x334 x272) (= x33 x132))) x7))) x181))
(assert (= (x112 (bvadd (_ bv1 256) x244)) (x112 x244)))
(assert (= (x35 (x97 (_ bv64 256) x70 (_ bv103 256))) (_ bv64 256)))
(assert (= (and x320 x42) x150))
(assert (x332 (_ bv242558722 256)))
(assert (= x235 (and x294 x282)))
(assert (= x245 (or x182 x150)))
(assert (=> (bvule x259 (_ bv10000 256)) (= (_ bv0 256) (x112 x259))))
(assert (= (and x243 (not x370)) x288))
(assert (= (x97 (_ bv64 256) x248 (_ bv169 256)) (x112 (x97 (_ bv64 256) x248 (_ bv169 256)))))
(assert (= (_ bv103 256) (x233 (x97 (_ bv64 256) x70 (_ bv103 256)))))
(assert (not (x332 (x97 (_ bv64 256) x248 (_ bv169 256)))))
(assert (= (or x5 x200) x140))
(assert (= x221 true))
(check-sat)
(exit)
