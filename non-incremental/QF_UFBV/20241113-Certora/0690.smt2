(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x188 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x116 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x183 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x208 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x273 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x77 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x263 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x202 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x83 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x260 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x184 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x50 () Bool)
(declare-fun x174 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x295 () Bool)
(declare-fun x256 () Bool)
(declare-fun x10 () Bool)
(declare-fun x74 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x45 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x257 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x124 () Bool)
(declare-fun x118 () Bool)
(declare-fun x96 () Bool)
(declare-fun x186 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x247 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x125 () Bool)
(declare-fun x41 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x179 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x28 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x24 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x26 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x171 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x121 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x17 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x244 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x261 () Bool)
(declare-fun x233 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x245 () Bool)
(declare-fun x69 () Bool)
(declare-fun x56 ((_ BitVec 256)) Bool)
(declare-fun x265 () Bool)
(declare-fun x62 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x271 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x268 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x252 () Bool)
(declare-fun x217 () Bool)
(declare-fun x229 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x39 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x58 () Bool)
(declare-fun x290 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x46 () Bool)
(declare-fun x156 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x193 () Bool)
(declare-fun x149 () (_ BitVec 256))
(define-fun x279 ((x206 (_ BitVec 256)) (x299 (_ BitVec 256))) Bool (= x206 (bvudiv (bvmul x299 x206) x299)))
(define-fun x144 ((x206 (_ BitVec 256)) (x299 (_ BitVec 256))) Bool (= x206 (bvsdiv (bvmul x206 x299) x299)))
(define-fun x154 ((x206 (_ BitVec 256)) (x299 (_ BitVec 256))) Bool (= x206 (bvsdiv (bvmul x299 x206) x299)))
(define-fun x117 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x243 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x107 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x21 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x113 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x13 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x129 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x4 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x230 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x87 ((x159 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x85 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 x3) x66 (x121 x159)))
(define-fun x67 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 x226) x211 (x85 x159)))
(define-fun x102 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv128 256)) (_ bv1 256) (x117 x159)))
(define-fun x203 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv192 256)) (_ bv0 256) (x107 x159)))
(define-fun x267 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv224 256)) (_ bv0 256) (x113 x159)))
(define-fun x52 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x159) (_ bv0 256) (x129 x159)))
(define-fun x172 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv160 256)) (_ bv192 256) (x230 x159)))
(define-fun x196 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x159) x226 (x203 x159)))
(define-fun x178 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv320 256)) x95 (x267 x159)))
(define-fun x137 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv352 256)) x254 (x52 x159)))
(define-fun x285 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x159) (_ bv288 256) (x172 x159)))
(define-fun x92 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x30 x159) x100 (x67 x159)))
(define-fun x68 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 x226) x16 (x92 x159)))
(define-fun x264 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x185 x159) x173 (x68 x159)))
(define-fun x212 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x159) (_ bv1 256) (x243 x159)))
(define-fun x242 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv192 256)) (_ bv0 256) (x21 x159)))
(define-fun x65 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv224 256)) (_ bv0 256) (x13 x159)))
(define-fun x274 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv256 256)) (_ bv0 256) (x4 x159)))
(define-fun x32 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x159) (_ bv192 256) (x87 x159)))
(define-fun x210 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 (_ bv288 256)) x226 (x242 x159)))
(define-fun x241 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x159) x290 (x65 x159)))
(define-fun x132 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x159) x254 (x274 x159)))
(define-fun x53 ((x159 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x159) (_ bv288 256) (x32 x159)))
(assert (= (x17 (_ bv64 256) x238 (_ bv60 256)) (x247 (x17 (_ bv64 256) x238 (_ bv60 256)))))
(assert (not x252))
(assert (= (=> (and (bvuge x188 (_ bv1 256)) (= (bvmul (_ bv1000000000000000000 256) x51) x88) (= (= x234 (_ bv1000000000000000000 256)) x288) (not (bvugt x42 x11)) (x279 x126 x42) (= x51 x75) (= x153 x36) (= x38 (= (_ bv0 256) x51)) (= x75 (bvmul x126 x42)) (or x38 x288) (= x234 (bvudiv x88 x51)) (not (bvult (bvadd x40 x71) x40)) (bvule (_ bv0 256) x75) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x75) (= x42 (bvadd x11 (bvneg x298))) (= x153 (bvadd x71 x40)) (= (bvudiv x88 x188) x40)) x27) x239))
(assert (= (=> (and (= (bvudiv x143 x209) x62) (bvuge x209 (_ bv1 256)) (not (bvugt x62 (bvadd x62 x218))) (= (bvadd (bvneg x76) x286) x104) (or x112 x245) (bvule x79 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x272 (bvadd x218 x62)) (= x245 (= (_ bv1000000000000000000 256) x280)) (bvuge x79 (_ bv0 256)) (= (bvmul x266 (_ bv1000000000000000000 256)) x143) (not (bvugt x104 x286)) (= (bvudiv x143 x266) x280) (= x79 (bvmul x104 x33)) (= x112 (= x266 (_ bv0 256))) (= x272 x90) (= x79 x266) (x279 x33 x104)) x220) x179))
(assert (= x214 (and x80 x133)))
(assert (bvugt (x17 (_ bv64 256) x142 (_ bv0 256)) (_ bv10000 256)))
(assert (x56 (_ bv4294967295 256)))
(assert (= (x247 (x17 (_ bv64 256) x142 x270)) (x17 (_ bv64 256) x142 x270)))
(assert (= (x45 (x17 (_ bv64 256) x142 x270)) x142))
(assert (= (_ bv60 256) (x116 (x17 (_ bv64 256) x155 (_ bv60 256)))))
(assert (x56 (_ bv20282409603651670423947251286015 256)))
(assert (bvult (_ bv10000 256) (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256))))
(assert (= (x116 (x17 (_ bv64 256) x135 x78)) x78))
(assert (= (x17 (_ bv64 256) x225 (_ bv0 256)) (x247 (x17 (_ bv64 256) x225 (_ bv0 256)))))
(assert (x56 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (=> (bvuge (_ bv10000 256) x225) (= (x247 x225) (_ bv0 256))))
(assert (= x2 (or x269 x271)))
(assert (= x135 (x45 (x17 (_ bv64 256) x135 (_ bv0 256)))))
(assert (= (x247 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= x271 (and x295 x50)))
(assert (=> (bvuge (_ bv10000 256) x142) (= (x247 x142) (_ bv0 256))))
(assert (= (_ bv0 256) (x247 (_ bv2378104546 256))))
(assert (= (x45 (x17 (_ bv64 256) x142 (_ bv0 256))) x142))
(assert (bvugt (x17 (_ bv64 256) x142 x270) (_ bv10000 256)))
(assert (= (x45 (x17 (_ bv64 256) x135 (_ bv61 256))) x135))
(assert (= (and x2 (not x175)) x63))
(assert (= x49 (or x9 x134)))
(assert (= x225 (x45 (x17 (_ bv64 256) x225 (_ bv0 256)))))
(assert (x56 (_ bv404098525 256)))
(assert (bvugt (x17 (_ bv64 256) x155 (_ bv60 256)) (_ bv10000 256)))
(assert (= (_ bv64 256) (x257 (x17 (_ bv64 256) x142 x270))))
(assert (= (_ bv64 256) (x257 (x17 (_ bv64 256) x225 (_ bv0 256)))))
(assert (= (_ bv0 256) (x247 (_ bv20282409603651670423947251286015 256))))
(assert (= (x247 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= x252 (=> (and (and (= x135 x70) (and (= x60 x289) (and (= x236 x211) (= x119 (x17 (_ bv64 256) x135 (_ bv0 256))) (= (x121 x3) x66) (= x3 x250) (= (x171 x119) x95) (= x293 x135) (bvule x95 (_ bv20282409603651670423947251286015 256)) (= (x102 (_ bv128 256)) x248) (= (x41 x226) x296) (= x105 (bvugt x248 (_ bv0 256))) (bvule (_ bv1 256) x296) (= x66 x84) (= x236 (x85 x226)) (= (_ bv128 256) x12) (= (_ bv2378104546 256) x205)))) (and (bvule x97 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x217 (bvule (_ bv0 256) x289) (not (= x226 x136)) (bvuge (_ bv4294967295 256) x139) (bvule x250 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x128 x136)) (bvule (_ bv0 256) x97) (bvuge x180 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x226) (bvuge x136 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x72) (bvuge x250 (_ bv0 256)) (= x166 (_ bv0 256)) (bvule (_ bv0 256) x34) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x289) (bvule x128 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x195 (_ bv0 256)) (= (bvugt (x41 x136) (_ bv0 256)) x217) (= (_ bv36 256) x207) (not (= x128 x226)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x227) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x18) (bvule (_ bv0 256) x72) x170 (bvule x277 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x109 (bvult (_ bv0 256) (x41 x128))) (= (bvult (_ bv0 256) (x41 x226)) x170) (bvuge x139 (_ bv0 256)) (= x180 x70) x109 (bvule x176 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x18 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x136) (bvuge x227 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x195) (bvule (_ bv0 256) x176) (bvuge x277 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x180) (bvuge x226 (_ bv1 256)) (bvule x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x128 (_ bv1 256)))) (and (=> (and (and (and (= x162 (bvadd (_ bv64 256) x14)) (= x111 (x17 (_ bv64 256) x238 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x126) (= x188 (x137 x162)) (= x238 (bvand x201 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x126 (_ bv0 256)) (= x126 (_ bv0 256)) (= x188 (_ bv0 256))) x169) (= x216 (bvadd (_ bv1 256) x111)) (= x298 (x28 x111)) (bvuge (_ bv340282366920938463463374607431768211455 256) x298) (= x14 (x285 (_ bv160 256))) (= x71 (x77 x216)) (= x126 (x202 x111)) (= (x196 x81) x201) (= (x285 (_ bv160 256)) x81)) (or (and x169 (= x169 x147)) (and (not x169) (= x147 (= x60 x298))))) x105) x74) (=> (and (= x191 (_ bv0 256)) (not x105)) x59)))))
(assert (= (_ bv0 256) (x247 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (not (x56 (x17 (_ bv64 256) x238 (_ bv60 256)))))
(assert (x56 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (_ bv0 256) (x247 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (=> (bvuge (_ bv10000 256) x155) (= (_ bv0 256) (x247 x155))))
(assert (=> (bvuge (_ bv10000 256) x135) (= (x247 x135) (_ bv0 256))))
(assert (= (_ bv64 256) (x257 (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (= x118 (and x2 x175)))
(assert (=> (bvuge (_ bv10000 256) x30) (= (x247 x30) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x238) (= (x247 x238) (_ bv0 256))))
(assert (x56 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x247 (_ bv2951764649 256)) (_ bv0 256)))
(assert (= x181 (x45 (x17 (_ bv64 256) x181 (_ bv2 256)))))
(assert (= (x247 x111) (x247 (bvadd (_ bv1 256) x111))))
(assert (= (x116 (x17 (_ bv64 256) x135 (_ bv61 256))) (_ bv61 256)))
(assert (=> (bvuge (_ bv10000 256) x181) (= (_ bv0 256) (x247 x181))))
(assert (= (and (not x174) x284) x61))
(assert (= (x17 (_ bv64 256) x135 x78) (x247 (x17 (_ bv64 256) x135 x78))))
(assert (x56 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x257 (x17 (_ bv64 256) x135 (_ bv61 256))) (_ bv64 256)))
(assert (= (and x208 x63) x134))
(assert (not (x56 (x17 (_ bv64 256) x155 (_ bv60 256)))))
(assert (= x284 (or x253 x39)))
(assert (= (x45 (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (_ bv0 256)))
(assert (= (_ bv0 256) (x116 (x17 (_ bv64 256) x142 (_ bv0 256)))))
(assert (x56 (_ bv2951764649 256)))
(assert (= x135 (x45 (x17 (_ bv64 256) x135 x78))))
(assert (bvult (_ bv10000 256) (x17 (_ bv64 256) x225 (_ bv0 256))))
(assert (= x142 (x45 (x17 (_ bv64 256) x142 (_ bv61 256)))))
(assert (= (and x105 x124) x183))
(assert (= (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256)) (x247 (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (not (x56 (x17 (_ bv64 256) x142 (_ bv61 256)))))
(assert (= (x257 (x17 (_ bv64 256) x181 (_ bv2 256))) (_ bv64 256)))
(assert (= (x17 (_ bv64 256) x135 (_ bv0 256)) (x247 (x17 (_ bv64 256) x135 (_ bv0 256)))))
(assert (= (_ bv0 256) (x247 (_ bv1289409798 256))))
(assert (not (x56 (x17 (_ bv64 256) x225 (_ bv0 256)))))
(assert (= x270 (x116 (x17 (_ bv64 256) x142 x270))))
(assert (not (x56 (x17 (_ bv64 256) x135 (_ bv61 256)))))
(assert (=> (bvule x226 (_ bv10000 256)) (= (x247 x226) (_ bv0 256))))
(assert (= (x247 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (or x229 x61) x204))
(assert (= (x45 (x17 (_ bv64 256) x238 (_ bv60 256))) x238))
(assert (= (_ bv64 256) (x257 (x17 (_ bv64 256) x135 (_ bv0 256)))))
(assert (= true x124))
(assert (= x190 (=> (= (ite x261 x261 (not (bvult x76 x223))) x175) (and (=> (and x175 (= x218 x90)) x220) (=> (and (and (= x208 (bvult x223 x20)) (or (and x208 (= x223 x286)) (and (not x208) (= x286 x20)))) (not x175)) x179)))))
(assert (= x74 (=> (= x80 (ite x147 x147 (not (bvugt x223 x298)))) (and (=> (and (= x36 x71) x80) x27) (=> (and (and (= x194 (bvugt x60 x223)) (or (and (= x60 x11) (not x194)) (and x194 (= x223 x11)))) (not x80)) x239)))))
(assert (x56 (_ bv1889567281 256)))
(assert (= (x116 (x17 (_ bv64 256) x225 (_ bv0 256))) (_ bv0 256)))
(assert (= (x247 (x17 (_ bv64 256) x155 (_ bv60 256))) (x17 (_ bv64 256) x155 (_ bv60 256))))
(assert (= (or x15 x46) x122))
(assert (= (x116 (x17 (_ bv64 256) x142 (_ bv61 256))) (_ bv61 256)))
(assert (bvult (_ bv10000 256) (x17 (_ bv64 256) x142 (_ bv61 256))))
(assert (= x220 (=> (and (x279 x232 x182) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x93) (= x93 (bvmul x232 x182)) (= (bvadd (bvneg x64) x90) x182) (= (not (bvult (_ bv1 256) x215)) x275) (= (x241 x73) x232) (= x73 (bvadd (_ bv32 256) x8)) (= (bvadd x110 (_ bv1 256)) x270) (not (bvult x90 x182)) (bvuge x93 (_ bv0 256)) (= (x53 (_ bv160 256)) x8) (= (x212 (_ bv128 256)) x215) (= x219 (bvudiv x93 (_ bv1000000000000000000 256))) (= x5 (x17 (_ bv64 256) x142 x270)) (= x64 (x273 x5))) (and x275 (=> (= x219 x187) x146)))))
(assert (not (x56 (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (= (_ bv69 256) (x116 (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (=> (bvuge (_ bv10000 256) x3) (= (_ bv0 256) (x247 x3))))
(assert (x56 (_ bv1289409798 256)))
(assert (= (x45 (x17 (_ bv64 256) x155 (_ bv60 256))) x155))
(assert (=> (bvuge (_ bv10000 256) x185) (= (_ bv0 256) (x247 x185))))
(assert (= (x257 (x17 (_ bv64 256) x155 (_ bv60 256))) (_ bv64 256)))
(assert (= (and (not x208) x63) x9))
(assert (= x59 (=> (and (and (and (= x200 x225) (= (_ bv4 256) x106) (= (_ bv36 256) x158) (= (x41 x226) x148) (bvuge x148 (_ bv1 256)) (= (_ bv404098525 256) x224) (bvuge (_ bv20282409603651670423947251286015 256) x276) (= (x17 (_ bv64 256) x225 (_ bv0 256)) x291) (bvule (_ bv1 256) x164) (= x10 (bvuge x254 x276)) x10 (= x141 (_ bv1889567281 256)) (= x276 (x171 x291)) (= x164 (x41 x226)) (= x57 x225)) (and (and (and (= x181 x145) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x255) (= (x31 x157) x160) (bvuge x255 (_ bv4 256)) x265 (= x226 x181) (= (_ bv1889567281 256) x228) (= (bvule x43 x160) x265) (= x157 (x17 (_ bv64 256) x181 (_ bv2 256))) (= (x41 x136) x150) (bvule (_ bv1 256) x150)) (and (= x294 x250) (and (and (= x55 x294) (= x250 x30) (= x138 (_ bv36 256)) (= x55 (x184 x237)) (= (_ bv2951764649 256) x25) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x55) (= x197 x180) (= x94 x16) (= x237 (x17 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (bvuge x221 (_ bv1 256)) (= x100 x249) (= x100 (x67 x30)) (= x278 (_ bv0 256)) (= (x41 x226) x221) (= (x92 x226) x94)) (and (= x142 x197) (and (and (bvule (_ bv1 256) x140) (= x281 (x264 x226)) (= (x17 (_ bv64 256) x142 (_ bv0 256)) x101) (= x174 (bvult (_ bv0 256) x91)) (= (_ bv128 256) x240) (= x173 (x68 x185)) (= x82 x142) (bvule x290 (_ bv20282409603651670423947251286015 256)) (= x250 x185) (= x281 x199) (= x19 (_ bv2378104546 256)) (= x290 (x171 x101)) (= x91 (x212 (_ bv128 256))) (= (x41 x226) x140) (= x173 x48)) (= x20 x289)))))) (and (= x86 (_ bv1289409798 256)) (= x283 x254) (bvule x23 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x283 x120) (= x108 (x41 x226)) (= (_ bv36 256) x29) (bvuge x23 (_ bv1 256)) (= x198 x283) (= (bvudiv x292 (_ bv1000000000000000000 256)) x120) (bvuge x108 (_ bv1 256)) (= (bvmul x283 (_ bv1000000000000000000 256)) x292) (= (bvudiv x292 x23) x43)))) (and (= x22 (_ bv4 256)) (= (_ bv404098525 256) x233) (= (_ bv36 256) x222) (= x180 x200) (= (x41 x226) x189) (= x7 x251) (= x149 (x268 x168)) (= x7 (bvadd x149 x191)) (= x168 (x17 (_ bv64 256) x135 (_ bv61 256))) (not (bvugt x149 (bvadd x191 x149))) (bvule (_ bv1 256) x189) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x254))) (and (=> (and (= x187 (_ bv0 256)) (not x174)) x146) (=> (and x174 (and (and (= (x17 (_ bv64 256) x155 (_ bv60 256)) x127) (= (x132 x1) x209) (= x37 (x53 (_ bv160 256))) (= x76 (x28 x127)) (= (x77 x110) x218) (bvule x76 (_ bv340282366920938463463374607431768211455 256)) (= (x210 x54) x26) (= x110 (bvadd x127 (_ bv1 256))) (= (bvand x26 (_ bv1461501637330902918203684832716283019655932542975 256)) x155) (= (x202 x127) x33) (= x1 (bvadd x37 (_ bv64 256))) (= (ite (= x33 (_ bv0 256)) (= x33 (_ bv0 256)) (= x209 (_ bv0 256))) x50) (bvuge (_ bv340282366920938463463374607431768211455 256) x33) (= (x53 (_ bv160 256)) x54)) (or (and (= (= x20 x76) x261) (not x50)) (and (= x261 x50) x50)))) x190)))))
(assert (= (and (not x50) x295) x269))
(assert (= (x247 (x17 (_ bv64 256) x142 (_ bv61 256))) (x17 (_ bv64 256) x142 (_ bv61 256))))
(assert (= (and (not x80) x133) x58))
(assert (= (and x284 x174) x295))
(assert (= (_ bv0 256) (x247 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (bvugt (x17 (_ bv64 256) x238 (_ bv60 256)) (_ bv10000 256)))
(assert (= x146 (=> (and (= x177 (bvadd x152 x187)) (= x192 (bvuge x246 x251)) (= x123 (x17 (_ bv64 256) x142 (_ bv61 256))) (= x246 x177) (= (x268 x123) x152) (not (bvugt x152 (bvadd x187 x152)))) x192)))
(assert (not (x56 (x17 (_ bv64 256) x142 x270))))
(assert (bvugt (x17 (_ bv64 256) x135 x78) (_ bv10000 256)))
(assert (= x15 (and (not x194) x58)))
(assert (= (_ bv2 256) (x116 (x17 (_ bv64 256) x181 (_ bv2 256)))))
(assert (= (or x49 x118) x229))
(assert (x56 (_ bv2378104546 256)))
(assert (= x69 (and x169 x183)))
(assert (= (x247 (bvadd (_ bv1 256) x127)) (x247 x127)))
(assert (= (_ bv64 256) (x257 (x17 (_ bv64 256) x238 (_ bv60 256)))))
(assert (= (x247 (x17 (_ bv64 256) x135 (_ bv61 256))) (x17 (_ bv64 256) x135 (_ bv61 256))))
(assert (bvult (_ bv10000 256) (x17 (_ bv64 256) x181 (_ bv2 256))))
(assert (= x244 (and (not x169) x183)))
(assert (= (x247 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x247 (bvadd x110 (_ bv1 256))) (x247 x110)))
(assert (= (x257 (x17 (_ bv64 256) x142 (_ bv0 256))) (_ bv64 256)))
(assert (not (x56 (x17 (_ bv64 256) x142 (_ bv0 256)))))
(assert (= (x247 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x257 (x17 (_ bv64 256) x142 (_ bv61 256)))))
(assert (= (and x194 x58) x46))
(assert (= (or x244 x69) x133))
(assert (= (x17 (_ bv64 256) x142 (_ bv0 256)) (x247 (x17 (_ bv64 256) x142 (_ bv0 256)))))
(assert (bvult (_ bv10000 256) (x17 (_ bv64 256) x135 (_ bv0 256))))
(assert (= (and (not x105) x124) x253))
(assert (= (_ bv60 256) (x116 (x17 (_ bv64 256) x238 (_ bv60 256)))))
(assert (not (x56 (x17 (_ bv64 256) x135 (_ bv0 256)))))
(assert (x56 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= (_ bv0 256) (x116 (x17 (_ bv64 256) x135 (_ bv0 256)))))
(assert (= (x247 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (x56 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (=> (bvule x136 (_ bv10000 256)) (= (_ bv0 256) (x247 x136))))
(assert (= (x17 (_ bv64 256) x181 (_ bv2 256)) (x247 (x17 (_ bv64 256) x181 (_ bv2 256)))))
(assert (= x39 (or x122 x214)))
(assert (= (_ bv0 256) (x247 (_ bv1889567281 256))))
(assert (x56 (_ bv1000000000000000000 256)))
(assert (= (x247 x216) (x247 (bvadd x216 (_ bv1 256)))))
(assert (not (x56 (x17 (_ bv64 256) x181 (_ bv2 256)))))
(assert (not (x56 (x17 (_ bv64 256) x135 x78))))
(assert (= (x257 (x17 (_ bv64 256) x135 x78)) (_ bv64 256)))
(assert (= x27 (=> (and (not (bvugt x6 x36)) (= x263 (bvmul x6 x165)) (x279 x165 x6) (= x24 (not (bvugt x259 (_ bv1 256)))) (= (x273 x235) x282) (bvuge x263 (_ bv0 256)) (= x165 (x178 x161)) (= x6 (bvadd (bvneg x282) x36)) (= x78 (bvadd (_ bv1 256) x216)) (= (bvudiv x263 (_ bv1000000000000000000 256)) x44) (bvule x263 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x235 (x17 (_ bv64 256) x135 x78)) (= x259 (x102 (_ bv128 256))) (= (x285 (_ bv160 256)) x35) (= x161 (bvadd (_ bv32 256) x35))) (and (=> (= x191 x44) x59) x24))))
(assert (=> (bvuge (_ bv10000 256) x128) (= (_ bv0 256) (x247 x128))))
(assert (bvult (_ bv10000 256) (x17 (_ bv64 256) x135 (_ bv61 256))))
(check-sat)
(exit)
