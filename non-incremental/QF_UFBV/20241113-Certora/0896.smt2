(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x92 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x76 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x126 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x77 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x29 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x193 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x180 () Bool)
(declare-fun x137 () Bool)
(declare-fun x150 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x49 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x8 () Bool)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x109 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x57 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x122 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x196 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x148 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x163 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x98 () Bool)
(declare-fun x37 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x158 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x17 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x115 () Bool)
(declare-fun x113 () (_ BitVec 256))
(declare-fun x25 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x69 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x161 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x159 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x162 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x65 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x145 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x112 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x120 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x96 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x33 ((_ BitVec 256)) Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x117 () Bool)
(declare-fun x164 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x31 () Bool)
(define-fun x16 ((x83 (_ BitVec 256)) (x135 (_ BitVec 256))) Bool (= x83 (bvudiv (bvmul x135 x83) x135)))
(define-fun x191 ((x83 (_ BitVec 256)) (x135 (_ BitVec 256))) Bool (= x83 (bvsdiv (bvmul x83 x135) x135)))
(define-fun x125 ((x83 (_ BitVec 256)) (x135 (_ BitVec 256))) Bool (= x83 (bvsdiv (bvmul x135 x83) x135)))
(define-fun x104 ((x95 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x130 ((x95 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x94 ((x95 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x3 ((x95 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x32 ((x95 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x45 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (bvugt x192 x95) (x163 x95) (_ bv0 256)))
(define-fun x53 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv0 256) x95) (bvugt x192 x95)) (x126 x95) (x45 x95)))
(define-fun x103 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (= x95 x10) x197 (x112 x95)))
(define-fun x6 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (= x95 (_ bv128 256)) x160 (x104 x95)))
(define-fun x27 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x95) x173 (x32 x95)))
(define-fun x85 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite x166 (x32 x95) (x27 x95)))
(define-fun x86 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (= x167 x95) x20 (x94 x95)))
(define-fun x56 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite x166 (x94 x95) (x86 x95)))
(define-fun x19 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (= x95 x185) x119 (x56 x95)))
(define-fun x40 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite x55 (x56 x95) (x19 x95)))
(define-fun x189 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (= x132 x95) x12 (x3 x95)))
(define-fun x111 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite x166 (x3 x95) (x189 x95)))
(define-fun x5 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite (= x173 x95) x34 (x130 x95)))
(define-fun x171 ((x95 (_ BitVec 256))) (_ BitVec 256) (ite x166 (x130 x95) (x5 x95)))
(assert (= (x37 (_ bv18446744073709551615 256)) (_ bv0 256)))
(assert (= x31 (and x18 (not x148))))
(assert (= (x109 (x159 (_ bv64 256) x106 (_ bv60 256))) (_ bv64 256)))
(assert (= x134 (=> (and (= (x111 x42) x67) (= x133 (x77 x75)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x68) x106) (= x181 (x76 x71)) (= x148 (bvugt x63 (_ bv0 256))) (bvuge x123 (_ bv1 256)) (= x168 (x85 (_ bv160 256))) (= (x159 (_ bv64 256) x106 (_ bv60 256)) x75) (= x15 (x40 x87)) (= x63 (bvadd x102 (bvneg x133))) (= x139 (bvadd (_ bv64 256) x35)) (= (x6 (_ bv128 256)) x38) (= x87 (bvadd x11 (_ bv32 256))) (bvuge x38 (_ bv1 256)) (bvuge x142 (_ bv1 256)) (= x11 (x85 (_ bv160 256))) (= (x85 (_ bv160 256)) x35) (= x71 (bvadd (_ bv1 256) x75)) (= x42 (bvadd (_ bv64 256) x168)) (= x142 (x6 (_ bv128 256))) (= (x6 (_ bv128 256)) x123) (= (x111 x139) x68) (= x61 (x6 (_ bv128 256))) (bvuge x61 (_ bv1 256)) (bvuge (_ bv340282366920938463463374607431768211455 256) x133)) (and (=> (and (and (and (= x178 (ite (= x129 (_ bv0 256)) (= (_ bv0 256) x129) (= (_ bv0 256) x15))) (= x129 (x120 x75)) (bvule x129 (_ bv340282366920938463463374607431768211455 256))) (or (and x178 (= x80 x178)) (and (= x80 (= x133 x102)) (not x178)))) x148) x151) (=> (and (= x36 x181) (not x148)) x90)))))
(assert (= (x37 (bvadd x75 (_ bv1 256))) (x37 x75)))
(assert (= x18 (or x158 x55)))
(assert (=> (bvule x106 (_ bv10000 256)) (= (x37 x106) (_ bv0 256))))
(assert (= (x37 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x33 (_ bv1000000000000000000 256)))
(assert (= (x37 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= x166 (and x96 (not x14))))
(assert (= x106 (x69 (x159 (_ bv64 256) x106 (_ bv60 256)))))
(assert (x33 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (=> (bvuge (_ bv10000 256) x10) (= (_ bv0 256) (x37 x10))))
(assert (= x96 true))
(assert (x33 (_ bv4294967295 256)))
(assert (= (x37 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (x33 (_ bv18446744073709551487 256)))
(assert (x33 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))
(assert (=> (bvuge (_ bv10000 256) x194) (= (_ bv0 256) (x37 x194))))
(assert (= x90 (=> (and (bvuge x157 (_ bv1 256)) (= x51 (x6 (_ bv128 256))) (= x157 (x6 (_ bv128 256))) (bvule (_ bv1 256) x51) (= (x171 x165) x48) (= x115 (not (bvult (_ bv1 256) x82))) (= x78 (x6 (_ bv128 256))) (= x184 (bvand (_ bv340282366920938463463374607431768211455 256) x48)) (bvule (_ bv1 256) x78) (= (x6 (_ bv128 256)) x82) (= (x85 (_ bv160 256)) x165)) x115)))
(assert (not x137))
(assert (= (and x193 (not x41)) x55))
(assert (= (x37 (_ bv1637409077 256)) (_ bv0 256)))
(assert (= x92 (=> (and (= x101 (bvudiv x59 x15)) (= x44 (bvadd x181 x101)) (= x59 (bvmul (_ bv1000000000000000000 256) x198)) (= x198 x138) (x16 x129 x170) (= x170 (bvadd (bvneg x133) x188)) (= x44 x128) (not (bvult x188 x170)) (= (bvmul x170 x129) x138) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x138) (= x23 (= x198 (_ bv0 256))) (bvule (_ bv0 256) x138) (= x161 (= x169 (_ bv1000000000000000000 256))) (or x23 x161) (not (bvult (bvadd x181 x101) x101)) (= (bvudiv x59 x198) x169) (bvuge x15 (_ bv1 256))) x7)))
(assert (= x29 (or x65 x31)))
(assert (= x155 (and x24 (not x49))))
(assert (= x127 (and x96 x14)))
(assert (= (and x99 x52) x28))
(assert (= (x37 (_ bv18446744073709551487 256)) (_ bv0 256)))
(assert (= (=> (and (= x36 x128) (= x100 (bvand x102 (_ bv340282366920938463463374607431768211455 256)))) x90) x57))
(assert (x33 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x177 (and x150 (not x178))))
(assert (bvugt (x159 (_ bv64 256) x106 (_ bv60 256)) (_ bv10000 256)))
(assert (= (x17 (x159 (_ bv64 256) x106 (_ bv60 256))) (_ bv60 256)))
(assert (= (_ bv0 256) (x37 (_ bv4294967295 256))))
(assert (= x158 (and x41 x193)))
(assert (= (=> (and (bvuge x192 (_ bv132 256)) (= x20 (x53 x183)) (bvuge (_ bv18446744073709551615 256) x173) (bvule x34 (_ bv340282366920938463463374607431768211455 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x192) (= (bvadd x173 (_ bv32 256)) x167) (bvule x173 (_ bv18446744073709551615 256)) (or (bvuge (_ bv18446744073709551519 256) x173) (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x173)) (= (bvadd (bvneg x146) x192) x186) (= x89 (bvadd (_ bv96 256) x173)) (bvule x12 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (not (bvugt x72 (bvadd (_ bv32 256) x66))) x175) (or (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x173) (bvule x173 (_ bv18446744073709551519 256))) (= x66 (bvadd x183 (_ bv32 256))) (= x34 (x53 x146)) (bvule x186 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)) (= (bvadd (_ bv32 256) x167) x132) (not (bvult x89 x173)) (= x183 (bvadd x146 (_ bv32 256))) (= (x53 x66) x12) (bvuge x186 (_ bv96 256))) (and x175 x172)) x196))
(assert (x33 (_ bv340282366920938463463374607431768211455 256)))
(assert (x33 (_ bv18446744073709551615 256)))
(assert (= (_ bv0 256) (x37 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))))
(assert (= (=> (and (and (bvule (_ bv1 256) x194) (= x149 (_ bv1637409077 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x176) (= (_ bv4 256) x46) (bvuge x2 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x43) (= x2 (x25 x164)) (bvule (_ bv0 256) x107) (bvule x21 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x84 (_ bv0 256)) (bvuge x50 (_ bv0 256)) (= x117 (bvugt (x25 x164) (_ bv0 256))) x117 (bvuge x21 (_ bv0 256)) (bvule (_ bv0 256) x118) (bvule (_ bv0 256) x58) (bvule x118 (_ bv4294967295 256)) (= x195 (bvugt (x25 x194) (_ bv0 256))) (bvuge x176 (_ bv0 256)) (bvule x107 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x194) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x26) (bvule (_ bv0 256) x141) (bvuge x164 (_ bv1 256)) (= (_ bv0 256) x144) (= (x126 (_ bv4 256)) x136) (bvule x58 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv68 256) x192) (bvule x141 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x50) (not (= x164 x194)) (bvule (_ bv0 256) x26) (bvule (_ bv0 256) x187) x195 (bvuge x43 (_ bv0 256)) (= x93 x136) (bvuge x64 (_ bv1 256)) (bvuge (_ bv18446744073709551615 256) x136) (bvule x187 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x84) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x164) (bvule x192 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))) (and (and (= x102 x58) (and (= x13 (bvmul x160 (_ bv96 256))) (= (bvmul x160 (_ bv32 256)) x153) (= (x112 x10) x197) (= x160 (x53 x47)) (= (bvand (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256) x22) x79) (= x91 (_ bv128 256)) (= x110 (x103 x164)) (= (bvadd (_ bv4 256) x136) x47) (= x114 (x25 x164)) (= x110 x88) (= (bvadd (_ bv31 256) x47) x152) (= (_ bv2997214202 256) x62) (= x72 (bvadd x13 x146)) (= x22 (bvadd (_ bv63 256) x153)) (bvule x160 (_ bv18446744073709551615 256)) (= (bvult x146 x72) x14) (= x10 x187) (= (bvadd (_ bv32 256) x47) x146) (bvule x79 (_ bv18446744073709551487 256)) (bvuge x114 (_ bv1 256)) (not (bvugt x72 x192)) (= x197 x190) (bvugt x192 x152) (= x173 (bvadd (_ bv128 256) x79)))) (= x187 x124))) (and (=> (not x14) x172) (=> x14 x196))) x137))
(assert (x33 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv0 256) (x37 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (x33 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)))
(assert (= x24 (or x122 x8)))
(assert (= (=> (and (or (not x49) x49) (= (= x128 x181) x49)) x57) x7))
(assert (=> (bvuge (_ bv10000 256) x164) (= (_ bv0 256) (x37 x164))))
(assert (= (x37 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= x172 (=> (and (= x97 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x60)) (= x41 (bvult (_ bv0 256) x113)) (= x124 x97) (= (x6 (_ bv128 256)) x113)) (and (=> x41 x4) (=> (not x41) x134)))))
(assert (= x8 (and x1 x145)))
(assert (= (=> (= (ite x80 x80 (not (bvult x133 x143))) x145) (and (=> (and (and (= x99 (bvugt x102 x143)) (or (and (= x102 x188) (not x99)) (and (= x188 x143) x99))) (not x145)) x92) (=> (and (= x181 x128) x145) x7))) x151))
(assert (= x1 (or x177 x154)))
(assert (= x150 (and x148 x18)))
(assert (= (_ bv0 256) (x37 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256))))
(assert (x33 (_ bv2997214202 256)))
(assert (x33 (_ bv1637409077 256)))
(assert (= x105 (and x52 (not x99))))
(assert (= x122 (or x28 x105)))
(assert (= (x37 (_ bv18446744073709551519 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x37 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256))))
(assert (= x4 (=> (and (= (x6 (_ bv128 256)) x156) (= (not (bvugt x39 (_ bv1 256))) x180) (= x39 (x6 (_ bv128 256))) (= x185 (bvadd (_ bv32 256) x140)) (= x140 (x85 (_ bv160 256))) (bvule (_ bv1 256) x156)) (and x180 x134))))
(assert (not (x33 (x159 (_ bv64 256) x106 (_ bv60 256)))))
(assert (= (or (and x49 x24) x155) x65))
(assert (x33 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)))
(assert (= (x159 (_ bv64 256) x106 (_ bv60 256)) (x37 (x159 (_ bv64 256) x106 (_ bv60 256)))))
(assert (= (_ bv0 256) (x37 (_ bv2997214202 256))))
(assert (x33 (_ bv18446744073709551519 256)))
(assert (= x154 (and x150 x178)))
(assert (= (or x127 x166) x193))
(assert (= (and x1 (not x145)) x52))
(check-sat)
(exit)
