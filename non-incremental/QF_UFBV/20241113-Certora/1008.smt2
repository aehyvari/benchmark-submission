(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x114 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x7 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x111 () Bool)
(declare-fun x79 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x34 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x61 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x66 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x140 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x118 () Bool)
(declare-fun x121 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x43 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x24 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x172 () Bool)
(declare-fun x71 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x78 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x83 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x105 () Bool)
(declare-fun x91 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x69 () Bool)
(declare-fun x30 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x35 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x95 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x72 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x11 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x162 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x100 () Bool)
(declare-fun x163 ((_ BitVec 256)) Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x81 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x157 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x137 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x87 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(define-fun x149 ((x76 (_ BitVec 256)) (x135 (_ BitVec 256))) Bool (= x76 (bvudiv (bvmul x135 x76) x135)))
(define-fun x40 ((x76 (_ BitVec 256)) (x135 (_ BitVec 256))) Bool (= x76 (bvsdiv (bvmul x76 x135) x135)))
(define-fun x62 ((x76 (_ BitVec 256)) (x135 (_ BitVec 256))) Bool (= x76 (bvsdiv (bvmul x135 x76) x135)))
(define-fun x113 ((x134 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x4 ((x134 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x136 ((x134 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x153 ((x134 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x84 ((x134 (_ BitVec 256))) (_ BitVec 256) (ite (= x134 x146) x68 (x140 x134)))
(define-fun x27 ((x120 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x120) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x120))) (= (x72 (x66 x120)) (bvadd (_ bv1 256) x120)) (not (and (bvuge x120 (_ bv0 256)) (bvugt x21 x120)))))
(define-fun x127 ((x6 (_ BitVec 256))) Bool (or (= (x72 x6) (_ bv0 256)) (not (and (bvuge x6 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x6))) (and (bvule (x72 x6) x21) (and (bvuge (x72 x6) (_ bv1 256)) (= (x66 (bvadd (bvneg (_ bv1 256)) (x72 x6))) x6)))))
(define-fun x143 ((x80 (_ BitVec 256)) (x155 (_ BitVec 256))) Bool (or (or (= (bvadd (_ bv1 256) x155) (x162 x80 (x61 x80 x155))) (not (and (bvule x155 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x155 (_ bv0 256)))) (not (and (bvult x155 (x79 x80)) (bvuge x155 (_ bv0 256))))) (not (and (bvule (_ bv0 256) x80) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x80)))))
(define-fun x55 ((x23 (_ BitVec 256)) (x130 (_ BitVec 256))) Bool (or (or (and (bvuge (x79 x23) (x162 x23 x130)) (and (bvuge (x162 x23 x130) (_ bv1 256)) (= (x61 x23 (bvadd (x162 x23 x130) (bvneg (_ bv1 256)))) x130))) (= (_ bv0 256) (x162 x23 x130)) (not (and (bvuge x130 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x130)))) (not (and (bvuge x23 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x23)))))
(define-fun x25 ((x31 (_ BitVec 256)) (x158 (_ BitVec 256))) Bool (or (or (= (x78 x31 (x35 x31 x158)) (bvadd x158 (_ bv1 256))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x158) (bvuge x158 (_ bv0 256)))) (not (and (bvule (_ bv0 256) x158) (bvugt (x95 x31) x158)))) (not (and (bvule (_ bv0 256) x31) (bvule x31 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x13 ((x161 (_ BitVec 256)) (x104 (_ BitVec 256))) Bool (or (or (not (and (bvule (_ bv0 256) x104) (bvule x104 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (x78 x161 x104) (_ bv0 256)) (and (bvuge (x95 x161) (x78 x161 x104)) (and (= x104 (x35 x161 (bvadd (x78 x161 x104) (bvneg (_ bv1 256))))) (bvule (_ bv1 256) (x78 x161 x104))))) (not (and (bvuge x161 (_ bv0 256)) (bvule x161 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x75 ((x147 (_ BitVec 256)) (x45 (_ BitVec 256))) Bool (or (or (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x45) (bvule (_ bv0 256) x45))) (not (or (not (= (x162 x147 x45) (_ bv0 256))) (not (= (_ bv0 256) (x78 x147 x45))))) (not (= (x72 x45) (_ bv0 256)))) (not (and (bvule x147 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x147 (_ bv0 256))))))
(define-fun x49 ((x94 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x94) (bvule x94 (_ bv1461501637330902918203684832716283019655932542975 256)))) (bvult (x79 x94) (_ bv340282366920938463463374607431768211455 256))))
(define-fun x57 ((x10 (_ BitVec 256))) Bool (or (bvugt (_ bv340282366920938463463374607431768211455 256) (x95 x10)) (not (and (bvule x10 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x10 (_ bv0 256))))))
(define-fun x123 () Bool (x27 (bvadd (x72 x125) (bvneg (_ bv1 256)))))
(define-fun x128 () Bool x123)
(define-fun x141 () Bool (x127 x125))
(define-fun x115 () Bool x141)
(define-fun x26 () Bool (x143 x116 (bvadd (x162 x116 x125) (bvneg (_ bv1 256)))))
(define-fun x86 () Bool x26)
(define-fun x85 () Bool (x55 x116 x125))
(define-fun x98 () Bool x85)
(define-fun x12 () Bool (x25 x116 (bvadd (x78 x116 x125) (bvneg (_ bv1 256)))))
(define-fun x70 () Bool x12)
(define-fun x39 () Bool (x13 x116 x125))
(define-fun x59 () Bool x39)
(define-fun x67 () Bool (x75 x116 x125))
(define-fun x170 () Bool (x75 x116 x125))
(define-fun x159 () Bool (and x170 x67))
(define-fun x101 () Bool (x49 x116))
(define-fun x107 () Bool x101)
(define-fun x41 () Bool (x57 x116))
(define-fun x29 () Bool x41)
(assert (=> (bvuge (_ bv10000 256) x175) (= (_ bv0 256) (x34 x175))))
(assert x29)
(assert (= (x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= x19 (=> (and (and (not (= x99 x175)) (= x98 x20) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x175) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x97) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x126) (= x38 x128) (not (= x99 x168)) (not (= x42 x168)) (bvuge x129 (_ bv0 256)) (not (= x60 x99)) (bvuge (_ bv4294967295 256) x89) x108 (not (= x106 x44)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x60) (not (= x73 x60)) (= x172 (bvult (_ bv0 256) (x7 x175))) (not (= x151 x168)) (not (= x106 x42)) (bvule x16 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x151 x60)) (bvuge x97 (_ bv36 256)) (= (bvugt (x7 x168) (_ bv0 256)) x69) x64 (not (= x42 x44)) (bvule x166 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x51 (bvult (_ bv0 256) (x7 x99))) (not (= x106 x151)) (bvule x8 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x139) (bvule x9 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x142 (_ bv1 256)) x36 (bvule x50 (_ bv1461501637330902918203684832716283019655932542975 256)) x38 (not (= x175 x42)) (not (= x175 x151)) (not (= x175 x44)) (not (= x73 x168)) (bvule (_ bv1 256) x139) (not (= x73 x175)) (not (= x60 x44)) (not (= x106 x175)) (bvule x96 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x142 x106) (= (x87 (_ bv4 256)) x77) (bvuge x151 (_ bv1 256)) x172 (= x42 x50) x24 (not (= x168 x60)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x42) (not (= x175 x168)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x168) (bvuge x16 (_ bv0 256)) x69 (= x3 (_ bv0 256)) (bvule (_ bv1 256) x106) (not (= x168 x106)) (bvule (_ bv1 256) x60) (bvuge x18 (_ bv0 256)) (not (= x99 x106)) x160 (bvule (_ bv1 256) x96) (bvuge x44 (_ bv1 256)) x169 (= x115 x160) (= x150 (bvult (_ bv0 256) (x7 x60))) x20 (= x70 x108) (bvule (_ bv1 256) x99) (= x121 (bvult (_ bv0 256) (x7 x73))) (bvuge x50 (_ bv1 256)) (bvule x151 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x9 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x53) (bvuge x58 (_ bv0 256)) (= x59 x28) (= x77 x171) (bvule (_ bv0 256) x53) (not (= x44 x168)) (bvule x142 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x73 x106)) (= x169 x86) (= (bvult (_ bv0 256) (x7 x106)) x36) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x73) (= (bvugt (x7 x151) (_ bv0 256)) x64) x28 (bvuge x89 (_ bv0 256)) (not (= x73 x42)) (not (= x60 x42)) x51 (bvule (_ bv1 256) x73) (bvuge x175 (_ bv1 256)) (bvule (_ bv0 256) x8) (= x99 x139) (not (= x151 x44)) (bvule (_ bv0 256) x126) (= x5 x159) (= x42 x96) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x129) (not (= x99 x151)) (not (= x99 x44)) (bvuge x42 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x99) (not (= x99 x73)) (= x24 (bvult (_ bv0 256) (x7 x42))) x150 (not (= x175 x60)) (not (= x151 x73)) x121 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x18) (not (= x99 x42)) (not (= x106 x60)) (bvuge x173 (_ bv0 256)) (bvule x1 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x168) x93 (not (= x44 x73)) (bvuge x1 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x58) (not (= x151 x42)) (bvule (_ bv0 256) x166) x5 (= x73 x1) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x44) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x173) (= (bvult (_ bv0 256) (x7 x44)) x93) (bvule x106 (_ bv1461501637330902918203684832716283019655932542975 256))) (and (and (= x48 x164) (= (x7 x168) x124) (= x90 (x83 (_ bv64 256) x74 (_ bv169 256))) (= x68 (x140 x146)) (= x122 (_ bv2514325907 256)) (= (x84 x168) x164) (= x74 (bvand x77 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x146 x53) (= x68 x22) (bvuge x124 (_ bv1 256)) (= x32 (= x152 (_ bv0 256))) (= x152 (x157 x90))) (or (and (= x32 x105) x32) (and (and (= (= (_ bv0 256) x14) x105) (= x14 (x30 x88)) (= x88 (bvadd x90 (_ bv1 256)))) (not x32))))) x100)))
(assert (= x114 (and x105 x138)))
(assert (= (_ bv0 256) (x34 (_ bv340282366920938463463374607431768211455 256))))
(assert (not x19))
(assert (= x112 (and x138 (not x105))))
(assert (= x17 (or x54 x111)))
(assert (= (and (=> (and (= x148 (_ bv0 256)) x105) x91) (=> (and (and (and (= x47 (x157 x90)) (bvuge x65 (_ bv1 256)) (= x65 (x30 x15)) (= (= x47 (_ bv0 256)) x103) (= x15 (bvadd x90 (_ bv1 256)))) (or (and (not x103) (and (= (bvmul x144 x47) x56) (= x33 x56) (x149 x47 x144))) (and x103 (= (_ bv0 256) x33)))) (not x105)) x145)) x100))
(assert (= (x34 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (x34 (x83 (_ bv64 256) x74 (_ bv169 256))) (x83 (_ bv64 256) x74 (_ bv169 256))))
(assert (x163 (_ bv2514325907 256)))
(assert (=> (bvuge (_ bv10000 256) x73) (= (x34 x73) (_ bv0 256))))
(assert (= x91 (=> (= x2 (or (or (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x125) (bvule (_ bv0 256) x125))) (not (or (not (= (x78 x116 x125) (_ bv0 256))) (not (= (x162 x116 x125) (_ bv0 256))))) (not (= (x72 x125) (_ bv0 256)))) (not (and (bvuge x116 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x116))))) x2)))
(assert (=> (bvule x60 (_ bv10000 256)) (= (_ bv0 256) (x34 x60))))
(assert (= (x34 (bvadd (_ bv1 256) x90)) (x34 x90)))
(assert (= true x165))
(assert (=> (bvule x42 (_ bv10000 256)) (= (x34 x42) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x44) (= (x34 x44) (_ bv0 256))))
(assert (= x138 (or x92 x46)))
(assert (=> (bvule x146 (_ bv10000 256)) (= (x34 x146) (_ bv0 256))))
(assert x107)
(assert (=> (bvule x151 (_ bv10000 256)) (= (_ bv0 256) (x34 x151))))
(assert (=> (bvuge (_ bv10000 256) x99) (= (x34 x99) (_ bv0 256))))
(assert (x163 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x74 (x71 (x83 (_ bv64 256) x74 (_ bv169 256)))))
(assert (= (and x165 (not x32)) x46))
(assert (x163 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x81 (or x114 x17)))
(assert (bvugt (x83 (_ bv64 256) x74 (_ bv169 256)) (_ bv10000 256)))
(assert (=> (bvuge (_ bv10000 256) x74) (= (_ bv0 256) (x34 x74))))
(assert (=> (bvule x106 (_ bv10000 256)) (= (_ bv0 256) (x34 x106))))
(assert (= x92 (and x165 x32)))
(assert (x163 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (=> (bvule x168 (_ bv10000 256)) (= (_ bv0 256) (x34 x168))))
(assert (= (_ bv0 256) (x34 (_ bv2514325907 256))))
(assert (= (_ bv0 256) (x34 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (and (not x103) x112) x111))
(assert (x163 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x34 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (x43 (x83 (_ bv64 256) x74 (_ bv169 256))) (_ bv169 256)))
(assert (not (x163 (x83 (_ bv64 256) x74 (_ bv169 256)))))
(assert (= x54 (and x103 x112)))
(assert (bvult x21 (_ bv340282366920938463463374607431768211455 256)))
(assert (x163 (_ bv4294967295 256)))
(assert (= x145 (=> (and (= x156 (bvadd x65 (bvneg (_ bv1 256)))) (= x167 (_ bv1 256)) (= (_ bv192 256) x82) (= x109 (bvudiv x63 x65)) (= (bvadd x156 x33) x63) (= x109 x148) (= x174 (_ bv128 256)) (not (bvult (bvadd x33 x156) x33))) x91)))
(assert (= (_ bv64 256) (x137 (x83 (_ bv64 256) x74 (_ bv169 256)))))
(check-sat)
(exit)
