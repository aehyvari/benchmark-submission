(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x211 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x237 ((_ BitVec 256)) Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x297 () Bool)
(declare-fun x128 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x294 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x318 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x94 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x177 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x245 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x306 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x159 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x316 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x43 () Bool)
(declare-fun x225 () (_ BitVec 256))
(declare-fun x244 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x259 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x314 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x243 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x117 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x163 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x299 () (_ BitVec 256))
(declare-fun x308 () Bool)
(declare-fun x309 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x262 () Bool)
(declare-fun x149 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x303 () Bool)
(declare-fun x214 () Bool)
(declare-fun x228 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x152 () Bool)
(declare-fun x69 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x271 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x76 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x150 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x268 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x242 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x57 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x100 () Bool)
(declare-fun x213 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x89 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x124 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x2 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x24 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x114 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x311 () Bool)
(declare-fun x98 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x30 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x136 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x239 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x301 () Bool)
(define-fun x166 ((x113 (_ BitVec 256)) (x290 (_ BitVec 256))) Bool (= x113 (bvudiv (bvmul x290 x113) x290)))
(define-fun x202 ((x113 (_ BitVec 256)) (x290 (_ BitVec 256))) Bool (= x113 (bvsdiv (bvmul x113 x290) x290)))
(define-fun x104 ((x113 (_ BitVec 256)) (x290 (_ BitVec 256))) Bool (= x113 (bvsdiv (bvmul x290 x113) x290)))
(define-fun x42 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x59 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x162 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x223 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x187 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x144 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x26 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x45 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x288 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x313 ((x235 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x63 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 x170) x296 (x98 x235)))
(define-fun x273 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 x61) x40 (x63 x235)))
(define-fun x277 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv128 256)) (_ bv1 256) (x42 x235)))
(define-fun x20 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv192 256)) (_ bv0 256) (x162 x235)))
(define-fun x258 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv224 256)) (_ bv0 256) (x187 x235)))
(define-fun x56 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x235) (_ bv0 256) (x26 x235)))
(define-fun x161 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv160 256)) (_ bv192 256) (x288 x235)))
(define-fun x279 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x235) x61 (x20 x235)))
(define-fun x17 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv320 256)) x139 (x258 x235)))
(define-fun x37 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv352 256)) x130 (x56 x235)))
(define-fun x5 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x235) (_ bv288 256) (x161 x235)))
(define-fun x226 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x159 x235) x253 (x273 x235)))
(define-fun x146 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 x260) x178 (x226 x235)))
(define-fun x88 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x55 x235) x27 (x314 x235)))
(define-fun x227 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 x235) x197 (x146 x235)))
(define-fun x181 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv128 256)) (_ bv1 256) (x59 x235)))
(define-fun x4 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv192 256)) (_ bv0 256) (x223 x235)))
(define-fun x172 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv224 256)) (_ bv0 256) (x144 x235)))
(define-fun x231 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x235) (_ bv0 256) (x45 x235)))
(define-fun x272 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 (_ bv160 256)) (_ bv192 256) (x313 x235)))
(define-fun x234 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x235) x61 (x4 x235)))
(define-fun x129 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x235) x210 (x172 x235)))
(define-fun x269 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x235) x130 (x231 x235)))
(define-fun x127 ((x235 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x235) (_ bv288 256) (x272 x235)))
(assert (not (x237 (x245 (_ bv64 256) x309 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x108) (= (_ bv0 256) (x239 x108))))
(assert (= (x239 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (x239 (x245 (_ bv64 256) x240 (_ bv2 256))) (x245 (_ bv64 256) x240 (_ bv2 256))))
(assert (= (_ bv64 256) (x89 (x245 (_ bv64 256) x315 (_ bv0 256)))))
(assert (=> (bvule x3 (_ bv10000 256)) (= (x239 x3) (_ bv0 256))))
(assert (= (x94 (x245 (_ bv64 256) x156 x143)) x156))
(assert (= (x239 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x89 (x245 (_ bv64 256) x240 (_ bv2 256)))))
(assert (= (_ bv2 256) (x2 (x245 (_ bv64 256) x147 (_ bv2 256)))))
(assert (= x74 (=> (and (= (not (bvugt x241 (_ bv1 256))) x303) (x166 x119 x281) (= (bvmul x281 x119) x16) (= (x177 x255) x15) (= (x127 (_ bv160 256)) x9) (= (x129 x83) x119) (= x255 (x245 (_ bv64 256) x156 x143)) (not (bvugt x281 x99)) (= (bvadd (_ bv1 256) x167) x143) (bvuge x16 (_ bv0 256)) (= x256 (bvudiv x16 (_ bv1000000000000000000 256))) (= x83 (bvadd (_ bv32 256) x9)) (= (x181 (_ bv128 256)) x241) (= x281 (bvadd x99 (bvneg x15))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x16)) (and (=> (= x256 x70) x122) x303))))
(assert (=> (bvuge (_ bv10000 256) x240) (= (x239 x240) (_ bv0 256))))
(assert (not (x237 (x245 (_ bv64 256) x315 x189))))
(assert (= x189 (x2 (x245 (_ bv64 256) x315 x189))))
(assert (x237 (_ bv1289409798 256)))
(assert (= (and (not x69) x24) x79))
(assert (bvult (_ bv10000 256) (x245 (_ bv64 256) x315 (_ bv0 256))))
(assert (not (x237 (x245 (_ bv64 256) x3 x222))))
(assert (= x30 (=> (and (bvuge x180 (_ bv0 256)) (= x125 (bvadd x236 x18)) (= x66 (bvadd x135 (bvneg x116))) (= (bvmul x66 x196) x180) (= x99 x125) (= x236 (bvudiv x247 x6)) (not (bvult x135 x66)) (or x49 x137) (= (= (_ bv0 256) x92) x49) (= x180 x92) (= (bvudiv x247 x92) x102) (= x137 (= (_ bv1000000000000000000 256) x102)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x180) (x166 x196 x66) (bvuge x6 (_ bv1 256)) (= (bvmul x92 (_ bv1000000000000000000 256)) x247) (not (bvugt x236 (bvadd x18 x236)))) x74)))
(assert (not (x237 (x245 (_ bv64 256) x156 x143))))
(assert (=> (bvule x170 (_ bv10000 256)) (= (x239 x170) (_ bv0 256))))
(assert (= (_ bv0 256) (x239 (_ bv599290589 256))))
(assert (= x48 (or x221 x52)))
(assert (= x182 (and x308 x60)))
(assert (not (x237 (x245 (_ bv64 256) x147 (_ bv2 256)))))
(assert (= x318 (and (not x312) x68)))
(assert (= x25 (and x132 x48)))
(assert (= (or x109 x318) x164))
(assert (= (=> (= x301 (ite x28 x28 (not (bvult x116 x185)))) (and (=> (and x301 (= x18 x99)) x74) (=> (and (not x301) (and (= (bvugt x264 x185) x69) (or (and x69 (= x185 x135)) (and (not x69) (= x135 x264))))) x30))) x150))
(assert (x237 (_ bv599290589 256)))
(assert (= (x89 (x245 (_ bv64 256) x156 (_ bv61 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x239 (_ bv4294967295 256))))
(assert (= (x2 (x245 (_ bv64 256) x240 (_ bv2 256))) (_ bv2 256)))
(assert (x237 (_ bv1000000000000000000 256)))
(assert (= (x239 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x94 (x245 (_ bv64 256) x147 (_ bv3 256))) x147))
(assert (= (and x297 x85) x213))
(assert (bvugt (x245 (_ bv64 256) x108 (_ bv60 256)) (_ bv10000 256)))
(assert (not (x237 (x245 (_ bv64 256) x108 (_ bv60 256)))))
(assert (= (x239 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (x239 (_ bv1289409798 256)) (_ bv0 256)))
(assert (= x259 (and x211 x25)))
(assert (= (x239 (x245 (_ bv64 256) x147 (_ bv3 256))) (x245 (_ bv64 256) x147 (_ bv3 256))))
(assert (x237 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x245 (_ bv64 256) x156 x143) (x239 (x245 (_ bv64 256) x156 x143))))
(assert (x237 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (_ bv60 256) (x2 (x245 (_ bv64 256) x108 (_ bv60 256)))))
(assert (=> (bvule x1 (_ bv10000 256)) (= (_ bv0 256) (x239 x1))))
(assert (bvult (_ bv10000 256) (x245 (_ bv64 256) x315 (_ bv61 256))))
(assert (= (_ bv64 256) (x89 (x245 (_ bv64 256) x315 x189))))
(assert (= (x239 (bvadd x51 (_ bv1 256))) (x239 x51)))
(assert (bvugt (x245 (_ bv64 256) x309 (_ bv0 256)) (_ bv10000 256)))
(assert (= x101 (=> (and (and (not (bvugt x112 (bvadd x34 x112))) (= x11 (x245 (_ bv64 256) x315 (_ bv61 256))) (= (x76 x11) x112) (= x32 (_ bv36 256)) (= x126 x19) (= x299 (bvadd x112 x34)) (= x134 (x136 x61)) (= x53 (_ bv4 256)) (bvuge x134 (_ bv1 256)) (= (_ bv404098525 256) x306) (= x299 x252) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x130)) (and (and (and (bvuge x295 (_ bv1 256)) (= (_ bv1289409798 256) x186) (= x130 x29) (= x29 x266) (= x194 (bvmul x29 (_ bv1000000000000000000 256))) (= (bvudiv x194 (_ bv1000000000000000000 256)) x120) (bvuge x154 (_ bv1 256)) (bvule x295 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x154 (x136 x61)) (= x120 x29) (= (bvudiv x194 x295) x148) (= (_ bv36 256) x21)) (and (and (bvule x147 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x240 x61) (= (x117 (_ bv68 256)) x121) (= (x136 x260) x10) (bvuge x10 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x184) (= (x314 x229) x33) (= x95 x121) (= x118 (bvuge x33 x148)) (= x195 (_ bv1889567281 256)) (= (x245 (_ bv64 256) x240 (_ bv2 256)) x229) (= x147 x142) (= (x117 (_ bv4 256)) x147) (= x50 x184) x118 (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x44) (= x184 (x117 (_ bv36 256))) (bvule (_ bv100 256) x44) (= x251 x240)) (and (= x3 x157) (and (and (= x156 x286) (and (= x264 x284) (and (= (x124 x84) x210) (= x84 (x245 (_ bv64 256) x156 (_ bv0 256))) (= x263 (_ bv2378104546 256)) (bvuge (_ bv20282409603651670423947251286015 256) x210) (= (x146 x158) x197) (= (x136 x61) x225) (= x64 x197) (= (_ bv128 256) x275) (= x107 x35) (= x157 x158) (= (bvult (_ bv0 256) x218) x132) (= x219 x156) (= (x181 (_ bv128 256)) x218) (= (x227 x61) x107) (bvule (_ bv1 256) x225)))) (and (not (bvult (bvadd x265 x121) x265)) (= (x273 x159) x253) (= (x245 (_ bv64 256) x147 (_ bv2 256)) x55) (= (x136 x260) x123) (= x178 x198) (= x292 (_ bv36 256)) (= x142 x248) (= x190 (bvadd x121 x265)) (not (bvugt x153 x304)) (= x304 (x271 x47)) (= x265 (x88 x90)) (= (x245 (_ bv64 256) x184 (_ bv2 256)) x90) (= x286 x19) (= x47 (x245 (_ bv64 256) x3 x222)) (= x222 (x245 (_ bv64 256) x147 (_ bv3 256))) (not (bvugt x121 x232)) (= (x245 (_ bv64 256) x147 (_ bv2 256)) x86) (= (x226 x260) x198) (= x157 x159) (= x153 (bvadd (bvneg x121) x304)) (bvuge x123 (_ bv1 256)) (= (x314 x86) x232) (= x80 x95) (= (_ bv599290589 256) x179) (= x215 x50) (not (bvugt x121 x304)) (= x253 x192) (not (bvugt x265 (bvadd x121 x265))) (= (bvadd x232 (bvneg x121)) x27) (not (bvult x232 x27))))))) (and (= x267 (x245 (_ bv64 256) x309 (_ bv0 256))) (= x38 (_ bv4 256)) (= x176 (_ bv404098525 256)) (= x305 (x136 x61)) (= x128 (bvuge x130 x257)) x128 (= x249 x309) (= x257 (x124 x267)) (= x126 x309) (bvuge x305 (_ bv1 256)) (= (x136 x61) x246) (= (_ bv1889567281 256) x91) (= (_ bv36 256) x36) (bvule x257 (_ bv20282409603651670423947251286015 256)) (bvule (_ bv1 256) x246)))) (and (=> (and (= x70 (_ bv0 256)) (not x132)) x122) (=> (and x132 (and (or (and x211 (= x28 x211)) (and (= (= x116 x264) x28) (not x211))) (and (= x116 (x294 x51)) (bvule x196 (_ bv340282366920938463463374607431768211455 256)) (= x108 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x274)) (= x167 (bvadd (_ bv1 256) x51)) (bvule x116 (_ bv340282366920938463463374607431768211455 256)) (= x51 (x245 (_ bv64 256) x108 (_ bv60 256))) (= x6 (x269 x103)) (= x211 (ite (= (_ bv0 256) x196) (= x196 (_ bv0 256)) (= x6 (_ bv0 256)))) (= x196 (x114 x51)) (= (x127 (_ bv160 256)) x71) (= (bvadd x62 (_ bv64 256)) x103) (= x18 (x163 x167)) (= x274 (x234 x71)) (= x62 (x127 (_ bv160 256)))))) x150)))))
(assert (=> (bvuge (_ bv10000 256) x159) (= (x239 x159) (_ bv0 256))))
(assert (bvugt (x245 (_ bv64 256) x315 x189) (_ bv10000 256)))
(assert (= (x2 (x245 (_ bv64 256) x315 (_ bv0 256))) (_ bv0 256)))
(assert (= (x245 (_ bv64 256) x315 x189) (x239 (x245 (_ bv64 256) x315 x189))))
(assert (=> (bvule x156 (_ bv10000 256)) (= (x239 x156) (_ bv0 256))))
(assert (= (_ bv0 256) (x2 (x245 (_ bv64 256) x309 (_ bv0 256)))))
(assert (= x156 (x94 (x245 (_ bv64 256) x156 (_ bv0 256)))))
(assert (= x214 true))
(assert (not (x237 (x245 (_ bv64 256) x184 (_ bv2 256)))))
(assert (=> (bvule x309 (_ bv10000 256)) (= (x239 x309) (_ bv0 256))))
(assert (=> (bvule x260 (_ bv10000 256)) (= (_ bv0 256) (x239 x260))))
(assert (= (or x31 x230) x311))
(assert (= x156 (x94 (x245 (_ bv64 256) x156 (_ bv61 256)))))
(assert (= x147 (x94 (x245 (_ bv64 256) x147 (_ bv2 256)))))
(assert (= (_ bv64 256) (x89 (x245 (_ bv64 256) x147 (_ bv3 256)))))
(assert (x237 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (x239 (x245 (_ bv64 256) x184 (_ bv2 256))) (x245 (_ bv64 256) x184 (_ bv2 256))))
(assert (= (x94 (x245 (_ bv64 256) x315 (_ bv0 256))) x315))
(assert (= (=> (and (= x205 (bvmul x105 (_ bv1000000000000000000 256))) (bvuge x145 (_ bv1 256)) (= (bvudiv x205 x145) x39) (= x300 (bvmul x220 x307)) (not (bvugt x39 (bvadd x39 x93))) (= x310 x110) (= x220 (bvadd x115 (bvneg x175))) (= (= x105 (_ bv0 256)) x133) (or x133 x289) (bvuge x300 (_ bv0 256)) (= x160 (bvudiv x205 x105)) (x166 x307 x220) (= x300 x105) (= (bvadd x39 x93) x110) (= x289 (= x160 (_ bv1000000000000000000 256))) (not (bvult x115 x220)) (bvule x300 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))) x204) x283))
(assert (= (x245 (_ bv64 256) x147 (_ bv2 256)) (x239 (x245 (_ bv64 256) x147 (_ bv2 256)))))
(assert (not (x237 (x245 (_ bv64 256) x240 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x245 (_ bv64 256) x147 (_ bv2 256))))
(assert (= (x89 (x245 (_ bv64 256) x156 (_ bv0 256))) (_ bv64 256)))
(assert (bvugt (x245 (_ bv64 256) x156 (_ bv0 256)) (_ bv10000 256)))
(assert (= x184 (x94 (x245 (_ bv64 256) x184 (_ bv2 256)))))
(assert (bvugt (x245 (_ bv64 256) x156 (_ bv61 256)) (_ bv10000 256)))
(assert (x237 (_ bv2378104546 256)))
(assert (= (=> (and (and (and (= x284 x238) (and (= x40 x67) (bvuge (_ bv20282409603651670423947251286015 256) x139) (bvuge x183 (_ bv1 256)) (= (x245 (_ bv64 256) x315 (_ bv0 256)) x316) (= x296 x276) (= x296 (x98 x170)) (= (_ bv128 256) x96) (= (_ bv2378104546 256) x168) (= (x124 x316) x139) (= (x63 x61) x67) (= x183 (x136 x61)) (= (bvugt x302 (_ bv0 256)) x242) (= x157 x170) (= (x277 (_ bv128 256)) x302) (= x224 x315))) (= x171 x315)) (and (not (= x61 x260)) (not (= x260 x254)) (bvuge x260 (_ bv1 256)) (bvule x282 (_ bv4294967295 256)) x43 (bvule (_ bv0 256) x141) (= (_ bv0 256) x58) (bvule (_ bv0 256) x188) (bvuge x282 (_ bv0 256)) (bvule x138 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x23 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x61) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x254) (bvuge x140 (_ bv0 256)) (bvule (_ bv0 256) x284) (bvule x54 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x106 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x141) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x65) (bvule (_ bv0 256) x23) (not (= x61 x254)) (bvule (_ bv1 256) x254) (bvule (_ bv0 256) x54) (bvuge x157 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x157) (bvuge x65 (_ bv0 256)) (= x43 (bvugt (x136 x260) (_ bv0 256))) (= x111 (_ bv36 256)) (= (bvult (_ bv0 256) (x136 x254)) x106) (bvule x284 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x188) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x19) (bvuge x19 (_ bv0 256)) (= x171 x19) x317 (bvule (_ bv0 256) x138) (bvuge x72 (_ bv0 256)) (= (bvult (_ bv0 256) (x136 x61)) x317) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x72) (bvule x140 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x260 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x61))) (and (=> (and x242 (and (or (and (= x270 (= x175 x238)) (not x85)) (and x85 (= x85 x270))) (and (= x209 (x245 (_ bv64 256) x1 (_ bv60 256))) (= (x279 x206) x87) (= x307 (x114 x209)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x87) x1) (= x212 (bvadd x209 (_ bv1 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x307) (bvuge (_ bv340282366920938463463374607431768211455 256) x175) (= x280 (bvadd (_ bv64 256) x233)) (= x145 (x37 x280)) (= (ite (= x307 (_ bv0 256)) (= (_ bv0 256) x307) (= (_ bv0 256) x145)) x85) (= x93 (x163 x212)) (= x175 (x294 x209)) (= (x5 (_ bv160 256)) x206) (= x233 (x5 (_ bv160 256)))))) x149) (=> (and (= x34 (_ bv0 256)) (not x242)) x101))) x262))
(assert (=> (bvuge (_ bv10000 256) x184) (= (_ bv0 256) (x239 x184))))
(assert (bvugt (x245 (_ bv64 256) x147 (_ bv3 256)) (_ bv10000 256)))
(assert (= (or x213 x268) x60))
(assert (x237 (_ bv4294967295 256)))
(assert (= (x2 (x245 (_ bv64 256) x156 x143)) x143))
(assert (= (and x297 (not x85)) x268))
(assert (bvugt (x245 (_ bv64 256) x3 x222) (_ bv10000 256)))
(assert (= (x2 (x245 (_ bv64 256) x184 (_ bv2 256))) (_ bv2 256)))
(assert (not (x237 (x245 (_ bv64 256) x147 (_ bv3 256)))))
(assert (= x31 (and x301 x169)))
(assert (= x109 (and x312 x68)))
(assert (not (x237 (x245 (_ bv64 256) x156 (_ bv0 256)))))
(assert (= (x245 (_ bv64 256) x315 (_ bv61 256)) (x239 (x245 (_ bv64 256) x315 (_ bv61 256)))))
(assert (= (x2 (x245 (_ bv64 256) x1 (_ bv60 256))) (_ bv60 256)))
(assert (= (_ bv61 256) (x2 (x245 (_ bv64 256) x156 (_ bv61 256)))))
(assert (not (x237 (x245 (_ bv64 256) x1 (_ bv60 256)))))
(assert (= (and x169 (not x301)) x24))
(assert (= (x2 (x245 (_ bv64 256) x3 x222)) x222))
(assert (= (_ bv0 256) (x2 (x245 (_ bv64 256) x156 (_ bv0 256)))))
(assert (= (_ bv0 256) (x239 (_ bv115792089237316195423570985008687907853269984665640564039457 256))))
(assert (= (and (not x211) x25) x228))
(assert (= (x239 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= x174 (and x24 x69)))
(assert (= x68 (and (not x308) x60)))
(assert (= (=> (and (= (x177 x14) x173) (bvule x261 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (bvadd x310 (bvneg x173)) x191) (= (bvudiv x261 (_ bv1000000000000000000 256)) x73) (= (not (bvult (_ bv1 256) x203)) x152) (not (bvugt x191 x310)) (= (x245 (_ bv64 256) x315 x189) x14) (= x203 (x277 (_ bv128 256))) (= (bvmul x191 x81) x261) (x166 x81 x191) (= (bvadd x212 (_ bv1 256)) x189) (= (bvadd x216 (_ bv32 256)) x217) (= (x17 x217) x81) (bvuge x261 (_ bv0 256)) (= x216 (x5 (_ bv160 256)))) (and (=> (= x73 x34) x101) x152)) x204))
(assert (= x315 (x94 (x245 (_ bv64 256) x315 x189))))
(assert (= (and x242 x214) x297))
(assert (not (x237 (x245 (_ bv64 256) x315 (_ bv61 256)))))
(assert (=> (bvule x254 (_ bv10000 256)) (= (_ bv0 256) (x239 x254))))
(assert (x237 (_ bv404098525 256)))
(assert (= (x245 (_ bv64 256) x315 (_ bv0 256)) (x239 (x245 (_ bv64 256) x315 (_ bv0 256)))))
(assert (= (x239 (x245 (_ bv64 256) x156 (_ bv0 256))) (x245 (_ bv64 256) x156 (_ bv0 256))))
(assert (= (x239 (x245 (_ bv64 256) x1 (_ bv60 256))) (x245 (_ bv64 256) x1 (_ bv60 256))))
(assert (bvugt (x245 (_ bv64 256) x156 x143) (_ bv10000 256)))
(assert (= (x239 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (x2 (x245 (_ bv64 256) x147 (_ bv3 256))) (_ bv3 256)))
(assert (x237 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x89 (x245 (_ bv64 256) x108 (_ bv60 256))) (_ bv64 256)))
(assert (= (x89 (x245 (_ bv64 256) x147 (_ bv2 256))) (_ bv64 256)))
(assert (= (_ bv64 256) (x89 (x245 (_ bv64 256) x156 x143))))
(assert (= (=> (= (ite x270 x270 (not (bvult x175 x185))) x308) (and (=> (and (not x308) (and (= (bvult x185 x238) x312) (or (and x312 (= x115 x185)) (and (= x115 x238) (not x312))))) x283) (=> (and x308 (= x93 x310)) x204))) x149))
(assert (= x309 (x94 (x245 (_ bv64 256) x309 (_ bv0 256)))))
(assert (= (x94 (x245 (_ bv64 256) x315 (_ bv61 256))) x315))
(assert (x237 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= (_ bv61 256) (x2 (x245 (_ bv64 256) x315 (_ bv61 256)))))
(assert (= (x89 (x245 (_ bv64 256) x1 (_ bv60 256))) (_ bv64 256)))
(assert (=> (bvule x147 (_ bv10000 256)) (= (_ bv0 256) (x239 x147))))
(assert (not x262))
(assert (bvult (_ bv10000 256) (x245 (_ bv64 256) x184 (_ bv2 256))))
(assert (= (=> (and (= x12 (bvule x252 x77)) (= (bvadd x70 x7) x207) (= x7 (x76 x199)) (= x199 (x245 (_ bv64 256) x156 (_ bv61 256))) (not (bvult (bvadd x7 x70) x7)) (= x207 x77)) x12) x122))
(assert (not (x237 (x245 (_ bv64 256) x315 (_ bv0 256)))))
(assert (= (x94 (x245 (_ bv64 256) x108 (_ bv60 256))) x108))
(assert (= (x239 (_ bv2378104546 256)) (_ bv0 256)))
(assert (= (x89 (x245 (_ bv64 256) x315 (_ bv61 256))) (_ bv64 256)))
(assert (= (or x79 x174) x230))
(assert (= (x239 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (bvugt (x245 (_ bv64 256) x1 (_ bv60 256)) (_ bv10000 256)))
(assert (x237 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (or x311 x22) x293))
(assert (x237 (_ bv20282409603651670423947251286015 256)))
(assert (= (x239 (x245 (_ bv64 256) x309 (_ bv0 256))) (x245 (_ bv64 256) x309 (_ bv0 256))))
(assert (= (x239 x212) (x239 (bvadd x212 (_ bv1 256)))))
(assert (= (x245 (_ bv64 256) x156 (_ bv61 256)) (x239 (x245 (_ bv64 256) x156 (_ bv61 256)))))
(assert (bvugt (x245 (_ bv64 256) x240 (_ bv2 256)) (_ bv10000 256)))
(assert (=> (bvuge (_ bv10000 256) x158) (= (_ bv0 256) (x239 x158))))
(assert (= (or x182 x164) x52))
(assert (= x3 (x94 (x245 (_ bv64 256) x3 x222))))
(assert (= (x239 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x237 (_ bv1889567281 256)))
(assert (= (x94 (x245 (_ bv64 256) x1 (_ bv60 256))) x1))
(assert (= (_ bv0 256) (x239 (_ bv1000000000000000000 256))))
(assert (= (x245 (_ bv64 256) x3 x222) (x239 (x245 (_ bv64 256) x3 x222))))
(assert (=> (bvule x315 (_ bv10000 256)) (= (x239 x315) (_ bv0 256))))
(assert (= x169 (or x259 x228)))
(assert (=> (bvuge (_ bv10000 256) x61) (= (_ bv0 256) (x239 x61))))
(assert (= x221 (and (not x242) x214)))
(assert (= (x89 (x245 (_ bv64 256) x184 (_ bv2 256))) (_ bv64 256)))
(assert (= (x239 (bvadd x209 (_ bv1 256))) (x239 x209)))
(assert (= (_ bv64 256) (x89 (x245 (_ bv64 256) x3 x222))))
(assert (= (x239 (bvadd x167 (_ bv1 256))) (x239 x167)))
(assert (not (x237 (x245 (_ bv64 256) x156 (_ bv61 256)))))
(assert (= (x94 (x245 (_ bv64 256) x240 (_ bv2 256))) x240))
(assert (= (and (not x132) x48) x22))
(assert (= (x239 (x245 (_ bv64 256) x108 (_ bv60 256))) (x245 (_ bv64 256) x108 (_ bv60 256))))
(assert (= (_ bv64 256) (x89 (x245 (_ bv64 256) x309 (_ bv0 256)))))
(check-sat)
(exit)
