(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x3 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x27 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x51 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x59 ((_ BitVec 256)) Bool)
(declare-fun x17 () Bool)
(declare-fun x11 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x98 () Bool)
(declare-fun x26 () Bool)
(declare-fun x22 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x20 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x88 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x82 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x16 () Bool)
(declare-fun x74 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(define-fun x50 ((x79 (_ BitVec 256)) (x44 (_ BitVec 256))) Bool (= x79 (bvudiv (bvmul x44 x79) x44)))
(define-fun x57 ((x79 (_ BitVec 256)) (x44 (_ BitVec 256))) Bool (= x79 (bvsdiv (bvmul x79 x44) x44)))
(define-fun x1 ((x79 (_ BitVec 256)) (x44 (_ BitVec 256))) Bool (= x79 (bvsdiv (bvmul x44 x79) x44)))
(define-fun x58 ((x72 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x73 ((x72 (_ BitVec 256))) (_ BitVec 256) (ite (= x72 x7) x76 (x20 x72)))
(define-fun x86 ((x72 (_ BitVec 256))) (_ BitVec 256) (ite (= x72 (_ bv128 256)) (_ bv44748634062638667835450072450752148935793600024708435236042719116257543585792 256) (x58 x72)))
(define-fun x61 ((x72 (_ BitVec 256))) (_ BitVec 256) (ite (= x72 (_ bv132 256)) x34 (x86 x72)))
(define-fun x56 ((x72 (_ BitVec 256))) (_ BitVec 256) (ite (= x72 (_ bv164 256)) x52 (x61 x72)))
(define-fun x8 ((x72 (_ BitVec 256))) (_ BitVec 256) (ite (= x72 (_ bv196 256)) x15 (x56 x72)))
(define-fun x97 ((x72 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x72) x55 (x8 x72)))
(assert (=> (bvule x2 (_ bv10000 256)) (= (x51 x2) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x41) (= (x51 x41) (_ bv0 256))))
(assert (= (x51 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (=> (bvule x92 (_ bv10000 256)) (= (x51 x92) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x66) (= (x51 x66) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x47) (= (_ bv0 256) (x51 x47))))
(assert (=> (bvule x62 (_ bv10000 256)) (= (x51 x62) (_ bv0 256))))
(assert (x59 (_ bv98680204 256)))
(assert (= (_ bv0 256) (x51 (_ bv44748634062638667835450072450752148935793600024708435236042719116257543585792 256))))
(assert (= x12 true))
(assert (= (x51 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (x59 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (=> (bvule x19 (_ bv10000 256)) (= (_ bv0 256) (x51 x19))))
(assert (=> (bvule x81 (_ bv10000 256)) (= (_ bv0 256) (x51 x81))))
(assert (=> (bvule x80 (_ bv10000 256)) (= (_ bv0 256) (x51 x80))))
(assert (x59 (_ bv1000000000000000000 256)))
(assert (= (_ bv0 256) (x51 (_ bv4294967295 256))))
(assert (x59 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (=> (bvuge (_ bv10000 256) x65) (= (_ bv0 256) (x51 x65))))
(assert (=> (bvuge (_ bv10000 256) x7) (= (_ bv0 256) (x51 x7))))
(assert (x59 (_ bv1659819087 256)))
(assert (x59 (_ bv44748634062638667835450072450752148935793600024708435236042719116257543585792 256)))
(assert (=> (bvuge (_ bv10000 256) x5) (= (_ bv0 256) (x51 x5))))
(assert (= (_ bv0 256) (x51 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x51 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (x59 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (=> (bvuge (_ bv10000 256) x48) (= (x51 x48) (_ bv0 256))))
(assert (= (x51 (_ bv1659819087 256)) (_ bv0 256)))
(assert (=> (bvule x31 (_ bv10000 256)) (= (_ bv0 256) (x51 x31))))
(assert (x59 (_ bv4294967295 256)))
(assert (not x24))
(assert (=> (bvuge (_ bv10000 256) x71) (= (x51 x71) (_ bv0 256))))
(assert (= (_ bv0 256) (x51 (_ bv98680204 256))))
(assert (= (not (and (not (= x65 x41)) (not (= x65 x31)) (bvule x19 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x80 x81)) (= x75 (_ bv98680204 256)) (not (= x31 x2)) (x50 x34 x15) (not (= x80 x48)) (= x85 x42) (not (= x19 x41)) (not (= x47 x81)) (not (= x5 x66)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x31) (= x33 (x73 x80)) (bvule x71 (_ bv1461501637330902918203684832716283019655932542975 256)) x98 (not (= x5 x62)) (bvule x70 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x31 x5)) (not (= x19 x5)) (= x22 (bvult (_ bv0 256) (x27 x2))) (bvuge x71 (_ bv1 256)) (bvule (_ bv0 256) x78) (= x16 (bvult (_ bv0 256) (x27 x66))) (not (= x92 x41)) (= (_ bv0 256) x82) (= x68 (_ bv44748634062638667835450072450752148935793600024708435236042719116257543585792 256)) (not (= x47 x92)) (not (= x47 x41)) (bvule x78 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x92 x5)) (not (= x2 x5)) (bvule x49 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x64 x39) (= (bvult (_ bv0 256) (x27 x80)) x88) x40 (bvuge x70 (_ bv0 256)) (bvuge x91 (_ bv1 256)) (not (= x65 x5)) (bvuge x2 (_ bv1 256)) (not (= x81 x19)) x32 (= x54 x94) (not (= x92 x80)) x17 (bvuge x63 (_ bv0 256)) (not (= x71 x65)) (= x63 x23) (not (= x2 x81)) x88 (not (= x71 x31)) (= (bvmul x52 x23) x14) (= (bvugt (x27 x31) (_ bv0 256)) x98) (not (= x31 x48)) (= (bvugt (x27 x81) (_ bv0 256)) x26) (not (= x71 x41)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x89) (not (= x47 x31)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x65) (not (= x2 x48)) (= x76 (x20 x7)) (= x55 (bvudiv x14 (_ bv1000000000000000000 256))) (bvule x5 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x100 (_ bv0 256)) x16 x29 x74 (bvule x80 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x100) (bvule (_ bv0 256) x89) (not (= x81 x66)) (= x29 (bvugt (x27 x5) (_ bv0 256))) (not (= x81 x92)) (bvuge x80 (_ bv1 256)) (bvuge x62 (_ bv1 256)) x11 (not (= x92 x31)) (= x60 x7) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x63) (bvule x66 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x81 x31)) (not (= x2 x71)) x26 (not (= x71 x81)) (not (= x66 x47)) (bvuge x5 (_ bv1 256)) (= x30 x54) (= x74 (bvult (_ bv0 256) (x27 x92))) (not (= x19 x2)) (not (= x41 x81)) (not (= x66 x48)) (not (= x66 x2)) (bvule (_ bv0 256) x10) (= x40 (bvugt (x27 x48) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x47) (bvule x81 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x80 x19)) (not (= x66 x80)) (not (= x48 x19)) (= (bvmul x15 x34) x63) (= x46 x28) (= x46 x15) (bvuge x92 (_ bv1 256)) (not (= x81 x5)) (bvule x93 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x46 x67) (= x18 (x27 x80)) (bvule x48 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x47 x48)) (bvule (_ bv1 256) x19) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x2) (= x34 (x3 (_ bv4 256))) (bvule (_ bv1 256) x81) (= x35 (bvugt (x27 x65) (_ bv0 256))) x21 (not (= x48 x71)) (not (= x66 x92)) (not (= x66 x62)) (not (= x2 x80)) (= x37 (_ bv128 256)) (not (= x19 x92)) (not (= x80 x5)) (= x96 (ite (bvugt x23 x87) x52 (_ bv0 256))) (= x54 x34) (= x28 x85) x77 (bvule (_ bv1 256) x41) (not (= x47 x19)) (not (= x65 x62)) (bvule x95 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x81 x48)) (not (= x5 x48)) (bvule x10 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x77 (bvugt (x27 x47) (_ bv0 256))) (bvule (_ bv1 256) x65) (= x84 (_ bv0 256)) (not (= x62 x71)) (bvule x25 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x71 x66)) (not (= x66 x19)) (bvuge (_ bv4294967295 256) x36) (not (= x41 x2)) (= x32 (bvult (_ bv0 256) (x27 x19))) (bvule (_ bv1 256) x47) (= (_ bv100 256) x69) (= x6 x30) (bvuge x31 (_ bv1 256)) (not (= x19 x31)) (not (= x65 x47)) (not (= x81 x65)) (not (= x48 x41)) (= x76 x53) (not (= x66 x41)) x35 (= x4 x39) (bvuge x45 (_ bv0 256)) (bvule x41 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x93 (_ bv100 256)) (not (= x62 x81)) (bvule (_ bv1 256) x66) (not (= x62 x31)) (= x52 x39) (not (= x62 x19)) (= x52 (x3 (_ bv36 256))) (not (= x65 x19)) (not (= x65 x80)) (bvule x92 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x31 x80)) (= (x27 x80) x91) (bvule (_ bv1 256) x48) (not (= x47 x71)) (bvule (_ bv0 256) x36) (not (= x2 x65)) (not (= x92 x71)) (not (= x71 x80)) (not (= x47 x62)) (= (bvudiv (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x52) x87) (= x13 x6) (not (= x92 x65)) (= (bvugt (x27 x71) (_ bv0 256)) x11) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x60) (= x64 x9) (not (= x5 x71)) (not (= x48 x92)) (= x38 x9) (not (= x92 x2)) (= (_ bv0 256) x96) (= x17 (bvult (_ bv0 256) (x27 x62))) (= x33 x43) (= (bvugt (x27 x41) (_ bv0 256)) x21) (bvule x45 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x48 x65)) (bvuge x18 (_ bv1 256)) (not (= x41 x5)) (bvule x62 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x25 (_ bv0 256)) (not (= x47 x5)) (not (= x62 x41)) (not (= x71 x19)) (not (= x31 x66)) (= (x97 (_ bv128 256)) x83) (bvule (_ bv0 256) x95) x22 (not (= x66 x65)) (not (= x80 x41)) (not (= x41 x31)) (not (= x47 x2)) (bvule (_ bv0 256) x60) (not (= x48 x62)) (= x15 (x3 (_ bv68 256))) (not (= x80 x62)) (not (= x47 x80)) (not (= x62 x2)) (= (_ bv1659819087 256) x99) (not (= x92 x62)) (bvuge x49 (_ bv0 256)))) x24))
(check-sat)
(exit)
