(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x41 () Bool)
(declare-fun x145 () Bool)
(declare-fun x147 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x173 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x49 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x127 () Bool)
(declare-fun x210 () Bool)
(declare-fun x191 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x83 () Bool)
(declare-fun x135 () Bool)
(declare-fun x169 () Bool)
(declare-fun x27 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x61 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x23 () Bool)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x8 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x200 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x216 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x132 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x159 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x24 () Bool)
(declare-fun x180 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x126 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x178 () Bool)
(declare-fun x153 () Bool)
(declare-fun x184 () Bool)
(declare-fun x181 () Bool)
(declare-fun x90 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x208 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x118 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x214 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x93 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x74 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x193 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x154 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x111 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x204 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x12 () Bool)
(declare-fun x35 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x11 ((_ BitVec 256)) Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x183 () Bool)
(declare-fun x185 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x2 () (_ BitVec 256))
(define-fun x89 ((x44 (_ BitVec 256)) (x119 (_ BitVec 256))) Bool (= x44 (bvudiv (bvmul x119 x44) x119)))
(define-fun x113 ((x44 (_ BitVec 256)) (x119 (_ BitVec 256))) Bool (= x44 (bvsdiv (bvmul x44 x119) x119)))
(define-fun x166 ((x44 (_ BitVec 256)) (x119 (_ BitVec 256))) Bool (= x44 (bvsdiv (bvmul x119 x44) x119)))
(define-fun x175 ((x131 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x106 ((x131 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x212 ((x131 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x64 ((x131 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x125 ((x131 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x144 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (bvugt x202 x131) (x90 x131) (_ bv0 256)))
(define-fun x84 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv0 256) x131) (bvugt x202 x131)) (x118 x131) (x144 x131)))
(define-fun x102 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (= x131 x143) x69 (x74 x131)))
(define-fun x122 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (= x131 (_ bv128 256)) x29 (x175 x131)))
(define-fun x9 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x131) x54 (x125 x131)))
(define-fun x31 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite x126 (x125 x131) (x9 x131)))
(define-fun x105 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (= x161 x131) x51 (x212 x131)))
(define-fun x39 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite x126 (x212 x131) (x105 x131)))
(define-fun x13 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (= x131 x190) x205 (x39 x131)))
(define-fun x36 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite x146 (x39 x131) (x13 x131)))
(define-fun x10 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (= x138 x131) x198 (x64 x131)))
(define-fun x26 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite x126 (x64 x131) (x10 x131)))
(define-fun x4 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 x131) x25 (x106 x131)))
(define-fun x108 ((x131 (_ BitVec 256))) (_ BitVec 256) (ite x126 (x106 x131) (x4 x131)))
(assert (= (_ bv0 256) (x173 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (not (x11 (x208 (_ bv64 256) x79 (_ bv60 256)))))
(assert (= (_ bv64 256) (x93 (x208 (_ bv64 256) x79 (_ bv60 256)))))
(assert (x11 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)))
(assert (= (=> (and (= x103 (bvmul x162 x121)) (not (bvugt x192 (bvadd x130 x192))) (= x107 (= (_ bv0 256) x117)) (bvule x103 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x191 (bvadd x130 x192)) (= x186 (bvmul x117 (_ bv1000000000000000000 256))) (= x87 x191) (or x107 x22) (bvule (_ bv0 256) x103) (x89 x121 x162) (= x162 (bvadd x67 (bvneg x199))) (not (bvugt x162 x67)) (= x5 (bvudiv x186 x117)) (= (= x5 (_ bv1000000000000000000 256)) x22) (bvuge x211 (_ bv1 256)) (= x117 x103) (= x192 (bvudiv x186 x211))) x174) x145))
(assert (= (=> (and (and (= x42 x170) (and (= x7 x158) (and (= (bvmul (_ bv96 256) x29) x112) (= x69 x18) (= x176 x100) (not (bvugt x171 x202)) (= x96 (x8 x129)) (= x69 (x74 x143)) (= (bvadd (_ bv63 256) x200) x6) (= (bvult x32 x171) x127) (= x187 (bvand x6 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))) (= x46 (_ bv128 256)) (= (bvmul x29 (_ bv32 256)) x200) (= x29 (x84 x168)) (bvuge (_ bv18446744073709551615 256) x29) (= x32 (bvadd x168 (_ bv32 256))) (= (bvadd (_ bv4 256) x70) x168) (= (bvadd (_ bv128 256) x187) x54) (bvuge (_ bv18446744073709551487 256) x187) (= x171 (bvadd x32 x112)) (bvuge x96 (_ bv1 256)) (= (x102 x129) x100) (= x42 x143) (= (bvadd x168 (_ bv31 256)) x142) (= (_ bv2997214202 256) x2) (bvult x142 x202)))) (and (= x24 (= x205 x160)) (not (= x75 x207)) (= x71 (bvugt (x8 x207) (_ bv0 256))) (bvule x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x75) (bvuge x150 (_ bv0 256)) (= (_ bv0 256) x165) (bvuge x195 (_ bv0 256)) (bvule (_ bv0 256) x182) (= (x8 x129) x189) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x177) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x207) (bvule x70 (_ bv18446744073709551615 256)) (= (bvadd x73 x141) x160) (bvule (_ bv0 256) x7) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x157) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x129) (bvule x150 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x98 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x177) (bvule (_ bv0 256) x160) (= x147 (bvugt (x8 x75) (_ bv0 256))) (bvuge x157 (_ bv0 256)) (bvule (_ bv0 256) x42) (bvule x42 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x98) (bvuge x75 (_ bv1 256)) (= x141 x48) x24 (= (_ bv404098525 256) x80) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x195) (bvule x202 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv68 256) x202) (= x73 x14) x76 (bvuge x189 (_ bv1 256)) (bvule (_ bv0 256) x97) (= x76 (bvult (_ bv0 256) (x8 x129))) (bvule x97 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x99) (= x116 x70) (bvule (_ bv1 256) x207) (bvuge x99 (_ bv0 256)) (= x70 (x118 (_ bv4 256))) (bvule x182 (_ bv4294967295 256)) (not (= x129 x207)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x56) (bvuge x56 (_ bv0 256)) (bvule x7 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x62 (_ bv4 256)) (bvuge x129 (_ bv1 256)) (not (= x129 x75)) x147 x71)) (and (=> (not x127) x109) (=> x127 x148))) x65))
(assert (= (=> (and (= (bvadd x164 x81) x137) (= x156 (x8 x129)) (= x43 (_ bv4 256)) (bvule (_ bv1 256) x156) (= x14 x81) (= (= x205 x137) x28) (= x48 x164) (= x78 (_ bv404098525 256))) x28) x27))
(assert (= (_ bv0 256) (x173 (_ bv18446744073709551487 256))))
(assert (=> (bvule x207 (_ bv10000 256)) (= (x173 x207) (_ bv0 256))))
(assert (= (=> (and (= x115 x87) (= (bvand (_ bv340282366920938463463374607431768211455 256) x158) x50)) x185) x215))
(assert (= (and x52 x172) x139))
(assert (= (x173 x197) (x173 (bvadd x197 (_ bv1 256)))))
(assert (= (=> (and (= x170 x101) (= (bvugt x37 (_ bv0 256)) x180) (= (x122 (_ bv128 256)) x37) (= x101 (bvand x57 (_ bv1461501637330902918203684832716283019655932542975 256)))) (and (=> (not x180) x83) (=> x180 x210))) x109))
(assert (= (x173 (_ bv404098525 256)) (_ bv0 256)))
(assert (= x23 (or x181 x152)))
(assert (= x72 (or x60 x12)))
(assert (= (and (not x172) x52) x33))
(assert (= (_ bv60 256) (x111 (x208 (_ bv64 256) x79 (_ bv60 256)))))
(assert (x11 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (x11 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))
(assert (= (and x169 x193) x60))
(assert (x11 (_ bv404098525 256)))
(assert (x11 (_ bv18446744073709551519 256)))
(assert (x11 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x95 (or x155 x126)))
(assert (= x169 (or x214 x86)))
(assert (not x65))
(assert (= x132 (and x1 x59)))
(assert (=> (bvule x143 (_ bv10000 256)) (= (x173 x143) (_ bv0 256))))
(assert (= x181 (or (and x216 x72) x123)))
(assert (= x1 (and x183 x16)))
(assert (= x148 (=> (and (= x25 (x84 x32)) (or (bvule x54 (_ bv18446744073709551519 256)) (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x54)) (bvuge x202 (_ bv132 256)) (bvuge (_ bv18446744073709551615 256) x54) (bvule x202 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge (_ bv18446744073709551615 256) x54) (bvule x213 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)) (= x138 (bvadd x161 (_ bv32 256))) (or (bvule x54 (_ bv18446744073709551519 256)) (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x54)) (= x128 (bvadd x82 (_ bv32 256))) (= x82 (bvadd (_ bv32 256) x32)) (= x213 (bvadd x202 (bvneg x32))) (bvule (_ bv96 256) x213) (bvuge (_ bv340282366920938463463374607431768211455 256) x25) (= (not (bvult (bvadd (_ bv32 256) x128) x171)) x21) (= (bvadd (_ bv96 256) x54) x209) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x198) (= x161 (bvadd (_ bv32 256) x54)) (not (bvult x209 x54)) (= x51 (x84 x82)) (= (x84 x128) x198)) (and x21 x109))))
(assert (= (=> (and (= x114 (x31 (_ bv160 256))) (= x85 (x122 (_ bv128 256))) (bvuge x85 (_ bv1 256)) (= x104 (x122 (_ bv128 256))) (= x190 (bvadd x114 (_ bv32 256))) (= x20 (not (bvugt x104 (_ bv1 256))))) (and x83 x20)) x210))
(assert (= true x94))
(assert (= (=> (= (ite x163 x163 (not (bvugt x19 x199))) x193) (and (=> (and (= x130 x87) x193) x174) (=> (and (not x193) (and (or (and x172 (= x19 x67)) (and (not x172) (= x158 x67))) (= x172 (bvult x19 x158)))) x145))) x167))
(assert (= (=> (and (or x216 (not x216)) (= (= x87 x130) x216)) x215) x174))
(assert (x11 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)))
(assert (= (and x95 x180) x178))
(assert (= (_ bv0 256) (x173 (_ bv4294967295 256))))
(assert (bvult (_ bv10000 256) (x208 (_ bv64 256) x79 (_ bv60 256))))
(assert (= (x173 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= x185 (=> (and (bvuge x88 (_ bv1 256)) (= x88 (x122 (_ bv128 256))) (= x77 (bvand x217 (_ bv340282366920938463463374607431768211455 256))) (= x3 (x31 (_ bv160 256))) (= (x122 (_ bv128 256)) x63) (= x134 (x122 (_ bv128 256))) (bvule (_ bv1 256) x196) (= (x122 (_ bv128 256)) x196) (= x217 (x108 x3)) (= x154 (not (bvult (_ bv1 256) x63))) (bvuge x134 (_ bv1 256))) (and x154 x27))))
(assert (x11 (_ bv1000000000000000000 256)))
(assert (x11 (_ bv18446744073709551487 256)))
(assert (=> (bvuge (_ bv10000 256) x129) (= (_ bv0 256) (x173 x129))))
(assert (= x152 (and x1 (not x59))))
(assert (x11 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x12 (or x139 x33)))
(assert (= (_ bv0 256) (x173 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (_ bv0 256) (x173 (_ bv18446744073709551519 256))))
(assert (= x79 (x49 (x208 (_ bv64 256) x79 (_ bv60 256)))))
(assert (= (x173 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (=> (bvule x79 (_ bv10000 256)) (= (x173 x79) (_ bv0 256))))
(assert (= x68 (or x23 (and x183 (not x16)))))
(assert (= (and (not x91) x132) x214))
(assert (= x155 (and x94 x127)))
(assert (x11 (_ bv2997214202 256)))
(assert (x11 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x83 (=> (and (= x30 (x122 (_ bv128 256))) (= x16 (bvult (_ bv0 256) x30))) (and (=> (not x16) x27) (=> (and x16 (and (= x199 (x61 x197)) (= x53 (bvadd (_ bv64 256) x110)) (= (x122 (_ bv128 256)) x179) (bvuge (_ bv340282366920938463463374607431768211455 256) x199) (= (x122 (_ bv128 256)) x206) (= x92 (bvadd (_ bv1 256) x197)) (bvule (_ bv1 256) x206) (bvuge x55 (_ bv1 256)) (= (x36 x203) x211) (= x47 (bvadd x34 (_ bv64 256))) (= x38 (bvadd (bvneg x199) x158)) (bvule (_ bv1 256) x179) (= x197 (x208 (_ bv64 256) x79 (_ bv60 256))) (= x34 (x31 (_ bv160 256))) (= (bvadd x133 (_ bv32 256)) x203) (= (x159 x92) x130) (= (x26 x53) x140) (= x110 (x31 (_ bv160 256))) (= x55 (x122 (_ bv128 256))) (= (bvugt x38 (_ bv0 256)) x59) (= (x26 x47) x124) (= x79 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x124)) (= (x31 (_ bv160 256)) x133))) (and (=> (and (= x130 x115) (not x59)) x185) (=> (and (and (or (and (= x91 x163) x91) (and (= x163 (= x158 x199)) (not x91))) (and (= x91 (ite (= (_ bv0 256) x121) (= (_ bv0 256) x121) (= (_ bv0 256) x211))) (= (x204 x197) x121) (bvule x121 (_ bv340282366920938463463374607431768211455 256)))) x59) x167)))))))
(assert (= (_ bv0 256) (x173 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))))
(assert (= (and (not x180) x95) x146))
(assert (= (_ bv0 256) (x173 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256))))
(assert (= (x173 (_ bv2997214202 256)) (_ bv0 256)))
(assert (= x126 (and (not x127) x94)))
(assert (x11 (_ bv18446744073709551615 256)))
(assert (= (x173 (x208 (_ bv64 256) x79 (_ bv60 256))) (x208 (_ bv64 256) x79 (_ bv60 256))))
(assert (= (_ bv0 256) (x173 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (and x91 x132) x86))
(assert (= x123 (and (not x216) x72)))
(assert (= (x173 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x75) (= (_ bv0 256) (x173 x75))))
(assert (= (and (not x193) x169) x52))
(assert (= (or x178 x146) x183))
(assert (= (x173 (_ bv18446744073709551615 256)) (_ bv0 256)))
(assert (x11 (_ bv4294967295 256)))
(check-sat)
(exit)
