(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x56 () Bool)
(declare-fun x154 () Bool)
(declare-fun x92 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x293 ((_ BitVec 256)) Bool)
(declare-fun x1 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x261 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x279 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x61 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x232 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x93 () Bool)
(declare-fun x36 () Bool)
(declare-fun x203 () Bool)
(declare-fun x300 () Bool)
(declare-fun x70 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x41 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x71 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x276 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x304 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x256 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x278 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x258 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x153 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x113 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x275 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x248 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x202 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x163 () Bool)
(declare-fun x146 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x200 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x33 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x252 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x5 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x88 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x218 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x204 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x306 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x110 () Bool)
(declare-fun x241 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x291 () Bool)
(declare-fun x301 () Bool)
(declare-fun x84 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x260 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x225 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x23 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x91 () Bool)
(declare-fun x240 () Bool)
(declare-fun x274 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x201 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x177 () Bool)
(declare-fun x286 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x208 () Bool)
(declare-fun x262 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(define-fun x170 ((x127 (_ BitVec 256)) (x139 (_ BitVec 256))) Bool (= x127 (bvudiv (bvmul x139 x127) x139)))
(define-fun x99 ((x127 (_ BitVec 256)) (x139 (_ BitVec 256))) Bool (= x127 (bvsdiv (bvmul x127 x139) x139)))
(define-fun x254 ((x127 (_ BitVec 256)) (x139 (_ BitVec 256))) Bool (= x127 (bvsdiv (bvmul x139 x127) x139)))
(define-fun x78 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x178 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x134 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x181 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x196 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x239 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x48 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x116 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x183 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x214 ((x3 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x199 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 x303) x305 (x260 x3)))
(define-fun x215 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 x66) x306 (x199 x3)))
(define-fun x281 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv128 256)) (_ bv1 256) (x78 x3)))
(define-fun x79 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv192 256)) (_ bv0 256) (x134 x3)))
(define-fun x145 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv224 256)) (_ bv0 256) (x196 x3)))
(define-fun x105 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x3) (_ bv0 256) (x48 x3)))
(define-fun x21 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv160 256)) (_ bv192 256) (x183 x3)))
(define-fun x220 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x3) x66 (x79 x3)))
(define-fun x259 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv320 256)) x108 (x145 x3)))
(define-fun x269 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv352 256)) x255 (x105 x3)))
(define-fun x216 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x3) (_ bv288 256) (x21 x3)))
(define-fun x263 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x156 x3) x29 (x215 x3)))
(define-fun x250 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 x66) x59 (x263 x3)))
(define-fun x175 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x11 x3) x241 (x250 x3)))
(define-fun x189 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x3) (_ bv1 256) (x178 x3)))
(define-fun x82 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv192 256)) (_ bv0 256) (x181 x3)))
(define-fun x135 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv224 256)) (_ bv0 256) (x239 x3)))
(define-fun x8 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv256 256)) (_ bv0 256) (x116 x3)))
(define-fun x42 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x3) (_ bv192 256) (x214 x3)))
(define-fun x197 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 (_ bv288 256)) x66 (x82 x3)))
(define-fun x296 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x3) x46 (x135 x3)))
(define-fun x50 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x3) x255 (x8 x3)))
(define-fun x219 ((x3 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x3) (_ bv288 256) (x42 x3)))
(assert (x293 (_ bv1889567281 256)))
(assert (= (or x208 x300) x235))
(assert (= (x248 (x279 (_ bv64 256) x195 (_ bv61 256))) (_ bv61 256)))
(assert (= (x153 (x279 (_ bv64 256) x231 (_ bv60 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x232 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (_ bv0 256) (x248 (x279 (_ bv64 256) x157 (_ bv0 256)))))
(assert (bvugt (x279 (_ bv64 256) x246 x117) (_ bv10000 256)))
(assert (x293 (_ bv620888539 256)))
(assert (not (x293 (x279 (_ bv64 256) x195 x90))))
(assert (not (x293 (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (x293 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= (x232 (x279 (_ bv64 256) x195 x90)) (x279 (_ bv64 256) x195 x90)))
(assert (= x86 true))
(assert (= (_ bv0 256) (x248 (x279 (_ bv64 256) x195 (_ bv0 256)))))
(assert (= (x232 x267) (x232 (bvadd x267 (_ bv1 256)))))
(assert (= (_ bv64 256) (x153 (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (not (x293 (x279 (_ bv64 256) x231 (_ bv60 256)))))
(assert (= (x232 (x279 (_ bv64 256) x231 (_ bv60 256))) (x279 (_ bv64 256) x231 (_ bv60 256))))
(assert (x293 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x293 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (=> (bvuge (_ bv10000 256) x157) (= (x232 x157) (_ bv0 256))))
(assert (not (x293 (x279 (_ bv64 256) x246 x117))))
(assert (= x17 (and x132 x150)))
(assert (= (x232 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (x293 (_ bv2378104546 256)))
(assert (= x32 (and x166 x111)))
(assert (= (x153 (x279 (_ bv64 256) x195 (_ bv0 256))) (_ bv64 256)))
(assert (= (=> (and (= (bvadd x243 x89) x205) (not (bvugt x243 (bvadd x243 x89))) (= x223 (bvuge x124 x122)) (= (x204 x54) x243) (= x54 (x279 (_ bv64 256) x246 (_ bv61 256))) (= x205 x124)) x223) x155))
(assert (= x70 (and x86 x107)))
(assert (= x33 (and x86 (not x107))))
(assert (x293 (_ bv1289409798 256)))
(assert (= x195 (x71 (x279 (_ bv64 256) x195 x90))))
(assert (= x51 (=> (and (= (bvmul x168 x264) x282) (= (x219 (_ bv160 256)) x298) (= x53 (x279 (_ bv64 256) x246 x117)) (x170 x264 x168) (= x44 (x225 x53)) (not (bvult x14 x168)) (= (bvadd (bvneg x44) x14) x168) (= x164 (bvudiv x282 (_ bv1000000000000000000 256))) (= (bvadd (_ bv1 256) x267) x117) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x282) (= (x189 (_ bv128 256)) x268) (= x114 (not (bvult (_ bv1 256) x268))) (bvuge x282 (_ bv0 256)) (= x213 (bvadd x298 (_ bv32 256))) (= x264 (x296 x213))) (and (=> (= x164 x89) x155) x114))))
(assert (= (_ bv2 256) (x71 (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (=> (bvuge (_ bv10000 256) x231) (= (x232 x231) (_ bv0 256))))
(assert (not (x293 (x279 (_ bv64 256) x246 (_ bv0 256)))))
(assert (= (_ bv0 256) (x232 (_ bv2378104546 256))))
(assert (= x90 (x248 (x279 (_ bv64 256) x195 x90))))
(assert (x293 (_ bv1000000000000000000 256)))
(assert (= (=> (and (= x35 (bvmul x142 (_ bv1000000000000000000 256))) (bvuge x20 (_ bv1 256)) (= (bvudiv x35 x20) x64) (= x31 (bvmul x184 x125)) (not (bvugt x64 (bvadd x64 x158))) (= x14 x273) (= x184 (bvadd x257 (bvneg x136))) (= (= x142 (_ bv0 256)) x290) (or x290 x194) (bvuge x31 (_ bv0 256)) (= x200 (bvudiv x35 x142)) (x170 x125 x184) (= x31 x142) (= (bvadd x64 x158) x273) (= x194 (= x200 (_ bv1000000000000000000 256))) (not (bvult x257 x184)) (bvule x31 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))) x51) x143))
(assert (= (x71 (x279 (_ bv64 256) x251 (_ bv0 256))) x251))
(assert (= (or x84 x93) x88))
(assert (= x195 (x71 (x279 (_ bv64 256) x195 (_ bv61 256)))))
(assert (= x246 (x71 (x279 (_ bv64 256) x246 (_ bv61 256)))))
(assert (= (x71 (x279 (_ bv64 256) x190 (_ bv2 256))) x190))
(assert (bvult (_ bv10000 256) (x279 (_ bv64 256) x195 (_ bv61 256))))
(assert (= (x232 (x279 (_ bv64 256) x246 x117)) (x279 (_ bv64 256) x246 x117)))
(assert (= (_ bv0 256) (x232 (_ bv620888539 256))))
(assert (= (and x12 (not x1)) x118))
(assert (= x246 (x71 (x279 (_ bv64 256) x246 (_ bv0 256)))))
(assert (= x177 (=> (and (and (and (and (= x60 (_ bv1289409798 256)) (= x206 x255) (bvule x126 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x206 x167) (= x22 (x5 x66)) (= (_ bv36 256) x272) (bvuge x126 (_ bv1 256)) (= x121 x206) (= (bvudiv x224 (_ bv1000000000000000000 256)) x167) (bvuge x22 (_ bv1 256)) (= (bvmul x206 (_ bv1000000000000000000 256)) x224) (= (bvudiv x224 x126) x221)) (and (and (= x119 x217) (and (and (and (= x246 x162) (and (= x236 x247) (and (bvuge (_ bv20282409603651670423947251286015 256) x46) (= x112 (x189 (_ bv128 256))) (= x47 (bvult (_ bv0 256) x112)) (= (_ bv2378104546 256) x83) (bvule (_ bv1 256) x103) (= x241 (x250 x11)) (= x46 (x256 x97)) (= x103 (x5 x66)) (= x246 x24) (= x115 x241) (= x233 x100) (= x11 x119) (= x97 (x279 (_ bv64 256) x246 (_ bv0 256))) (= x100 (x175 x66)) (= x209 (_ bv128 256))))) (and (bvule x265 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x119 x156) (= (x256 x81) x96) (= x81 (x279 (_ bv64 256) x157 (_ bv0 256))) (= x162 x98) (= (_ bv2 256) x266) (= x138 (x263 x66)) (= (_ bv36 256) x13) (= x69 (x5 x66)) (= x109 x49) (bvuge x69 (_ bv1 256)) (= (x41 x218) x265) (= x141 (bvand x160 (_ bv1099511627775 256))) (= x15 x29) (= x38 (_ bv620888539 256)) (= x138 x59) (= x217 x265) (= (x215 x156) x29) (bvuge x96 (_ bv1 256)) (bvule x96 (_ bv20282409603651670423947251286015 256)) (= (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256)) x218))) (= x236 x160))) (and x110 (bvuge x75 (_ bv36 256)) (= x182 (x279 (_ bv64 256) x190 (_ bv2 256))) (bvule (_ bv1 256) x292) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x157) (= x66 x190) (= x157 (x258 (_ bv4 256))) (= (x5 x7) x292) (= (x278 x182) x228) (= (_ bv1889567281 256) x159) (= (bvule x221 x228) x110) (= x49 x157) (= x190 x179) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x75)))) (and (= x94 x251) (= (_ bv4 256) x244) (= (_ bv36 256) x294) (= (x5 x66) x30) (bvuge x30 (_ bv1 256)) (= (_ bv404098525 256) x40) (bvuge (_ bv20282409603651670423947251286015 256) x280) (= (x279 (_ bv64 256) x251 (_ bv0 256)) x37) (bvule (_ bv1 256) x192) (= x113 (bvuge x255 x280)) x113 (= x210 (_ bv1889567281 256)) (= x280 (x256 x37)) (= x192 (x5 x66)) (= x193 x251))) (and (= x52 (_ bv4 256)) (= (_ bv404098525 256) x285) (= (_ bv36 256) x288) (= x98 x94) (= (x5 x66) x45) (= x34 x122) (= x58 (x204 x211)) (= x34 (bvadd x58 x262)) (= x211 (x279 (_ bv64 256) x195 (_ bv61 256))) (not (bvugt x58 (bvadd x262 x58))) (bvule (_ bv1 256) x45) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x255))) (and (=> (and x47 (and (and (= x125 (x92 x171)) (= (bvand x152 (_ bv1461501637330902918203684832716283019655932542975 256)) x144) (= (bvadd (_ bv64 256) x277) x39) (= (x50 x39) x20) (= x136 (x61 x171)) (= x6 (x219 (_ bv160 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x125) (= (ite (= (_ bv0 256) x125) (= x125 (_ bv0 256)) (= x20 (_ bv0 256))) x111) (= (x304 x267) x158) (= (x197 x6) x152) (= (x219 (_ bv160 256)) x277) (= (bvadd (_ bv1 256) x171) x267) (= (x279 (_ bv64 256) x144 (_ bv60 256)) x171) (bvuge (_ bv340282366920938463463374607431768211455 256) x136)) (or (and (not x111) (= x252 (= x247 x136))) (and x111 (= x252 x111))))) x55) (=> (and (not x47) (= x89 (_ bv0 256))) x155)))))
(assert (not (x293 (x279 (_ bv64 256) x144 (_ bv60 256)))))
(assert (= x149 (or x202 x17)))
(assert (= x208 (and (not x47) x91)))
(assert (= (x232 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (and x47 x91) x166))
(assert (=> (bvuge (_ bv10000 256) x251) (= (_ bv0 256) (x232 x251))))
(assert (= (x248 (x279 (_ bv64 256) x190 (_ bv2 256))) (_ bv2 256)))
(assert (= (x279 (_ bv64 256) x157 (_ bv0 256)) (x232 (x279 (_ bv64 256) x157 (_ bv0 256)))))
(assert (= (=> (and (or x234 x147) (bvule (_ bv0 256) x80) (= (bvadd x65 (bvneg x106)) x187) (bvule (_ bv1 256) x151) (= x80 x307) (= (bvadd x120 x123) x148) (= x161 x148) (not (bvult (bvadd x123 x120) x120)) (= (bvmul x187 x180) x80) (not (bvugt x187 x65)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x80) (x170 x180 x187) (= x249 (bvudiv x57 x307)) (= x234 (= (_ bv0 256) x307)) (= (bvudiv x57 x151) x120) (= x147 (= x249 (_ bv1000000000000000000 256))) (= (bvmul (_ bv1000000000000000000 256) x307) x57)) x23) x76))
(assert (= x56 (=> (= x176 (ite x16 x16 (not (bvugt x245 x106)))) (and (=> (and x176 (= x161 x123)) x23) (=> (and (not x176) (and (or (and (not x1) (= x65 x72)) (and x1 (= x245 x65))) (= x1 (bvugt x72 x245)))) x76)))))
(assert (bvugt (x279 (_ bv64 256) x195 x90) (_ bv10000 256)))
(assert (= (=> (= (ite x252 x252 (not (bvugt x245 x136))) x36) (and (=> (and (not x36) (and (= x132 (bvult x245 x247)) (or (and (= x247 x257) (not x132)) (and (= x245 x257) x132)))) x143) (=> (and x36 (= x14 x158)) x51))) x55))
(assert (=> (bvuge (_ bv10000 256) x156) (= (_ bv0 256) (x232 x156))))
(assert (bvugt (x279 (_ bv64 256) x251 (_ bv0 256)) (_ bv10000 256)))
(assert (= (x232 (x279 (_ bv64 256) x251 (_ bv0 256))) (x279 (_ bv64 256) x251 (_ bv0 256))))
(assert (= (_ bv61 256) (x248 (x279 (_ bv64 256) x246 (_ bv61 256)))))
(assert (= (and (not x111) x166) x185))
(assert (=> (bvule x190 (_ bv10000 256)) (= (_ bv0 256) (x232 x190))))
(assert (= x246 (x71 (x279 (_ bv64 256) x246 x117))))
(assert (= (x232 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (x248 (x279 (_ bv64 256) x251 (_ bv0 256))) (_ bv0 256)))
(assert (x293 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x248 (x279 (_ bv64 256) x246 x117)) x117))
(assert (= (x248 (x279 (_ bv64 256) x246 (_ bv0 256))) (_ bv0 256)))
(assert (x293 (_ bv1099511627775 256)))
(assert (= (_ bv64 256) (x153 (x279 (_ bv64 256) x195 x90))))
(assert (= x23 (=> (and (bvule x68 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge x68 (_ bv0 256)) (= x131 (x279 (_ bv64 256) x195 x90)) (= x2 (x216 (_ bv160 256))) (= x68 (bvmul x242 x289)) (not (bvult x161 x242)) (= x186 (bvadd (_ bv32 256) x2)) (= x289 (x259 x186)) (= (x225 x131) x73) (= x284 (bvudiv x68 (_ bv1000000000000000000 256))) (= (bvadd (bvneg x73) x161) x242) (x170 x289 x242) (= (bvadd (_ bv1 256) x102) x90) (= x240 (not (bvugt x226 (_ bv1 256)))) (= (x281 (_ bv128 256)) x226)) (and x240 (=> (= x262 x284) x177)))))
(assert (= (_ bv64 256) (x153 (x279 (_ bv64 256) x251 (_ bv0 256)))))
(assert (= (x153 (x279 (_ bv64 256) x246 (_ bv0 256))) (_ bv64 256)))
(assert (= (x279 (_ bv64 256) x246 (_ bv0 256)) (x232 (x279 (_ bv64 256) x246 (_ bv0 256)))))
(assert (= x195 (x71 (x279 (_ bv64 256) x195 (_ bv0 256)))))
(assert (= x144 (x71 (x279 (_ bv64 256) x144 (_ bv60 256)))))
(assert (bvugt (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256)) (_ bv10000 256)))
(assert (= (and (not x36) x188) x150))
(assert (bvult (_ bv10000 256) (x279 (_ bv64 256) x246 (_ bv0 256))))
(assert (= (x232 (bvadd x172 (_ bv1 256))) (x232 x172)))
(assert (= (x279 (_ bv64 256) x195 (_ bv61 256)) (x232 (x279 (_ bv64 256) x195 (_ bv61 256)))))
(assert (= (or x149 x203) x300))
(assert (= (x232 (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256))))
(assert (=> (bvule x66 (_ bv10000 256)) (= (x232 x66) (_ bv0 256))))
(assert (bvugt (x279 (_ bv64 256) x231 (_ bv60 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x279 (_ bv64 256) x157 (_ bv0 256))))
(assert (= (x71 (x279 (_ bv64 256) x157 (_ bv0 256))) x157))
(assert (=> (bvule x195 (_ bv10000 256)) (= (_ bv0 256) (x232 x195))))
(assert (= x188 (or x32 x185)))
(assert (= x84 (and x176 x74)))
(assert (not x77))
(assert (= (and x291 x70) x10))
(assert (not (x293 (x279 (_ bv64 256) x195 (_ bv61 256)))))
(assert (=> (bvuge (_ bv10000 256) x144) (= (_ bv0 256) (x232 x144))))
(assert (= (_ bv64 256) (x153 (x279 (_ bv64 256) x246 x117))))
(assert (= (x232 (bvadd x102 (_ bv1 256))) (x232 x102)))
(assert (not (x293 (x279 (_ bv64 256) x246 (_ bv61 256)))))
(assert (= (x232 x171) (x232 (bvadd (_ bv1 256) x171))))
(assert (= (_ bv64 256) (x153 (x279 (_ bv64 256) x195 (_ bv61 256)))))
(assert (= (_ bv0 256) (x232 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (bvugt (x279 (_ bv64 256) x246 (_ bv61 256)) (_ bv10000 256)))
(assert (= (_ bv60 256) (x248 (x279 (_ bv64 256) x231 (_ bv60 256)))))
(assert (= (_ bv0 256) (x232 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (_ bv64 256) (x153 (x279 (_ bv64 256) x190 (_ bv2 256)))))
(assert (= (x232 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (= (_ bv60 256) (x248 (x279 (_ bv64 256) x144 (_ bv60 256)))))
(assert (= (_ bv0 256) (x232 (_ bv1289409798 256))))
(assert (= (x279 (_ bv64 256) x190 (_ bv2 256)) (x232 (x279 (_ bv64 256) x190 (_ bv2 256)))))
(assert (= (x232 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (x279 (_ bv64 256) x246 (_ bv61 256)) (x232 (x279 (_ bv64 256) x246 (_ bv61 256)))))
(assert (=> (bvuge (_ bv10000 256) x9) (= (x232 x9) (_ bv0 256))))
(assert (x293 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (and x1 x12) x146))
(assert (not (x293 (x279 (_ bv64 256) x157 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x303) (= (_ bv0 256) (x232 x303))))
(assert (= (x232 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (bvugt (x279 (_ bv64 256) x195 (_ bv0 256)) (_ bv10000 256)))
(assert (= (x232 (x279 (_ bv64 256) x195 (_ bv0 256))) (x279 (_ bv64 256) x195 (_ bv0 256))))
(assert (bvugt (x279 (_ bv64 256) x144 (_ bv60 256)) (_ bv10000 256)))
(assert (= (x232 (x279 (_ bv64 256) x144 (_ bv60 256))) (x279 (_ bv64 256) x144 (_ bv60 256))))
(assert (= (and x36 x188) x203))
(assert (=> (bvuge (_ bv10000 256) x246) (= (_ bv0 256) (x232 x246))))
(assert (not (x293 (x279 (_ bv64 256) x190 (_ bv2 256)))))
(assert (x293 (_ bv404098525 256)))
(assert (= (or x146 x118) x93))
(assert (x293 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x71 (x279 (_ bv64 256) x231 (_ bv60 256))) x231))
(assert (= (or x10 x238) x74))
(assert (not (x293 (x279 (_ bv64 256) x195 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x7) (= (x232 x7) (_ bv0 256))))
(assert (= x91 (or x88 x33)))
(assert (bvult (_ bv10000 256) (x279 (_ bv64 256) x190 (_ bv2 256))))
(assert (x293 (_ bv20282409603651670423947251286015 256)))
(assert (= (x153 (x279 (_ bv64 256) x157 (_ bv0 256))) (_ bv64 256)))
(assert (= (and x150 (not x132)) x202))
(assert (= (and (not x291) x70) x238))
(assert (= (_ bv64 256) (x153 (x279 (_ bv64 256) x144 (_ bv60 256)))))
(assert (x293 (_ bv4294967295 256)))
(assert (= (x232 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x232 (_ bv1099511627775 256))))
(assert (= x77 (=> (and (and (= x195 x87) (and (= x72 x236) (and (= x43 x306) (= x253 (x279 (_ bv64 256) x195 (_ bv0 256))) (= (x260 x303) x305) (= x303 x119) (= (x256 x253) x108) (= x227 x195) (bvule x108 (_ bv20282409603651670423947251286015 256)) (= (x281 (_ bv128 256)) x130) (= (x5 x66) x95) (= x107 (bvugt x130 (_ bv0 256))) (bvule (_ bv1 256) x95) (= x305 x191) (= x43 (x199 x66)) (= (_ bv128 256) x169) (= (_ bv2378104546 256) x63)))) (and (bvule x101 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x301 (bvule (_ bv0 256) x236) (not (= x66 x7)) (bvuge (_ bv4294967295 256) x85) (bvule x119 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x9 x7)) (bvule (_ bv0 256) x101) (bvuge x98 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x66) (bvuge x7 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x19) (bvuge x119 (_ bv0 256)) (= x237 (_ bv0 256)) (bvule (_ bv0 256) x67) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x236) (bvule x9 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x287 (_ bv0 256)) (= (bvugt (x5 x7) (_ bv0 256)) x301) (= (_ bv36 256) x297) (not (= x9 x66)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x165) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x140) (bvule (_ bv0 256) x19) x274 (bvule x302 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x163 (bvult (_ bv0 256) (x5 x9))) (= (bvult (_ bv0 256) (x5 x66)) x274) (bvuge x85 (_ bv0 256)) (= x98 x87) x163 (bvule x299 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x140 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x7) (bvuge x165 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x287) (bvule (_ bv0 256) x299) (bvuge x302 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x98) (bvuge x66 (_ bv1 256)) (bvule x67 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x9 (_ bv1 256)))) (and (=> (and (and (and (= x261 (bvadd (_ bv64 256) x133)) (= x172 (x279 (_ bv64 256) x231 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x180) (= x151 (x269 x261)) (= x231 (bvand x229 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x180 (_ bv0 256)) (= x180 (_ bv0 256)) (= x151 (_ bv0 256))) x291) (= x102 (bvadd (_ bv1 256) x172)) (= x106 (x61 x172)) (bvuge (_ bv340282366920938463463374607431768211455 256) x106) (= x133 (x216 (_ bv160 256))) (= x123 (x304 x102)) (= x180 (x92 x172)) (= (x220 x207) x229) (= (x216 (_ bv160 256)) x207)) (or (and x291 (= x291 x16)) (and (not x291) (= x16 (= x72 x106))))) x107) x56) (=> (and (= x262 (_ bv0 256)) (not x107)) x177)))))
(assert (not (x293 (x279 (_ bv64 256) x251 (_ bv0 256)))))
(assert (= (x232 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (x153 (x279 (_ bv64 256) x246 (_ bv61 256))) (_ bv64 256)))
(assert (= (and (not x176) x74) x12))
(assert (=> (bvule x11 (_ bv10000 256)) (= (x232 x11) (_ bv0 256))))
(assert (= (_ bv69 256) (x248 (x279 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(check-sat)
(exit)
