(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x305 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x223 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x359 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x367 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x362 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x17 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x127 () (_ BitVec 256))
(declare-fun x317 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x159 () (_ BitVec 256))
(declare-fun x153 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x335 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x98 () Bool)
(declare-fun x126 () Bool)
(declare-fun x263 () Bool)
(declare-fun x120 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x312 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x285 () Bool)
(declare-fun x88 () Bool)
(declare-fun x198 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x308 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x210 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x331 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x333 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x328 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x353 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x361 () Bool)
(declare-fun x108 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x62 () (_ BitVec 256))
(declare-fun x244 () Bool)
(declare-fun x181 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x334 () (_ BitVec 256))
(declare-fun x326 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x129 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x296 () Bool)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x372 () Bool)
(declare-fun x24 () Bool)
(declare-fun x366 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x175 () Bool)
(declare-fun x106 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x50 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x290 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x311 () Bool)
(declare-fun x168 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x219 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x300 () Bool)
(declare-fun x103 () Bool)
(declare-fun x264 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x267 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x123 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x248 ((_ BitVec 256)) Bool)
(declare-fun x354 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x283 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x321 () (_ BitVec 256))
(declare-fun x369 () Bool)
(declare-fun x269 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x85 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x75 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x368 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x144 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x58 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x151 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x365 () Bool)
(declare-fun x316 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x370 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x131 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x327 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x214 () Bool)
(declare-fun x297 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x364 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x340 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x307 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x162 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x336 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x254 () Bool)
(declare-fun x288 () Bool)
(declare-fun x332 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x343 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x172 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x360 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x341 () Bool)
(declare-fun x220 () Bool)
(declare-fun x140 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x197 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x358 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x82 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x193 () Bool)
(declare-fun x9 () Bool)
(declare-fun x346 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x329 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x157 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x48 () Bool)
(declare-fun x182 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x345 () (_ BitVec 256))
(declare-fun x339 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x349 () Bool)
(define-fun x256 ((x42 (_ BitVec 256)) (x195 (_ BitVec 256))) Bool (= x42 (bvudiv (bvmul x195 x42) x195)))
(define-fun x173 ((x42 (_ BitVec 256)) (x195 (_ BitVec 256))) Bool (= x42 (bvsdiv (bvmul x42 x195) x195)))
(define-fun x78 ((x42 (_ BitVec 256)) (x195 (_ BitVec 256))) Bool (= x42 (bvsdiv (bvmul x195 x42) x195)))
(define-fun x323 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x189 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x134 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x234 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x348 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x347 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x15 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x166 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x313 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x253 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x240 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x87 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x299 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x22 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x105 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x350 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x70 ((x191 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x282 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x147) x162 (x210 x191)))
(define-fun x238 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x115) x79 (x282 x191)))
(define-fun x12 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv512 256)) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x323 x191)))
(define-fun x80 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv516 256)) x115 (x12 x191)))
(define-fun x286 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv512 256)) x331 (x80 x191)))
(define-fun x52 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv512 256) x191) (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256) (x286 x191)))
(define-fun x26 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv516 256)) x5 (x52 x191)))
(define-fun x281 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv548 256) x191) x19 (x26 x191)))
(define-fun x16 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv580 256)) x270 (x281 x191)))
(define-fun x338 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvugt (_ bv544 256) x191) (bvule (_ bv512 256) x191)) (x267 (bvadd (bvneg (_ bv512 256)) x191)) (x16 x191)))
(define-fun x295 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite x199 (x338 x191) (x16 x191)))
(define-fun x215 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv768 256)) x204 (x295 x191)))
(define-fun x355 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv800 256) x191) x368 (x215 x191)))
(define-fun x330 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv832 256)) x114 (x355 x191)))
(define-fun x322 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv864 256) x191) x5 (x330 x191)))
(define-fun x3 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv896 256)) x196 (x322 x191)))
(define-fun x111 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 (_ bv928 256)) x125 (x3 x191)))
(define-fun x363 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite x130 (x323 x191) (x111 x191)))
(define-fun x356 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 x191) (_ bv19713291100428231014987005001930418800243710048737721901204769984676045520896 256) (x363 x191)))
(define-fun x310 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x207) x115 (x356 x191)))
(define-fun x371 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x33 x191) x64 (x310 x191)))
(define-fun x89 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x177) x319 (x371 x191)))
(define-fun x237 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x191 x184) (bvule x184 x191)) (x327 (bvadd (bvneg x184) x191)) (x89 x191)))
(define-fun x81 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x164) (_ bv91893037931264823478789666111544828899574148870504437229209701178949438013440 256) (x237 x191)))
(define-fun x314 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x370 x191) x115 (x81 x191)))
(define-fun x94 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x109 x191) x328 (x314 x191)))
(define-fun x232 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 x191) x319 (x94 x191)))
(define-fun x46 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x302) x64 (x232 x191)))
(define-fun x229 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x191 x164) (bvult x191 (bvadd (_ bv32 256) x164))) (x264 (bvadd (bvneg x164) x191)) (x46 x191)))
(define-fun x344 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x119) x216 (x189 x191)))
(define-fun x73 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x235 x191) x319 (x344 x191)))
(define-fun x188 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x164 x191) x345 (x134 x191)))
(define-fun x68 ((x191 (_ BitVec 256))) (_ BitVec 256) (ite (= x191 x200) x34 (x73 x191)))
(define-fun x315 ((x241 (_ BitVec 256))) Bool (or (not (and (bvuge x241 (_ bv0 256)) (bvugt x96 x241))) (not (and (bvuge x241 (_ bv0 256)) (bvule x241 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (bvadd x241 (_ bv1 256)) (x283 (x17 x241)))))
(define-fun x212 ((x174 (_ BitVec 256))) Bool (or (= (x283 x174) (_ bv0 256)) (not (and (bvuge x174 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x174))) (and (bvule (x283 x174) x96) (and (bvuge (x283 x174) (_ bv1 256)) (= x174 (x17 (bvadd (bvneg (_ bv1 256)) (x283 x174))))))))
(define-fun x309 ((x110 (_ BitVec 256)) (x183 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x110) (bvule x110 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (= (x197 x110 (x168 x110 x183)) (bvadd x183 (_ bv1 256))) (not (and (bvule (_ bv0 256) x183) (bvule x183 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (not (and (bvule (_ bv0 256) x183) (bvugt (x75 x110) x183))))))
(define-fun x257 ((x14 (_ BitVec 256)) (x180 (_ BitVec 256))) Bool (or (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x14) (bvuge x14 (_ bv0 256)))) (or (not (and (bvuge x180 (_ bv0 256)) (bvule x180 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (and (and (bvuge (x197 x14 x180) (_ bv1 256)) (= x180 (x168 x14 (bvadd (x197 x14 x180) (bvneg (_ bv1 256)))))) (bvule (x197 x14 x180) (x75 x14))) (= (_ bv0 256) (x197 x14 x180)))))
(define-fun x304 ((x294 (_ BitVec 256)) (x364 (_ BitVec 256))) Bool (or (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x294) (bvuge x294 (_ bv0 256)))) (or (not (and (bvule (_ bv0 256) x364) (bvule x364 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (x316 x294 (x151 x294 x364)) (bvadd (_ bv1 256) x364)) (not (and (bvule (_ bv0 256) x364) (bvult x364 (x85 x294)))))))
(define-fun x266 ((x333 (_ BitVec 256)) (x213 (_ BitVec 256))) Bool (or (or (= (x316 x333 x213) (_ bv0 256)) (and (and (bvuge (x316 x333 x213) (_ bv1 256)) (= x213 (x151 x333 (bvadd (x316 x333 x213) (bvneg (_ bv1 256)))))) (bvule (x316 x333 x213) (x85 x333))) (not (and (bvuge x213 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x213)))) (not (and (bvule (_ bv0 256) x333) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x333)))))
(define-fun x351 ((x53 (_ BitVec 256)) (x320 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x53) (bvule x53 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (not (= (x283 x320) (_ bv0 256))) (not (or (not (= (x197 x53 x320) (_ bv0 256))) (not (= (_ bv0 256) (x316 x53 x320))))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x320) (bvule (_ bv0 256) x320))))))
(define-fun x342 ((x20 (_ BitVec 256))) Bool (or (not (and (bvuge x20 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x20))) (bvugt (_ bv340282366920938463463374607431768211455 256) (x75 x20))))
(define-fun x45 ((x161 (_ BitVec 256))) Bool (or (not (and (bvuge x161 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x161))) (bvult (x85 x161) (_ bv340282366920938463463374607431768211455 256))))
(define-fun x122 () Bool true)
(define-fun x252 () Bool x122)
(define-fun x206 () Bool true)
(define-fun x324 () Bool x206)
(define-fun x169 () Bool true)
(define-fun x55 () Bool x169)
(define-fun x268 () Bool true)
(define-fun x303 () Bool x268)
(define-fun x292 () Bool true)
(define-fun x143 () Bool x292)
(define-fun x352 () Bool true)
(define-fun x113 () Bool x352)
(define-fun x35 () Bool true)
(define-fun x179 () Bool true)
(define-fun x201 () Bool (and x179 x35))
(define-fun x357 () Bool true)
(define-fun x306 () Bool x357)
(define-fun x152 () Bool true)
(define-fun x276 () Bool x152)
(assert (=> (bvuge (_ bv10000 256) x59) (= (x198 x59) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x359) (= (x198 x359) (_ bv0 256))))
(assert (x248 (_ bv3320572652 256)))
(assert (= (_ bv0 256) (x198 (_ bv1889567281 256))))
(assert (= true x24))
(assert (bvult x271 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (_ bv0 256) (x198 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (bvult (_ bv10000 256) (x223 (_ bv64 256) x64 (_ bv169 256))))
(assert (not (x248 (x223 (_ bv64 256) x115 (_ bv103 256)))))
(assert (= (x223 (_ bv64 256) x64 (_ bv169 256)) (x198 (x223 (_ bv64 256) x64 (_ bv169 256)))))
(assert (= x121 (=> (and (= x164 x39) (= x30 (bvudiv x137 x31)) (= (bvadd (_ bv64 256) x184) x277) (= (_ bv1 256) x65) (= x11 (bvadd (bvneg (_ bv1 256)) x31)) (= (bvadd x312 x11) x137) (= x30 x358) (= (bvadd x277 (_ bv64 256)) x39) (not (bvult (bvadd x11 x312) x312))) x227)))
(assert (x248 (_ bv1000000000000000000 256)))
(assert (x248 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x198 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)) (_ bv0 256)))
(assert (= x337 (and (not x175) x132)))
(assert (= x132 (or x244 x140)))
(assert (= (and x48 (not x335)) x106))
(assert (= x142 (=> (and (and (bvule x274 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x9 (bvugt (x153 x69) (_ bv0 256))) (bvuge (_ bv4294967295 256) x66) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x301) (bvuge x148 (_ bv36 256)) (bvuge x66 (_ bv0 256)) (= x287 x252) (= x319 x93) x98 (not (= x133 x51)) (= x298 (bvugt (x153 x359) (_ bv0 256))) x128 (= x285 x201) (bvule (_ bv1 256) x359) (= x319 (x50 (_ bv4 256))) (bvule x359 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x274 x133)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x249) (not (= x133 x59)) (= x128 x324) x182 (= x102 x113) (not (= x115 x239)) (not (= x243 x359)) (not (= x274 x69)) (not (= x239 x359)) (bvuge x51 (_ bv1 256)) x167 x298 (not (= x69 x115)) (bvule (_ bv1 256) x301) (bvule x136 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x51 x243)) (not (= x51 x59)) (= x182 (bvugt (x153 x243) (_ bv0 256))) (bvuge x44 (_ bv0 256)) (= x258 x55) (bvule (_ bv0 256) x340) (bvule (_ bv1 256) x25) (bvule (_ bv1 256) x28) (not (= x115 x133)) (bvule x261 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x104 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x359 x274)) x285 (not (= x51 x274)) (= x41 x143) (not (= x239 x243)) (bvule x59 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x148 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (not (= x359 x51)) (= (bvugt (x153 x239) (_ bv0 256)) x103) (bvule (_ bv1 256) x274) (bvule (_ bv1 256) x239) (= x303 x365) (not (= x243 x115)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x28) x102 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x280) (not (= x274 x115)) (bvuge x59 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x115) (= x278 x274) x236 x41 (= x243 x261) (bvule (_ bv0 256) x136) (not (= x59 x239)) (not (= x69 x59)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x51) (= x301 x69) x9 (bvule x278 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x115 (_ bv1 256)) (bvuge x280 (_ bv0 256)) (= (bvult (_ bv0 256) (x153 x59)) x167) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x44) (not (= x59 x359)) (bvuge x261 (_ bv1 256)) (= x98 (bvugt (x153 x51) (_ bv0 256))) (bvule (_ bv0 256) x104) (not (= x69 x133)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x25) (bvule (_ bv1 256) x278) (not (= x243 x274)) (bvule (_ bv0 256) x99) (not (= x239 x69)) (not (= x239 x133)) (= x274 x25) (bvule x150 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x69 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvult (_ bv0 256) (x153 x274)) x291) x103 (not (= x243 x69)) x365 (bvule x340 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x239 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x359 x133)) (not (= x115 x359)) (bvule x243 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x69 (_ bv1 256)) (= (bvugt (x153 x115) (_ bv0 256)) x361) (bvule x133 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x115 x51)) (not (= x59 x115)) (= x239 x28) (not (= x59 x274)) x258 (= (bvult (_ bv0 256) (x153 x133)) x236) (bvuge x150 (_ bv0 256)) (bvule (_ bv0 256) x321) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x246) (bvule x99 (_ bv1461501637330902918203684832716283019655932542975 256)) x361 (= (_ bv0 256) x49) (bvuge x249 (_ bv0 256)) (not (= x243 x59)) (bvule (_ bv1 256) x243) (not (= x239 x274)) (bvule (_ bv0 256) x246) (not (= x359 x69)) x287 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x321) (bvuge x133 (_ bv1 256)) x291 (not (= x239 x51)) (not (= x243 x133)) (not (= x51 x69))) (and (= x99 x64) (and (and (= x162 (x210 x147)) (bvule (_ bv1 256) x38) (= x131 x93) (= x83 x79) (= x194 (_ bv3320572652 256)) (not (= x36 (_ bv2 256))) (= x83 (x282 x115)) (= x147 x99) (= x162 x208) (= (= x204 x226) x43) (= (x153 x115) x38)) (= x44 x204)))) (and (=> (and x43 (and (= x325 x19) (= x226 x224) (= (_ bv128 256) x184) (= x77 x273))) x260) (=> (and (not x43) (and (and (= x57 (x153 x115)) (= (x286 (_ bv512 256)) x5) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x328) (= (_ bv512 256) x74) (= x165 (x153 x328)) (= x331 (x108 x107)) (bvule (_ bv32 256) x56) (= x329 (_ bv512 256)) (= x13 x115) (bvuge x328 (_ bv1 256)) (= x317 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)) (bvuge x57 (_ bv1 256)) (= x91 (_ bv36 256)) (= x328 x115) (bvule x332 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x107 (x223 (_ bv64 256) x115 (_ bv103 256))) (= (_ bv1889567281 256) x8) (= x155 (bvult (_ bv0 256) x231)) (= x13 x259) (bvuge x165 (_ bv1 256)) (= x217 (x153 x332)) (bvuge x217 (_ bv1 256))) (or (and (not x155) (= x231 x23)) (and (and (bvuge x56 (_ bv32 256)) (bvuge (_ bv4294967295 256) x56) (= x23 (_ bv1 256))) x155)))) x220)))))
(assert (x248 (_ bv91893037931264823478789666111544828899574148870504437229209701178949438013440 256)))
(assert (= (and x21 x37) x230))
(assert (= (x198 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (and (not x37) x21) x289))
(assert (=> (bvule x64 (_ bv10000 256)) (= (_ bv0 256) (x198 x64))))
(assert (= (or x1 x349) x296))
(assert (= (_ bv64 256) (x367 (x223 (_ bv64 256) x64 (_ bv169 256)))))
(assert (= x139 (=> (and (or (and (= x242 (_ bv0 256)) x284) (and (not x284) (and (= x186 x242) (= (bvmul x77 x157) x186) (x256 x157 x77)))) (and (not (bvugt x127 (bvadd x127 x270))) (= (= (_ bv0 256) x157) x284) (= (_ bv1000000000000000000 256) x343) (= x127 (bvudiv x279 (_ bv1000000000000000000 256))) (= x125 (bvadd x270 x127)) (= x245 (_ bv640 256)))) x221)))
(assert (= x244 (and (not x176) x92)))
(assert (= (or x289 x230) x48))
(assert (= (x198 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)) (_ bv0 256)))
(assert (= x95 (and (not x293) x307)))
(assert (= x260 (=> (and (and (= (x339 x135) x60) (= x204 x224) (= (x223 (_ bv64 256) x64 (_ bv169 256)) x135) (= (bvadd x207 (_ bv32 256)) x33) (= (= x209 (x172 x326)) x372) (bvuge x185 (_ bv1 256)) x372 (= x362 (bvuge (x172 x115) x100)) (= x100 (x238 x115)) (= x209 (x238 x326)) (bvuge x163 (_ bv1 256)) (bvuge (_ bv4294967295 256) x366) (= (bvadd (_ bv32 256) x33) x177) (= (= (_ bv0 256) x60) x176) (= (bvadd (_ bv4 256) x184) x207) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x326) (= x163 (x153 x326)) x362) (or (and (= x175 x176) x176) (and (and (= (= (_ bv0 256) x27) x175) (= x353 (bvadd x135 (_ bv1 256))) (= (x144 x353) x27)) (not x176)))) x341)))
(assert (= x219 (and x145 (not x155))))
(assert (x248 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)))
(assert (=> (bvule x69 (_ bv10000 256)) (= (_ bv0 256) (x198 x69))))
(assert (not x142))
(assert (= (=> (and (and (= x335 (= x222 (_ bv0 256))) (= (_ bv576 256) x112) (= x2 (_ bv1000000000000000000 256)) (not (bvugt x368 (bvadd x368 x19))) (= (bvudiv x159 (_ bv1000000000000000000 256)) x368) (= x196 (bvadd x368 x19))) (or (and x335 (= (_ bv0 256) x279)) (and (not x335) (and (x256 x222 x368) (= x54 x279) (= x54 (bvmul x368 x222)))))) x139) x6))
(assert (= x220 (=> (and (and (bvuge (_ bv1000000000000000 256) x117) (bvule (_ bv1 256) x23) (= x293 (= x117 (_ bv0 256))) (not (bvult x204 x226)) (= x160 (bvadd (bvneg x226) x204)) (= (_ bv512 256) x202) (= x117 (x295 (_ bv512 256)))) (or (and x293 (= x157 (_ bv0 256))) (and (not x293) (and (= x178 (bvmul x117 x160)) (= x157 x178) (x256 x117 x160))))) x300)))
(assert (= (x198 (bvadd x135 (_ bv1 256))) (x198 x135)))
(assert (x248 (_ bv340282366920938463463374607431768211455 256)))
(assert (x248 (_ bv19713291100428231014987005001930418800243710048737721901204769984676045520896 256)))
(assert (= (_ bv103 256) (x58 (x223 (_ bv64 256) x115 (_ bv103 256)))))
(assert (= (x198 (_ bv91893037931264823478789666111544828899574148870504437229209701178949438013440 256)) (_ bv0 256)))
(assert (= x199 (and x145 x155)))
(assert (= (x198 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (x248 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= x145 (and x24 (not x43))))
(assert (= (_ bv0 256) (x198 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256))))
(assert (= (x198 (_ bv1000000000000000 256)) (_ bv0 256)))
(assert (= x63 (and x335 x48)))
(assert (= (_ bv0 256) (x198 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (=> (bvuge (_ bv10000 256) x51) (= (_ bv0 256) (x198 x51))))
(assert (= x311 (or x254 x32)))
(assert (= x64 (x123 (x223 (_ bv64 256) x64 (_ bv169 256)))))
(assert (bvult x96 (_ bv340282366920938463463374607431768211455 256)))
(assert (x248 (_ bv4294967295 256)))
(assert (= (x198 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (or x181 x116) x32))
(assert (=> (bvule x274 (_ bv10000 256)) (= (x198 x274) (_ bv0 256))))
(assert (= x300 (=> (and (and (= (_ bv1000000000000000000 256) x40) (= (= x157 (_ bv0 256)) x37)) (or (and (and (= (bvmul x19 x157) x47) (x256 x157 x19) (= x47 x159)) (not x37)) (and (= x159 (_ bv0 256)) x37))) x6)))
(assert (= (x198 (x223 (_ bv64 256) x115 (_ bv103 256))) (x223 (_ bv64 256) x115 (_ bv103 256))))
(assert (x248 (_ bv1889567281 256)))
(assert (= x92 (or x296 x130)))
(assert (x248 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)))
(assert (x248 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (=> (bvuge (_ bv10000 256) x133) (= (x198 x133) (_ bv0 256))))
(assert (=> (bvule x243 (_ bv10000 256)) (= (_ bv0 256) (x198 x243))))
(assert (= x254 (and x175 x132)))
(assert x306)
(assert (= (x58 (x223 (_ bv64 256) x64 (_ bv169 256))) (_ bv169 256)))
(assert (=> (bvule x239 (_ bv10000 256)) (= (_ bv0 256) (x198 x239))))
(assert (=> (bvule x147 (_ bv10000 256)) (= (x198 x147) (_ bv0 256))))
(assert (= x21 (or x193 x95)))
(assert (x248 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x248 (_ bv1000000000000000 256)))
(assert (= (x198 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (x248 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)))
(assert (not (x248 (x223 (_ bv64 256) x64 (_ bv169 256)))))
(assert (=> (bvuge (_ bv10000 256) x115) (= (x198 x115) (_ bv0 256))))
(assert (= (_ bv0 256) (x198 (_ bv3320572652 256))))
(assert (bvugt (x223 (_ bv64 256) x115 (_ bv103 256)) (_ bv10000 256)))
(assert (=> (bvuge (_ bv10000 256) x326) (= (x198 x326) (_ bv0 256))))
(assert (= (_ bv0 256) (x198 (_ bv4294967295 256))))
(assert (= (and x101 x337) x181))
(assert (= x193 (and x293 x307)))
(assert (= (and (=> (and (and (= x358 (_ bv0 256)) (= x164 x184)) x175) x227) (=> (and (and (and (bvuge x31 (_ bv1 256)) (= x101 (= x141 (_ bv0 256))) (= (x339 x135) x141) (= x149 (bvadd (_ bv1 256) x135)) (= (x144 x149) x31)) (or (and (and (x256 x141 x273) (= x312 x7) (= x7 (bvmul x273 x141))) (not x101)) (and (= (_ bv0 256) x312) x101))) (not x175)) x121)) x341))
(assert x276)
(assert (= (and x24 x43) x130))
(assert (= (x198 (_ bv19713291100428231014987005001930418800243710048737721901204769984676045520896 256)) (_ bv0 256)))
(assert (=> (bvule x332 (_ bv10000 256)) (= (x198 x332) (_ bv0 256))))
(assert (= (or x63 x106) x88))
(assert (= (x367 (x223 (_ bv64 256) x115 (_ bv103 256))) (_ bv64 256)))
(assert (= x116 (and (not x101) x337)))
(assert (= x1 (and x88 (not x284))))
(assert (= x349 (and x284 x88)))
(assert (=> (bvuge (_ bv10000 256) x328) (= (x198 x328) (_ bv0 256))))
(assert (= (=> (and (= (_ bv704 256) x203) (= (bvadd x19 x368) x10) (not (bvult (bvadd x77 x205) x205)) (= x224 x44) (= x184 (_ bv768 256)) (= x10 x325) (= (bvadd x205 x77) x29) (= x114 (bvadd x77 x205)) (= x273 x29) (= (bvudiv x242 (_ bv1000000000000000000 256)) x205)) x260) x221))
(assert (= x115 (x123 (x223 (_ bv64 256) x115 (_ bv103 256)))))
(assert (= x227 (=> (and (bvuge x154 (_ bv1 256)) (= (_ bv0 256) x171) (= x345 (bvadd (bvneg (_ bv32 256)) x190)) (bvuge x156 (_ bv1 256)) (= (bvadd x164 (_ bv32 256)) x200) (= (x229 x164) x146) (= x119 (bvadd (_ bv36 256) x164)) (bvule (_ bv128 256) x354) (= (bvadd x325 x319) x76) (= x216 (bvand x146 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (bvadd x119 (_ bv32 256)) x235) (= x318 (x172 x326)) (= true x158) (bvule (_ bv1 256) x90) (= (bvult (bvadd x354 (bvneg (_ bv128 256))) (_ bv32 256)) x247) (not (bvugt x325 (bvadd x325 x319))) (= (x73 x200) x84) (= (bvadd x164 (_ bv4 256)) x370) (= x90 (x153 x328)) (= (bvadd x319 x358) x124) x120 (= (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x84) x251) (bvuge (_ bv4294967295 256) x297) (= x302 (bvadd (_ bv32 256) x255)) (= (bvadd (_ bv32 256) x235) x18) (= (x153 x326) x156) (bvule x328 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x188 x164) x354) (not (bvugt x358 (bvadd x358 x319))) (= (x172 x115) x265) (bvule (_ bv32 256) x297) (= (bvule x265 (x305 x115)) x120) (= (= (x305 x326) x318) x228) x228 (= x109 (bvadd x370 (_ bv32 256))) (= (bvadd x251 (bvneg (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256))) x34) (= (bvadd x18 (bvneg x164)) x190) (= x255 (bvadd x109 (_ bv32 256)))) x247)))
(assert (= (and x176 x92) x140))
(assert (= (or x199 x219) x307))
(check-sat)
(exit)
