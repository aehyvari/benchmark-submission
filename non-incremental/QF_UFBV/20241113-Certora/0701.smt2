(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x56 () Bool)
(declare-fun x292 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x5 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x291 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x205 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x271 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x84 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x43 ((_ BitVec 256)) Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x169 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x131 () Bool)
(declare-fun x150 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x283 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x264 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x101 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x220 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x214 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x187 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x290 () Bool)
(declare-fun x201 () Bool)
(declare-fun x303 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x10 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x207 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x194 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x173 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x170 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x274 () Bool)
(declare-fun x305 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x278 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x181 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x58 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x279 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x164 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x282 () (_ BitVec 256))
(declare-fun x186 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x206 () Bool)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x306 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x277 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x289 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x100 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x98 () Bool)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x270 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x127 () Bool)
(declare-fun x233 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x50 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x166 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x293 () Bool)
(define-fun x216 ((x246 (_ BitVec 256)) (x107 (_ BitVec 256))) Bool (= x246 (bvudiv (bvmul x107 x246) x107)))
(define-fun x117 ((x246 (_ BitVec 256)) (x107 (_ BitVec 256))) Bool (= x246 (bvsdiv (bvmul x246 x107) x107)))
(define-fun x301 ((x246 (_ BitVec 256)) (x107 (_ BitVec 256))) Bool (= x246 (bvsdiv (bvmul x107 x246) x107)))
(define-fun x52 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x18 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x1 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x48 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x133 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x83 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x236 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x41 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x298 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x215 ((x15 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x223 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 x242) x258 (x214 x15)))
(define-fun x66 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 x233) x6 (x223 x15)))
(define-fun x273 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv128 256)) (_ bv1 256) (x52 x15)))
(define-fun x61 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv192 256)) (_ bv0 256) (x1 x15)))
(define-fun x129 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv224 256)) (_ bv0 256) (x133 x15)))
(define-fun x235 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x15) (_ bv0 256) (x236 x15)))
(define-fun x3 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv160 256)) (_ bv192 256) (x298 x15)))
(define-fun x115 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x15) x233 (x61 x15)))
(define-fun x196 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv320 256)) x97 (x129 x15)))
(define-fun x249 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv352 256)) x262 (x235 x15)))
(define-fun x299 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x15) (_ bv288 256) (x3 x15)))
(define-fun x267 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x42 x15) x307 (x66 x15)))
(define-fun x175 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 x233) x139 (x267 x15)))
(define-fun x296 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x126 x15) x92 (x175 x15)))
(define-fun x57 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x15) (_ bv1 256) (x18 x15)))
(define-fun x294 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv192 256)) (_ bv0 256) (x48 x15)))
(define-fun x304 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv224 256)) (_ bv0 256) (x83 x15)))
(define-fun x53 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv256 256)) (_ bv0 256) (x41 x15)))
(define-fun x180 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x15) (_ bv192 256) (x215 x15)))
(define-fun x285 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 (_ bv288 256)) x233 (x294 x15)))
(define-fun x44 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x15) x125 (x304 x15)))
(define-fun x73 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x15) x262 (x53 x15)))
(define-fun x62 ((x15 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x15) (_ bv288 256) (x180 x15)))
(assert (bvult (_ bv10000 256) (x277 (_ bv64 256) x137 (_ bv0 256))))
(assert (= (_ bv0 256) (x10 (_ bv961581905 256))))
(assert (= (x181 (x277 (_ bv64 256) x210 (_ bv1 256))) x210))
(assert (= x112 (=> (and (= x232 (x220 x208)) (= (x277 (_ bv64 256) x256 (_ bv61 256)) x208) (not (bvugt x232 (bvadd x254 x232))) (= x198 x27) (= (bvadd x254 x232) x27) (= (bvule x202 x198) x34)) x34)))
(assert (= (x101 (x277 (_ bv64 256) x137 (_ bv61 256))) (_ bv61 256)))
(assert (= true x131))
(assert (= (x10 (x277 (_ bv64 256) x137 (_ bv61 256))) (x277 (_ bv64 256) x137 (_ bv61 256))))
(assert (bvugt (x277 (_ bv64 256) x74 (_ bv60 256)) (_ bv10000 256)))
(assert (= (x264 (x277 (_ bv64 256) x137 x31)) (_ bv64 256)))
(assert (= (x181 (x277 (_ bv64 256) x256 x59)) x256))
(assert (= (or x247 x36) x281))
(assert (= (x101 (x277 (_ bv64 256) x256 x59)) x59))
(assert (bvugt (x277 (_ bv64 256) x244 x46) (_ bv10000 256)))
(assert (bvugt (x277 (_ bv64 256) x256 (_ bv61 256)) (_ bv10000 256)))
(assert (not (x43 (x277 (_ bv64 256) x256 (_ bv0 256)))))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x210 (_ bv1 256)))))
(assert (=> (bvule x230 (_ bv10000 256)) (= (_ bv0 256) (x10 x230))))
(assert (=> (bvule x210 (_ bv10000 256)) (= (x10 x210) (_ bv0 256))))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x250 (_ bv2 256)))))
(assert (= (or x29 x166) x58))
(assert (= (and (not x271) x45) x147))
(assert (= (and (not x109) x24) x45))
(assert (= (x277 (_ bv64 256) x218 (_ bv0 256)) (x10 (x277 (_ bv64 256) x218 (_ bv0 256)))))
(assert (= (and (not x207) x58) x64))
(assert (= (x277 (_ bv64 256) x210 (_ bv1 256)) (x10 (x277 (_ bv64 256) x210 (_ bv1 256)))))
(assert (= (x10 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= x26 (and x64 x103)))
(assert (= (x10 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (x10 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= (x264 (x277 (_ bv64 256) x256 (_ bv0 256))) (_ bv64 256)))
(assert (bvugt (x277 (_ bv64 256) x256 x59) (_ bv10000 256)))
(assert (=> (bvuge (_ bv10000 256) x250) (= (_ bv0 256) (x10 x250))))
(assert (= (and x24 x109) x248))
(assert (= (and x271 x45) x85))
(assert (= x128 (or x197 x281)))
(assert (bvult (_ bv10000 256) (x277 (_ bv64 256) x250 (_ bv2 256))))
(assert (=> (bvuge (_ bv10000 256) x74) (= (_ bv0 256) (x10 x74))))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x218 (_ bv0 256)))))
(assert (bvult (_ bv10000 256) (x277 (_ bv64 256) x137 (_ bv61 256))))
(assert (not (x43 (x277 (_ bv64 256) x218 (_ bv0 256)))))
(assert (= (x10 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x244) (= (_ bv0 256) (x10 x244))))
(assert (= x306 (=> (and (= x172 x60) (= (= (_ bv1000000000000000000 256) x99) x290) (= x255 (bvudiv x47 x89)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x60) (= x47 (bvmul x172 (_ bv1000000000000000000 256))) (or x268 x290) (= (= x172 (_ bv0 256)) x268) (= (bvmul x111 x80) x60) (= (bvudiv x47 x172) x99) (not (bvult x94 x111)) (= (bvadd (bvneg x164) x94) x111) (bvuge x89 (_ bv1 256)) (not (bvugt x255 (bvadd x38 x255))) (= x292 (bvadd x255 x38)) (= x123 x292) (x216 x80 x111) (bvule (_ bv0 256) x60)) x84)))
(assert (= (_ bv60 256) (x101 (x277 (_ bv64 256) x230 (_ bv60 256)))))
(assert (x43 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x10 (x277 (_ bv64 256) x250 (_ bv2 256))) (x277 (_ bv64 256) x250 (_ bv2 256))))
(assert (=> (bvuge (_ bv10000 256) x137) (= (x10 x137) (_ bv0 256))))
(assert (= (and x131 (not x278)) x194))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x256 (_ bv61 256)))))
(assert (= (x101 (x277 (_ bv64 256) x74 (_ bv60 256))) (_ bv60 256)))
(assert (= (x10 (x277 (_ bv64 256) x137 (_ bv0 256))) (x277 (_ bv64 256) x137 (_ bv0 256))))
(assert (not (x43 (x277 (_ bv64 256) x74 (_ bv60 256)))))
(assert (= (x101 (x277 (_ bv64 256) x244 x46)) x46))
(assert (= (and x119 x108) x56))
(assert (=> (bvule x188 (_ bv10000 256)) (= (x10 x188) (_ bv0 256))))
(assert (= (=> (= x109 (ite x121 x121 (not (bvugt x282 x251)))) (and (=> (and (not x109) (and (or (and (= x151 x282) x271) (and (= x151 x183) (not x271))) (= x271 (bvult x282 x183)))) x222) (=> (and x109 (= x63 x96)) x100))) x272))
(assert (x43 (_ bv961581905 256)))
(assert (= x218 (x181 (x277 (_ bv64 256) x218 (_ bv0 256)))))
(assert (= x222 (=> (and (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x86) (not (bvugt x162 (bvadd x63 x162))) (not (bvugt x30 x151)) (= (bvadd x151 (bvneg x251)) x30) (= (= x130 (_ bv0 256)) x19) (= x276 (bvudiv x179 x130)) (bvuge x86 (_ bv0 256)) (or x19 x14) (= x179 (bvmul x130 (_ bv1000000000000000000 256))) (= x86 (bvmul x30 x289)) (bvuge x124 (_ bv1 256)) (= x171 x96) (= x171 (bvadd x162 x63)) (= (bvudiv x179 x124) x162) (x216 x289 x30) (= x130 x86) (= x14 (= (_ bv1000000000000000000 256) x276))) x100)))
(assert (= x279 (and (not x103) x64)))
(assert (not (x43 (x277 (_ bv64 256) x256 (_ bv61 256)))))
(assert (x43 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (not (x43 (x277 (_ bv64 256) x210 (_ bv1 256)))))
(assert (= x206 (or x248 x201)))
(assert (= (or x26 x279) x36))
(assert (= (_ bv0 256) (x10 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (_ bv0 256) (x101 (x277 (_ bv64 256) x256 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x275) (= (x10 x275) (_ bv0 256))))
(assert (=> (bvule x242 (_ bv10000 256)) (= (_ bv0 256) (x10 x242))))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x74 (_ bv60 256)))))
(assert (= x29 (and x56 (not x105))))
(assert (not (x43 (x277 (_ bv64 256) x137 (_ bv0 256)))))
(assert (= (_ bv0 256) (x10 (_ bv1889567281 256))))
(assert (= x4 (=> (and (and (= x137 x120) (and (= x183 x263) (and (= x266 x6) (= x295 (x277 (_ bv64 256) x137 (_ bv0 256))) (= (x214 x242) x258) (= x242 x234) (= (x270 x295) x97) (= x33 x137) (bvule x97 (_ bv20282409603651670423947251286015 256)) (= (x273 (_ bv128 256)) x308) (= (x283 x233) x90) (= x278 (bvugt x308 (_ bv0 256))) (bvule (_ bv1 256) x90) (= x258 x65) (= x266 (x223 x233)) (= (_ bv128 256) x32) (= (_ bv2378104546 256) x88)))) (and (bvule x239 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x228 (bvule (_ bv0 256) x263) (not (= x233 x275)) (bvuge (_ bv4294967295 256) x184) (bvule x234 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x188 x275)) (bvule (_ bv0 256) x239) (bvuge x110 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x233) (bvuge x275 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x17) (bvuge x234 (_ bv0 256)) (= x177 (_ bv0 256)) (bvule (_ bv0 256) x163) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x263) (bvule x188 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x221 (_ bv0 256)) (= (bvugt (x283 x275) (_ bv0 256)) x228) (= (_ bv36 256) x217) (not (= x188 x233)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x68) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x305) (bvule (_ bv0 256) x17) x191 (bvule x69 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x241 (bvult (_ bv0 256) (x283 x188))) (= (bvult (_ bv0 256) (x283 x233)) x191) (bvuge x184 (_ bv0 256)) (= x110 x120) x241 (bvule x243 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x305 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x275) (bvuge x68 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x221) (bvule (_ bv0 256) x243) (bvuge x69 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x110) (bvuge x233 (_ bv1 256)) (bvule x163 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x188 (_ bv1 256)))) (and (=> (and (and (and (= x253 (bvadd (_ bv64 256) x237)) (= x149 (x277 (_ bv64 256) x74 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x289) (= x124 (x249 x253)) (= x74 (bvand x55 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x289 (_ bv0 256)) (= x289 (_ bv0 256)) (= x124 (_ bv0 256))) x13) (= x72 (bvadd (_ bv1 256) x149)) (= x251 (x186 x149)) (bvuge (_ bv340282366920938463463374607431768211455 256) x251) (= x237 (x299 (_ bv160 256))) (= x63 (x205 x72)) (= x289 (x150 x149)) (= (x115 x76) x55) (= (x299 (_ bv160 256)) x76)) (or (and x13 (= x13 x121)) (and (not x13) (= x121 (= x183 x251))))) x278) x272) (=> (and (= x211 (_ bv0 256)) (not x278)) x127)))))
(assert (= (_ bv2 256) (x101 (x277 (_ bv64 256) x250 (_ bv2 256)))))
(assert (= (x264 (x277 (_ bv64 256) x230 (_ bv60 256))) (_ bv64 256)))
(assert (= (x181 (x277 (_ bv64 256) x244 x46)) x244))
(assert (=> (bvuge (_ bv10000 256) x233) (= (_ bv0 256) (x10 x233))))
(assert (= (x10 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x256 x59))))
(assert (= (or x147 x85) x201))
(assert (= (x10 (x277 (_ bv64 256) x256 x59)) (x277 (_ bv64 256) x256 x59)))
(assert (not (x43 (x277 (_ bv64 256) x244 x46))))
(assert (= (x101 (x277 (_ bv64 256) x137 x31)) x31))
(assert (x43 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= (or x206 x194) x119))
(assert (x43 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x10 (x277 (_ bv64 256) x256 (_ bv0 256))) (x277 (_ bv64 256) x256 (_ bv0 256))))
(assert (= (x181 (x277 (_ bv64 256) x256 (_ bv0 256))) x256))
(assert (= (x10 x149) (x10 (bvadd (_ bv1 256) x149))))
(assert (= (x101 (x277 (_ bv64 256) x256 (_ bv61 256))) (_ bv61 256)))
(assert (= (x181 (x277 (_ bv64 256) x137 x31)) x137))
(assert (x43 (_ bv4294967295 256)))
(assert (not (x43 (x277 (_ bv64 256) x250 (_ bv2 256)))))
(assert (not (x43 (x277 (_ bv64 256) x137 x31))))
(assert (x43 (_ bv1889567281 256)))
(assert (= (x10 (bvadd x148 (_ bv1 256))) (x10 x148)))
(assert (= x24 (or x170 x5)))
(assert (= (x10 (x277 (_ bv64 256) x137 x31)) (x277 (_ bv64 256) x137 x31)))
(assert (= (_ bv0 256) (x10 (_ bv340282366920938463463374607431768211455 256))))
(assert (x43 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not (x43 (x277 (_ bv64 256) x256 x59))))
(assert (= (and x13 x209) x5))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x137 (_ bv0 256)))))
(assert (x43 (_ bv20282409603651670423947251286015 256)))
(assert (= (_ bv0 256) (x10 (_ bv1000000000000000000 256))))
(assert (bvult (_ bv10000 256) (x277 (_ bv64 256) x210 (_ bv1 256))))
(assert (= (x101 (x277 (_ bv64 256) x137 (_ bv0 256))) (_ bv0 256)))
(assert (bvugt (x277 (_ bv64 256) x230 (_ bv60 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x277 (_ bv64 256) x137 x31)))
(assert (= (=> (and (and (and (= x118 x218) (= (_ bv4 256) x240) (= (_ bv36 256) x142) (= (x283 x233) x261) (bvuge x261 (_ bv1 256)) (= (_ bv404098525 256) x195) (bvuge (_ bv20282409603651670423947251286015 256) x11) (= (x277 (_ bv64 256) x218 (_ bv0 256)) x21) (bvule (_ bv1 256) x23) (= x98 (bvuge x262 x11)) x98 (= x193 (_ bv1889567281 256)) (= x11 (x270 x21)) (= x23 (x283 x233)) (= x20 x218)) (and (and (= x114 (_ bv1289409798 256)) (= x28 x262) (bvule x2 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x28 x265) (= x161 (x283 x233)) (= (_ bv36 256) x143) (bvuge x2 (_ bv1 256)) (= x81 x28) (= (bvudiv x78 (_ bv1000000000000000000 256)) x265) (bvuge x161 (_ bv1 256)) (= (bvmul x28 (_ bv1000000000000000000 256)) x78) (= (bvudiv x78 x2) x35)) (and (and (bvule (_ bv1 256) x67) x91 (= (_ bv1889567281 256) x116) (= (bvule x35 x134) x91) (bvule x244 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv68 256) x75) (= (x187 x146) x134) (bvuge x234 (_ bv1 256)) (= x257 x297) (= x233 x250) (= (x283 x275) x67) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x75) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x234) (= x244 (x169 (_ bv4 256))) (= x297 (x169 (_ bv36 256))) (= x146 (x277 (_ bv64 256) x250 (_ bv2 256))) (= x244 x269) (= x250 x178) (bvuge x244 (_ bv1 256))) (and (and (and (= x256 x168) (and (and (= x125 (x270 x9)) (bvule x125 (_ bv20282409603651670423947251286015 256)) (= x260 x256) (= (bvult (_ bv0 256) x259) x108) (= x190 x231) (= x92 (x175 x126)) (= x224 (_ bv2378104546 256)) (= x9 (x277 (_ bv64 256) x256 (_ bv0 256))) (bvule (_ bv1 256) x54) (= (x57 (_ bv128 256)) x259) (= x122 (_ bv128 256)) (= (x296 x233) x190) (= (x283 x233) x54) (= x126 x234) (= x87 x92)) (= x263 x16))) (and (= x42 x234) (= x7 (bvadd x297 x40)) (= x159 (x283 x233)) (not (bvugt x40 (bvadd x297 x40))) (= x95 x307) (= (x173 x280) x40) (= (_ bv36 256) x284) (= x144 x269) (= x168 x110) (bvuge x159 (_ bv1 256)) (= x141 x139) (= (x66 x42) x307) (= x257 x200) (= (x277 (_ bv64 256) x210 (_ bv1 256)) x46) (= x141 (x267 x233)) (= (_ bv1 256) x189) (= x135 (_ bv961581905 256)) (= x280 (x277 (_ bv64 256) x244 x46)))) (= x234 x210))))) (and (= x104 (_ bv4 256)) (= (_ bv404098525 256) x22) (= (_ bv36 256) x213) (= x110 x118) (= (x283 x233) x212) (= x158 x202) (= x37 (x220 x174)) (= x158 (bvadd x37 x211)) (= x174 (x277 (_ bv64 256) x137 (_ bv61 256))) (not (bvugt x37 (bvadd x211 x37))) (bvule (_ bv1 256) x212) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x262))) (and (=> (and x108 (and (and (= x164 (x186 x148)) (= (bvand x252 (_ bv1461501637330902918203684832716283019655932542975 256)) x230) (= (x62 (_ bv160 256)) x288) (bvuge (_ bv340282366920938463463374607431768211455 256) x80) (= x89 (x73 x165)) (= (x62 (_ bv160 256)) x303) (= x80 (x150 x148)) (= (x277 (_ bv64 256) x230 (_ bv60 256)) x148) (= x165 (bvadd x303 (_ bv64 256))) (= x51 (bvadd x148 (_ bv1 256))) (= (ite (= (_ bv0 256) x80) (= x80 (_ bv0 256)) (= (_ bv0 256) x89)) x105) (= (x285 x288) x252) (= (x205 x51) x38) (bvule x164 (_ bv340282366920938463463374607431768211455 256))) (or (and x105 (= x156 x105)) (and (not x105) (= x156 (= x164 x16)))))) x93) (=> (and (not x108) (= x254 (_ bv0 256))) x112))) x127))
(assert (x43 (_ bv404098525 256)))
(assert (= (x277 (_ bv64 256) x230 (_ bv60 256)) (x10 (x277 (_ bv64 256) x230 (_ bv60 256)))))
(assert (x43 (_ bv1000000000000000000 256)))
(assert (= x84 (=> (and (= (x277 (_ bv64 256) x256 x59) x219) (not (bvugt x8 x123)) (= (bvadd x300 (_ bv32 256)) x25) (= x300 (x62 (_ bv160 256))) (bvule x79 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (not (bvugt x113 (_ bv1 256))) x140) (= x302 (x44 x25)) (= x59 (bvadd (_ bv1 256) x51)) (bvule (_ bv0 256) x79) (= x102 (x291 x219)) (= (x57 (_ bv128 256)) x113) (= x79 (bvmul x8 x302)) (= (bvudiv x79 (_ bv1000000000000000000 256)) x70) (= (bvadd (bvneg x102) x123) x8) (x216 x302 x8)) (and x140 (=> (= x254 x70) x112)))))
(assert (not (x43 (x277 (_ bv64 256) x137 (_ bv61 256)))))
(assert (bvugt (x277 (_ bv64 256) x218 (_ bv0 256)) (_ bv10000 256)))
(assert (not x4))
(assert (= (x10 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= x170 (and (not x13) x209)))
(assert (= x209 (and x278 x131)))
(assert (= x137 (x181 (x277 (_ bv64 256) x137 (_ bv61 256)))))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x244 x46))))
(assert (= (x10 (bvadd x51 (_ bv1 256))) (x10 x51)))
(assert (= (x101 (x277 (_ bv64 256) x210 (_ bv1 256))) (_ bv1 256)))
(assert (not (x43 (x277 (_ bv64 256) x230 (_ bv60 256)))))
(assert (= (x277 (_ bv64 256) x244 x46) (x10 (x277 (_ bv64 256) x244 x46))))
(assert (= (_ bv64 256) (x264 (x277 (_ bv64 256) x137 (_ bv61 256)))))
(assert (= (x10 (x277 (_ bv64 256) x256 (_ bv61 256))) (x277 (_ bv64 256) x256 (_ bv61 256))))
(assert (x43 (_ bv2378104546 256)))
(assert (= (_ bv0 256) (x10 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (= x100 (=> (and (= (not (bvugt x49 (_ bv1 256))) x238) (bvule x39 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (bvadd (_ bv1 256) x72) x31) (= x152 (x196 x145)) (= x136 (bvudiv x39 (_ bv1000000000000000000 256))) (= x39 (bvmul x152 x229)) (x216 x152 x229) (= (x277 (_ bv64 256) x137 x31) x71) (= (x273 (_ bv128 256)) x49) (= (bvadd (bvneg x203) x96) x229) (= x203 (x291 x71)) (bvule (_ bv0 256) x39) (= x153 (x299 (_ bv160 256))) (= (bvadd x153 (_ bv32 256)) x145) (not (bvult x96 x229))) (and (=> (= x211 x136) x127) x238))))
(assert (= (x10 x72) (x10 (bvadd x72 (_ bv1 256)))))
(assert (bvugt (x277 (_ bv64 256) x256 (_ bv0 256)) (_ bv10000 256)))
(assert (= (x101 (x277 (_ bv64 256) x218 (_ bv0 256))) (_ bv0 256)))
(assert (= (x10 (_ bv2378104546 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x126) (= (_ bv0 256) (x10 x126))))
(assert (= x247 (and x207 x58)))
(assert (= x250 (x181 (x277 (_ bv64 256) x250 (_ bv2 256)))))
(assert (= x197 (and x119 (not x108))))
(assert (= (x277 (_ bv64 256) x74 (_ bv60 256)) (x10 (x277 (_ bv64 256) x74 (_ bv60 256)))))
(assert (=> (bvule x256 (_ bv10000 256)) (= (x10 x256) (_ bv0 256))))
(assert (= (x181 (x277 (_ bv64 256) x230 (_ bv60 256))) x230))
(assert (= x74 (x181 (x277 (_ bv64 256) x74 (_ bv60 256)))))
(assert (= (x181 (x277 (_ bv64 256) x137 (_ bv0 256))) x137))
(assert (= (and x105 x56) x166))
(assert (x43 (_ bv1289409798 256)))
(assert (=> (bvule x218 (_ bv10000 256)) (= (_ bv0 256) (x10 x218))))
(assert (x43 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv0 256) (x10 (_ bv1289409798 256))))
(assert (=> (bvuge (_ bv10000 256) x42) (= (x10 x42) (_ bv0 256))))
(assert (= (x181 (x277 (_ bv64 256) x256 (_ bv61 256))) x256))
(assert (= (=> (= x207 (ite x156 x156 (not (bvugt x282 x164)))) (and (=> (and x207 (= x123 x38)) x84) (=> (and (and (or (and (= x94 x16) (not x103)) (and (= x282 x94) x103)) (= (bvult x282 x16) x103)) (not x207)) x306))) x93))
(check-sat)
(exit)
