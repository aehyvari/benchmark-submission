(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x160 ((_ BitVec 256)) Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x175 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x23 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x123 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x88 () Bool)
(declare-fun x39 () Bool)
(declare-fun x188 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x101 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x189 () Bool)
(declare-fun x195 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x199 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x162 () (_ BitVec 256))
(declare-fun x152 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x216 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x22 () Bool)
(declare-fun x16 () Bool)
(declare-fun x93 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x96 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x103 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x204 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x181 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x186 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x112 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x202 () Bool)
(declare-fun x86 () Bool)
(declare-fun x127 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x3 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x169 () Bool)
(declare-fun x102 () Bool)
(define-fun x15 ((x130 (_ BitVec 256)) (x32 (_ BitVec 256))) Bool (= x130 (bvudiv (bvmul x32 x130) x32)))
(define-fun x144 ((x130 (_ BitVec 256)) (x32 (_ BitVec 256))) Bool (= x130 (bvsdiv (bvmul x130 x32) x32)))
(define-fun x163 ((x130 (_ BitVec 256)) (x32 (_ BitVec 256))) Bool (= x130 (bvsdiv (bvmul x32 x130) x32)))
(define-fun x142 ((x129 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x45 ((x129 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x72 ((x129 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x62 ((x129 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x92 ((x129 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x210 ((x129 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x118 ((x129 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x120 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 x115) x110 (x204 x129)))
(define-fun x151 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 x50) x29 (x120 x129)))
(define-fun x100 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 (_ bv128 256)) x4 (x142 x129)))
(define-fun x85 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 (_ bv164 256)) x73 (x45 x129)))
(define-fun x59 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 (_ bv196 256)) x50 (x85 x129)))
(define-fun x133 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x129) x5 (x59 x129)))
(define-fun x149 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 (_ bv128 256)) (_ bv100 256) (x72 x129)))
(define-fun x28 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x129) x182 (x133 x129)))
(define-fun x80 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 (_ bv324 256)) x155 (x100 x129)))
(define-fun x56 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 (_ bv356 256)) x9 (x80 x129)))
(define-fun x174 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x129) x47 (x56 x129)))
(define-fun x82 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x178 x129) x44 (x186 x129)))
(define-fun x11 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 x183) x66 (x82 x129)))
(define-fun x108 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv324 256) x129) (_ bv32 256) (x210 x129)))
(define-fun x200 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x129) (_ bv1 256) (x101 x129)))
(define-fun x158 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x129 (_ bv388 256)) (bvule (_ bv356 256) x129)) (x200 (bvadd x129 (bvneg (_ bv356 256)))) (x118 x129)))
(define-fun x97 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 (_ bv420 256)) x177 (x174 x129)))
(define-fun x65 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite x96 (x174 x129) (ite x126 (x56 x129) (ite x69 (x80 x129) (ite x198 (x100 x129) (x97 x129))))))
(define-fun x113 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x33 x129) (_ bv0 256) (x65 x129)))
(define-fun x84 ((x129 (_ BitVec 256))) (_ BitVec 256) (ite (= x129 x50) x135 (x151 x129)))
(assert (= (_ bv0 256) (x23 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (bvugt (x103 (_ bv64 256) x50 x153) (_ bv10000 256)))
(assert (= (x103 (_ bv64 256) x50 x153) (x23 (x103 (_ bv64 256) x50 x153))))
(assert (x160 (_ bv599290589 256)))
(assert (= x126 (and (not x43) x181)))
(assert (= (_ bv64 256) (x93 (x103 (_ bv64 256) x50 x153))))
(assert (=> (bvule x8 (_ bv10000 256)) (= (_ bv0 256) (x23 x8))))
(assert (bvult (_ bv10000 256) (x103 (_ bv64 256) x73 (_ bv2 256))))
(assert (= (x175 (x103 (_ bv64 256) x46 (_ bv2 256))) (_ bv2 256)))
(assert (x160 (_ bv1000000000000000000 256)))
(assert (bvugt (x103 (_ bv64 256) x46 (_ bv2 256)) (_ bv10000 256)))
(assert (= x73 (x195 (x103 (_ bv64 256) x73 (_ bv2 256)))))
(assert (= (and x37 x79) x189))
(assert (=> (bvuge (_ bv10000 256) x205) (= (x23 x205) (_ bv0 256))))
(assert (= (_ bv64 256) (x93 (x103 (_ bv64 256) x8 (_ bv2 256)))))
(assert (= (x23 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (not x112))
(assert (= (x23 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x115) (= (_ bv0 256) (x23 x115))))
(assert (= (x103 (_ bv64 256) x46 (_ bv2 256)) (x23 (x103 (_ bv64 256) x46 (_ bv2 256)))))
(assert (= (x175 (x103 (_ bv64 256) x73 (_ bv2 256))) (_ bv2 256)))
(assert (= (x195 (x103 (_ bv64 256) x50 (_ bv2 256))) x50))
(assert (x160 (_ bv1165319638 256)))
(assert (= (x23 (_ bv404098525 256)) (_ bv0 256)))
(assert (= x107 (or (and (not x39) x54) x14)))
(assert (= (x93 (x103 (_ bv64 256) x73 (_ bv3 256))) (_ bv64 256)))
(assert (= x51 (and x43 x181)))
(assert (= (x175 (x103 (_ bv64 256) x50 x153)) x153))
(assert (x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256)))
(assert (= x102 (or x126 x166 x96 x69 x198)))
(assert (= (x23 (x103 (_ bv64 256) x50 (_ bv2 256))) (x103 (_ bv64 256) x50 (_ bv2 256))))
(assert (= (x175 (x103 (_ bv64 256) x8 (_ bv2 256))) (_ bv2 256)))
(assert (= (x23 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (= (x195 (x103 (_ bv64 256) x73 (_ bv3 256))) x73))
(assert (= x14 (and x54 x39)))
(assert (x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (_ bv64 256) (x93 (x103 (_ bv64 256) x46 (_ bv2 256)))))
(assert (bvugt (x103 (_ bv64 256) x8 (_ bv2 256)) (_ bv10000 256)))
(assert (= (and x67 x51) x166))
(assert (= x96 (and x51 (not x67))))
(assert (= (x195 (x103 (_ bv64 256) x46 (_ bv2 256))) x46))
(assert (not (x160 (x103 (_ bv64 256) x73 (_ bv3 256)))))
(assert (x160 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x175 (x103 (_ bv64 256) x73 (_ bv3 256))) (_ bv3 256)))
(assert (= (x23 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x160 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= (_ bv0 256) (x23 (_ bv1889567281 256))))
(assert (= (_ bv0 256) (x23 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256))))
(assert (not (x160 (x103 (_ bv64 256) x46 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x103 (_ bv64 256) x73 (_ bv3 256))))
(assert (= (x23 (_ bv1165319638 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x23 (_ bv599290589 256))))
(assert (= (and x79 (not x37)) x198))
(assert (x160 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (x160 (_ bv404098525 256)))
(assert (= (_ bv2 256) (x175 (x103 (_ bv64 256) x50 (_ bv2 256)))))
(assert (= (x195 (x103 (_ bv64 256) x8 (_ bv2 256))) x8))
(assert (= (=> (and (= (not (bvult (_ bv128 256) x58)) x199) (= x177 (x28 (_ bv256 256)))) (and x35 x199)) x171))
(assert (= (and x91 x102) x156))
(assert (=> (bvule x179 (_ bv10000 256)) (= (_ bv0 256) (x23 x179))))
(assert (= (x103 (_ bv64 256) x73 (_ bv3 256)) (x23 (x103 (_ bv64 256) x73 (_ bv3 256)))))
(assert (= (x93 (x103 (_ bv64 256) x73 (_ bv2 256))) (_ bv64 256)))
(assert (= (x23 (x103 (_ bv64 256) x8 (_ bv2 256))) (x103 (_ bv64 256) x8 (_ bv2 256))))
(assert (= (_ bv0 256) (x23 (_ bv1289409798 256))))
(assert (x160 (_ bv1889567281 256)))
(assert (= x169 (=> (and (and (= x99 (_ bv324 256)) (= x39 (bvugt x21 (_ bv0 256))) (= x41 (_ bv324 256)) (= x21 (x108 (_ bv324 256))) (= (_ bv324 256) x165)) (or (and x39 (and (bvule (_ bv32 256) x164) (= (x108 (_ bv324 256)) x164) (= x78 (x158 (_ bv356 256))) (= x78 (_ bv1 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x164))) (not x39))) x49)))
(assert (not (x160 (x103 (_ bv64 256) x50 (_ bv2 256)))))
(assert (not (x160 (x103 (_ bv64 256) x8 (_ bv2 256)))))
(assert (= (=> (and (and (and (and (and (and (= x219 (_ bv1165319638 256)) (not (bvult x191 x145)) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x4) (= (bvugt x58 (_ bv0 256)) x37) (= (x149 (_ bv128 256)) x58) (or x170 x147) (= x115 x217) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256) x71) (= x42 (x123 x50)) (not (bvugt x75 x60)) (= x125 (bvudiv x138 x40)) (bvuge x71 (_ bv1 256)) (= (bvadd x77 x71) x60) (= (bvudiv x77 x191) x25) (= (_ bv0 256) x192) (= x29 x131) (= x131 (x120 x50)) (not (bvugt x77 (bvadd x77 x71))) (= (= x191 (_ bv0 256)) x170) (= x188 (bvudiv x75 x71)) (bvule (_ bv1 256) x4) (= (bvudiv x75 x71) x4) (= x77 (bvmul (_ bv1000000000000000000 256) x191)) (= (x133 (_ bv160 256)) x201) (= x75 (bvadd x60 (bvneg (_ bv1 256)))) (= (bvmul (_ bv1000000000000000000 256) x191) x138) (= x1 (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x201)) (bvule x145 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (bvule (_ bv2 256) x60) (not (bvult (bvadd x125 x5) x125)) (= x19 (_ bv260 256)) (= (x204 x115) x110) (not (bvult x5 x145)) (= x182 (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x1)) (bvule (_ bv1 256) x42) (= x211 (bvudiv x138 (_ bv1000000000000000000 256))) (= x211 x191) (= (= x25 (_ bv1000000000000000000 256)) x147) (= x71 (bvadd x5 x125)) (= (_ bv128 256) x136) (= x17 x110) (= x140 x5)) (= x73 x217)) (= x5 x10)) (and (= x50 x46) (= x86 (= x217 x50)) (bvule (_ bv1 256) x213) (= x105 x46) (= (x186 x12) x127) (= (bvuge x127 x98) x38) (= x12 (x103 (_ bv64 256) x46 (_ bv2 256))) (= x10 x212) (= (_ bv1889567281 256) x30) (= (_ bv36 256) x167) x38 (not x86) (= x213 (x123 x179)))) (and (= x98 (bvudiv x146 x40)) (= (bvudiv x146 (_ bv1000000000000000000 256)) x31) (= x124 (x123 x50)) (= (_ bv1289409798 256) x218) (= (bvmul (_ bv1000000000000000000 256) x76) x146) (bvule (_ bv1 256) x124) (= x76 x139) (= (_ bv36 256) x68) (bvuge x40 (_ bv1 256)) (= x191 x76) (= x76 x31) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x40))) (and (= (bvult (_ bv0 256) (x123 x179)) x216) (bvule x191 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (bvule (_ bv0 256) x89) (bvule x185 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x148 (bvult (_ bv0 256) (x123 x50))) (bvule (_ bv1 256) x50) (bvule (_ bv0 256) x104) (= (_ bv4 256) x134) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x141) (bvuge x141 (_ bv0 256)) (bvuge x217 (_ bv0 256)) (bvuge x95 (_ bv1 256)) (not (= x179 x205)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x121) (= (bvugt (x123 x205) (_ bv0 256)) x159) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x179) x159 (bvule (_ bv0 256) x208) x216 x148 (= (_ bv404098525 256) x81) (bvuge x185 (_ bv0 256)) (bvule (_ bv0 256) x212) (bvuge x121 (_ bv0 256)) (= x95 (x123 x50)) (bvule x89 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x205) (= x94 (_ bv36 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x50) (bvule x208 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x106) (bvule x104 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x179 x50)) (bvuge x106 (_ bv0 256)) (bvule x212 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv0 256) x63) (not (= x50 x205)) (bvule (_ bv1 256) x205) (bvule (_ bv1 256) x179) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x217))) (and (=> (and (and (= (bvugt x58 (_ bv32 256)) x172) (= x155 (x28 (_ bv160 256)))) x37) (and (=> (and (and (= (x28 (_ bv192 256)) x9) (= (bvugt x58 (_ bv64 256)) x43)) x172) (and (=> (not x43) x35) (=> (and (and (= (bvugt x58 (_ bv96 256)) x67) (= (x28 (_ bv224 256)) x47)) x43) (and (=> (not x67) x35) (=> x67 x171))))) (=> (not x172) x35))) (=> (not x37) x35))) x112))
(assert (= (_ bv0 256) (x23 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (bvult (_ bv10000 256) (x103 (_ bv64 256) x50 (_ bv2 256))))
(assert (= (_ bv64 256) (x93 (x103 (_ bv64 256) x50 (_ bv2 256)))))
(assert (= x35 (=> (and (and (not (bvugt x5 x190)) (= x26 x52) (= x18 (_ bv324 256)) (= x183 (x103 (_ bv64 256) x50 (_ bv2 256))) (= x150 (x84 x179)) (= x33 (bvadd (_ bv324 256) x58)) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x34) (= x61 (x103 (_ bv64 256) x73 (_ bv2 256))) (= (x103 (_ bv64 256) x50 x153) x90) (= x24 (x186 x61)) (= x66 (bvadd x206 x5)) (= (_ bv599290589 256) x143) (not (bvugt x184 x190)) (= x184 (bvadd x190 (bvneg x5))) (not (bvugt x206 x66)) (= x135 x196) (= x44 (bvadd x24 (bvneg x5))) (= x116 x87) (= (x123 x179) x161) (= x73 x87) (= x91 (= x194 (_ bv0 256))) (= x180 (_ bv100 256)) (= x36 (_ bv100 256)) (= x173 (_ bv1 256)) (= x135 (x151 x50)) (= x206 (x82 x215)) (not (bvult x66 x206)) (= x190 (x152 x90)) (= (bvadd x33 (bvneg (_ bv324 256))) x180) (= x26 x140) (= x150 x119) (bvuge x161 (_ bv1 256)) (= (_ bv324 256) x111) (= (x103 (_ bv64 256) x50 (_ bv2 256)) x215) (= x194 (x108 (_ bv324 256))) (not (bvult x24 x44)) (= (x103 (_ bv64 256) x73 (_ bv2 256)) x178) (= x197 x122) (= x153 (x103 (_ bv64 256) x73 (_ bv3 256))) (= x197 x50) (not (bvugt x5 x24))) (or (not x91) (and x91 (and (= true x3) (= (x123 x179) x83) (bvule (_ bv1 256) x83))))) x169)))
(assert (= (x195 (x103 (_ bv64 256) x50 x153)) x50))
(assert (x160 (_ bv1289409798 256)))
(assert (x160 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (=> (bvuge (_ bv10000 256) x50) (= (x23 x50) (_ bv0 256))))
(assert (x160 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= x79 true))
(assert (not (x160 (x103 (_ bv64 256) x50 x153))))
(assert (= (x23 (x103 (_ bv64 256) x73 (_ bv2 256))) (x103 (_ bv64 256) x73 (_ bv2 256))))
(assert (= (or x156 (and x102 (not x91))) x54))
(assert (not (x160 (x103 (_ bv64 256) x73 (_ bv2 256)))))
(assert (x160 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (and x189 (not x172)) x69))
(assert (=> (bvuge (_ bv10000 256) x46) (= (_ bv0 256) (x23 x46))))
(assert (=> (bvuge (_ bv10000 256) x73) (= (_ bv0 256) (x23 x73))))
(assert (= (and x189 x172) x181))
(assert (= (x23 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x23 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (=> (and (and (and (= x13 (bvmul (_ bv1000000000000000000 256) x187)) (= x187 x57) (= (bvudiv x13 (_ bv1000000000000000000 256)) x64) (= x191 x187) (bvuge x203 (_ bv1 256)) (= (x123 x50) x203) (= (bvudiv x13 x188) x137) (= x132 (_ bv36 256)) (= (_ bv1289409798 256) x27) (= x187 x64)) (and (= x8 x50) (= (x11 x109) x214) (= (_ bv1889567281 256) x162) (= x8 x114) (= (bvuge x214 x137) x88) (bvuge x207 (_ bv1 256)) (= (x123 x179) x207) (= x109 (x103 (_ bv64 256) x8 (_ bv2 256))))) (and (= (_ bv4 256) x117) (bvule (_ bv1 256) x53) (= x74 (_ bv404098525 256)) (= (_ bv36 256) x168) (= x53 (x123 x50)))) x88) x49))
(check-sat)
(exit)
