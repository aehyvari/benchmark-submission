(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x4 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x137 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x247 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x206 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x280 () Bool)
(declare-fun x85 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x208 () Bool)
(declare-fun x112 () Bool)
(declare-fun x268 () Bool)
(declare-fun x248 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x28 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x288 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x246 () Bool)
(declare-fun x174 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x243 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x148 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x239 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x56 () Bool)
(declare-fun x257 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x166 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x291 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x88 () Bool)
(declare-fun x94 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x179 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x270 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x290 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x283 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x110 () Bool)
(declare-fun x60 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x104 () Bool)
(declare-fun x189 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x99 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x278 () Bool)
(declare-fun x263 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x277 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x202 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x205 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x262 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x211 () Bool)
(declare-fun x131 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x155 () Bool)
(declare-fun x261 () Bool)
(declare-fun x145 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x83 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x68 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x215 ((_ BitVec 256)) Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x192 () Bool)
(define-fun x149 ((x285 (_ BitVec 256)) (x5 (_ BitVec 256))) Bool (= x285 (bvudiv (bvmul x5 x285) x5)))
(define-fun x127 ((x285 (_ BitVec 256)) (x5 (_ BitVec 256))) Bool (= x285 (bvsdiv (bvmul x285 x5) x5)))
(define-fun x20 ((x285 (_ BitVec 256)) (x5 (_ BitVec 256))) Bool (= x285 (bvsdiv (bvmul x5 x285) x5)))
(define-fun x6 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x12 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x229 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x253 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x172 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x169 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x260 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x167 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x193 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x82 ((x184 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x64 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 x116) x239 (x68 x184)))
(define-fun x231 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 x52) x108 (x64 x184)))
(define-fun x176 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv128 256)) (_ bv1 256) (x6 x184)))
(define-fun x114 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv192 256)) (_ bv0 256) (x229 x184)))
(define-fun x188 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv224 256)) (_ bv0 256) (x172 x184)))
(define-fun x173 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x184) (_ bv0 256) (x260 x184)))
(define-fun x63 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv160 256)) (_ bv192 256) (x193 x184)))
(define-fun x80 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x184) x52 (x114 x184)))
(define-fun x55 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv320 256)) x161 (x188 x184)))
(define-fun x141 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv352 256)) x210 (x173 x184)))
(define-fun x134 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x184) (_ bv288 256) (x63 x184)))
(define-fun x97 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x213 x184) x238 (x231 x184)))
(define-fun x219 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 x92) x129 (x97 x184)))
(define-fun x70 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x102 x184) x122 (x219 x184)))
(define-fun x227 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x184) (_ bv1 256) (x12 x184)))
(define-fun x98 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv192 256)) (_ bv0 256) (x253 x184)))
(define-fun x1 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv224 256)) (_ bv0 256) (x169 x184)))
(define-fun x118 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv256 256)) (_ bv0 256) (x167 x184)))
(define-fun x160 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x184) (_ bv192 256) (x82 x184)))
(define-fun x76 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= x184 (_ bv288 256)) x52 (x98 x184)))
(define-fun x111 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x184) x51 (x1 x184)))
(define-fun x87 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x184) x210 (x118 x184)))
(define-fun x200 ((x184 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x184) (_ bv288 256) (x160 x184)))
(assert (= x233 (and (not x216) x246)))
(assert (bvugt (x277 (_ bv64 256) x31 (_ bv60 256)) (_ bv10000 256)))
(assert (= (_ bv64 256) (x290 (x277 (_ bv64 256) x16 x107))))
(assert (= (and (not x175) x268) x246))
(assert (not (x215 (x277 (_ bv64 256) x16 (_ bv61 256)))))
(assert (= (x148 (x277 (_ bv64 256) x16 x107)) (x277 (_ bv64 256) x16 x107)))
(assert (x215 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x203 (and x268 x175)))
(assert (= (_ bv2 256) (x131 (x277 (_ bv64 256) x255 (_ bv2 256)))))
(assert (= x145 (and x206 x41)))
(assert (not (x215 (x277 (_ bv64 256) x198 (_ bv60 256)))))
(assert (bvugt (x277 (_ bv64 256) x16 (_ bv0 256)) (_ bv10000 256)))
(assert (= (and x216 x246) x245))
(assert (= x26 (=> (and (not (bvult (bvadd x93 x249) x93)) (bvule (_ bv1 256) x158) (= x48 (= (_ bv0 256) x279)) (bvule x40 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (bvadd x209 (bvneg x226)) x196) (= x40 x279) (= x286 (= (_ bv1000000000000000000 256) x163)) (= x93 (bvudiv x105 x158)) (not (bvult x209 x196)) (or x286 x48) (x149 x153 x196) (= x74 (bvadd x93 x249)) (= (bvmul (_ bv1000000000000000000 256) x279) x105) (= x40 (bvmul x153 x196)) (= x212 x74) (= (bvudiv x105 x279) x163) (bvule (_ bv0 256) x40)) x139)))
(assert (= (x131 (x277 (_ bv64 256) x73 (_ bv61 256))) (_ bv61 256)))
(assert (= (x277 (_ bv64 256) x16 (_ bv0 256)) (x148 (x277 (_ bv64 256) x16 (_ bv0 256)))))
(assert (= (_ bv0 256) (x148 (_ bv649617121 256))))
(assert (bvugt (x277 (_ bv64 256) x255 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x277 (_ bv64 256) x73 (_ bv0 256)) (x148 (x277 (_ bv64 256) x73 (_ bv0 256)))))
(assert (= (x148 x143) (x148 (bvadd (_ bv1 256) x143))))
(assert (= x139 (=> (and (= x58 (bvudiv x281 (_ bv1000000000000000000 256))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x281) (= x22 (bvadd x2 (_ bv32 256))) (= x65 (bvadd (_ bv1 256) x143)) (= (x176 (_ bv128 256)) x187) (not (bvugt x84 x212)) (bvuge x281 (_ bv0 256)) (= x281 (bvmul x17 x84)) (= (x99 x121) x3) (x149 x17 x84) (= (x277 (_ bv64 256) x73 x65) x121) (= x205 (not (bvult (_ bv1 256) x187))) (= x84 (bvadd (bvneg x3) x212)) (= (x134 (_ bv160 256)) x2) (= x17 (x55 x22))) (and (=> (= x256 x58) x34) x205))))
(assert (=> (bvuge (_ bv10000 256) x255) (= (_ bv0 256) (x148 x255))))
(assert (bvugt (x277 (_ bv64 256) x16 (_ bv61 256)) (_ bv10000 256)))
(assert (= (x148 (x277 (_ bv64 256) x198 (_ bv60 256))) (x277 (_ bv64 256) x198 (_ bv60 256))))
(assert (= (=> (and (bvuge x275 (_ bv0 256)) (= x221 (bvmul (_ bv1000000000000000000 256) x96)) (or x53 x19) (= x96 x275) (not (bvugt x106 x157)) (= (bvudiv x221 x69) x180) (= (= x24 (_ bv1000000000000000000 256)) x19) (= x53 (= (_ bv0 256) x96)) (= (bvadd x284 x180) x218) (x149 x21 x106) (bvuge x69 (_ bv1 256)) (= x106 (bvadd (bvneg x237) x157)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x275) (= x218 x66) (= x24 (bvudiv x221 x96)) (not (bvult (bvadd x284 x180) x180)) (= x275 (bvmul x106 x21))) x36) x133))
(assert (=> (bvule x52 (_ bv10000 256)) (= (_ bv0 256) (x148 x52))))
(assert (x215 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not (x215 (x277 (_ bv64 256) x73 (_ bv0 256)))))
(assert (not (x215 (x277 (_ bv64 256) x16 (_ bv0 256)))))
(assert (= (_ bv64 256) (x290 (x277 (_ bv64 256) x7 (_ bv0 256)))))
(assert (= (or x112 x208) x282))
(assert (= (x290 (x277 (_ bv64 256) x73 (_ bv0 256))) (_ bv64 256)))
(assert (bvugt (x277 (_ bv64 256) x198 (_ bv60 256)) (_ bv10000 256)))
(assert (= (=> (= x9 (ite x14 x14 (not (bvugt x181 x226)))) (and (=> (and (not x9) (and (= x33 (bvugt x120 x181)) (or (and (not x33) (= x209 x120)) (and x33 (= x209 x181))))) x26) (=> (and (= x212 x249) x9) x139))) x27))
(assert (= (and (not x206) x41) x208))
(assert (= (or x232 x32) x268))
(assert (= (x243 (x277 (_ bv64 256) x7 (_ bv0 256))) x7))
(assert (x215 (_ bv2378104546 256)))
(assert (= (x148 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x148 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (and x113 x222) x278))
(assert (= (x148 (bvadd (_ bv1 256) x207)) (x148 x207)))
(assert (x215 (_ bv4294967295 256)))
(assert (= (_ bv0 256) (x131 (x277 (_ bv64 256) x7 (_ bv0 256)))))
(assert (= (x277 (_ bv64 256) x31 (_ bv60 256)) (x148 (x277 (_ bv64 256) x31 (_ bv60 256)))))
(assert (= (x148 (bvadd (_ bv1 256) x39)) (x148 x39)))
(assert (=> (bvule x73 (_ bv10000 256)) (= (_ bv0 256) (x148 x73))))
(assert (=> (bvuge (_ bv10000 256) x116) (= (x148 x116) (_ bv0 256))))
(assert (= (and (not x222) x113) x292))
(assert (x215 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= x36 (=> (and (= x288 (bvadd x66 (bvneg x234))) (= (x99 x115) x234) (= (bvadd x72 (_ bv32 256)) x242) (= (x200 (_ bv160 256)) x72) (= x265 (x111 x242)) (= (bvadd x39 (_ bv1 256)) x107) (= x115 (x277 (_ bv64 256) x16 x107)) (bvule x67 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (bvmul x265 x288) x67) (= (not (bvult (_ bv1 256) x252)) x91) (x149 x265 x288) (= x10 (bvudiv x67 (_ bv1000000000000000000 256))) (not (bvugt x288 x66)) (bvule (_ bv0 256) x67) (= x252 (x227 (_ bv128 256)))) (and (=> (= x168 x10) x211) x91))))
(assert (= (x131 (x277 (_ bv64 256) x73 (_ bv0 256))) (_ bv0 256)))
(assert (bvugt (x277 (_ bv64 256) x7 (_ bv0 256)) (_ bv10000 256)))
(assert (= (x148 (x277 (_ bv64 256) x16 (_ bv61 256))) (x277 (_ bv64 256) x16 (_ bv61 256))))
(assert (=> (bvule x213 (_ bv10000 256)) (= (_ bv0 256) (x148 x213))))
(assert (x215 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x112 (or x203 x146)))
(assert (= (x277 (_ bv64 256) x7 (_ bv0 256)) (x148 (x277 (_ bv64 256) x7 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x102) (= (_ bv0 256) (x148 x102))))
(assert (= x280 (and (not x9) x189)))
(assert (= x34 (=> (and (and (= x263 (_ bv4 256)) (= (_ bv404098525 256) x152) (= (_ bv36 256) x42) (= x170 x293) (= (x94 x52) x162) (= x136 x250) (= x100 (x179 x159)) (= x136 (bvadd x100 x256)) (= x159 (x277 (_ bv64 256) x73 (_ bv61 256))) (not (bvugt x100 (bvadd x256 x100))) (bvule (_ bv1 256) x162) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x210)) (and (and (= x293 x7) (= (_ bv4 256) x272) (= (_ bv36 256) x135) (= (x94 x52) x254) (bvuge x254 (_ bv1 256)) (= (_ bv404098525 256) x125) (bvuge (_ bv20282409603651670423947251286015 256) x259) (= (x277 (_ bv64 256) x7 (_ bv0 256)) x174) (bvule (_ bv1 256) x18) (= x202 (bvuge x210 x259)) x202 (= x109 (_ bv1889567281 256)) (= x259 (x283 x174)) (= x18 (x94 x52)) (= x264 x7)) (and (and (and (= x255 x25) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x61) (= (x262 x177) x30) (bvuge x61 (_ bv4 256)) x155 (= x52 x255) (= (_ bv1889567281 256) x103) (= (bvule x201 x30) x155) (= x177 (x277 (_ bv64 256) x255 (_ bv2 256))) (= (x94 x92) x89) (bvule (_ bv1 256) x89)) (and (and (= x170 x186) (= x213 x273) (= x50 (_ bv36 256)) (= (x231 x213) x238) (= x185 x238) (= (x94 x92) x57) (bvuge x57 (_ bv1 256)) (= x49 x129) (= (_ bv649617121 256) x142) (= x49 (x97 x92))) (and (= x16 x186) (and (= x119 x236) (and (= (x277 (_ bv64 256) x16 (_ bv0 256)) x244) (= x251 x11) (= (x94 x52) x156) (= (x227 (_ bv128 256)) x37) (= x11 (x70 x52)) (bvuge x156 (_ bv1 256)) (= (bvugt x37 (_ bv0 256)) x206) (= (_ bv2378104546 256) x43) (= (x219 x102) x122) (bvuge (_ bv20282409603651670423947251286015 256) x51) (= x126 x122) (= x102 x273) (= (x283 x244) x51) (= x217 (_ bv128 256)) (= x224 x16)))))) (and (= x223 (_ bv1289409798 256)) (= x138 x210) (bvule x225 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x138 x124) (= x15 (x94 x52)) (= (_ bv36 256) x77) (bvuge x225 (_ bv1 256)) (= x75 x138) (= (bvudiv x79 (_ bv1000000000000000000 256)) x124) (bvuge x15 (_ bv1 256)) (= (bvmul x138 (_ bv1000000000000000000 256)) x79) (= (bvudiv x79 x225) x201))))) (and (=> (and x206 (and (or (and (= x23 x81) x23) (and (= (= x236 x237) x81) (not x23))) (and (= x69 (x87 x45)) (= x39 (bvadd x258 (_ bv1 256))) (= (x28 x39) x284) (bvule x237 (_ bv340282366920938463463374607431768211455 256)) (= x266 (x200 (_ bv160 256))) (= x237 (x247 x258)) (= (x200 (_ bv160 256)) x199) (bvuge (_ bv340282366920938463463374607431768211455 256) x21) (= x198 (bvand x86 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x258 (x277 (_ bv64 256) x198 (_ bv60 256))) (= x23 (ite (= x21 (_ bv0 256)) (= (_ bv0 256) x21) (= x69 (_ bv0 256)))) (= (x137 x258) x21) (= (x76 x266) x86) (= (bvadd x199 (_ bv64 256)) x45)))) x88) (=> (and (not x206) (= (_ bv0 256) x168)) x211)))))
(assert (= (x148 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= x235 (and x90 x278)))
(assert (x215 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x16 (x243 (x277 (_ bv64 256) x16 x107))))
(assert (x215 (_ bv1889567281 256)))
(assert (= (x243 (x277 (_ bv64 256) x255 (_ bv2 256))) x255))
(assert (bvugt (x277 (_ bv64 256) x16 x107) (_ bv10000 256)))
(assert (= (x148 (x277 (_ bv64 256) x73 x65)) (x277 (_ bv64 256) x73 x65)))
(assert (= (_ bv61 256) (x131 (x277 (_ bv64 256) x16 (_ bv61 256)))))
(assert (= (x243 (x277 (_ bv64 256) x16 (_ bv61 256))) x16))
(assert (= x31 (x243 (x277 (_ bv64 256) x31 (_ bv60 256)))))
(assert (bvugt (x277 (_ bv64 256) x73 (_ bv61 256)) (_ bv10000 256)))
(assert (= x107 (x131 (x277 (_ bv64 256) x16 x107))))
(assert (= (x148 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (x148 (x277 (_ bv64 256) x73 (_ bv61 256))) (x277 (_ bv64 256) x73 (_ bv61 256))))
(assert (not (x215 (x277 (_ bv64 256) x7 (_ bv0 256)))))
(assert (= x211 (=> (and (= (bvuge x165 x250) x261) (= x240 x165) (= x240 (bvadd x54 x168)) (= (x179 x294) x54) (= (x277 (_ bv64 256) x16 (_ bv61 256)) x294) (not (bvult (bvadd x54 x168) x54))) x261)))
(assert (= (x148 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (x215 (_ bv1000000000000000000 256)))
(assert (= (x148 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (not (x215 (x277 (_ bv64 256) x16 x107))))
(assert (= (_ bv0 256) (x148 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (_ bv64 256) (x290 (x277 (_ bv64 256) x73 x65))))
(assert (not (x215 (x277 (_ bv64 256) x73 (_ bv61 256)))))
(assert (= (_ bv60 256) (x131 (x277 (_ bv64 256) x31 (_ bv60 256)))))
(assert (= (and (not x90) x278) x166))
(assert (= x62 (or x46 x60)))
(assert (not (x215 (x277 (_ bv64 256) x31 (_ bv60 256)))))
(assert (= (x148 (_ bv2378104546 256)) (_ bv0 256)))
(assert (= (x290 (x277 (_ bv64 256) x31 (_ bv60 256))) (_ bv64 256)))
(assert (= (_ bv64 256) (x290 (x277 (_ bv64 256) x198 (_ bv60 256)))))
(assert (not (x215 (x277 (_ bv64 256) x73 x65))))
(assert (= (or x233 x245) x146))
(assert (= (x148 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (x148 (bvadd (_ bv1 256) x258)) (x148 x258)))
(assert (= (x243 (x277 (_ bv64 256) x198 (_ bv60 256))) x198))
(assert (= (_ bv0 256) (x131 (x277 (_ bv64 256) x16 (_ bv0 256)))))
(assert (= (x243 (x277 (_ bv64 256) x73 x65)) x73))
(assert (= (x148 (_ bv1889567281 256)) (_ bv0 256)))
(assert (=> (bvule x7 (_ bv10000 256)) (= (_ bv0 256) (x148 x7))))
(assert (= x32 (and x23 x145)))
(assert (= (_ bv64 256) (x290 (x277 (_ bv64 256) x255 (_ bv2 256)))))
(assert (= (x148 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (or x62 x248) x257))
(assert (= x128 (=> (and (and (= x73 x123) (and (= x120 x119) (and (= x38 x108) (= x197 (x277 (_ bv64 256) x73 (_ bv0 256))) (= (x68 x116) x239) (= x116 x273) (= (x283 x197) x161) (= x182 x73) (bvule x161 (_ bv20282409603651670423947251286015 256)) (= (x176 (_ bv128 256)) x241) (= (x94 x52) x220) (= x222 (bvugt x241 (_ bv0 256))) (bvule (_ bv1 256) x220) (= x239 x78) (= x38 (x64 x52)) (= (_ bv128 256) x271) (= (_ bv2378104546 256) x228)))) (and (bvule x204 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x4 (bvule (_ bv0 256) x119) (not (= x52 x92)) (bvuge (_ bv4294967295 256) x276) (bvule x273 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x214 x92)) (bvule (_ bv0 256) x204) (bvuge x170 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x52) (bvuge x92 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x117) (bvuge x273 (_ bv0 256)) (= x267 (_ bv0 256)) (bvule (_ bv0 256) x178) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x119) (bvule x214 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x274 (_ bv0 256)) (= (bvugt (x94 x92) (_ bv0 256)) x4) (= (_ bv36 256) x132) (not (= x214 x52)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x13) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x71) (bvule (_ bv0 256) x117) x287 (bvule x35 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x192 (bvult (_ bv0 256) (x94 x214))) (= (bvult (_ bv0 256) (x94 x52)) x287) (bvuge x276 (_ bv0 256)) (= x170 x123) x192 (bvule x195 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x71 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x92) (bvuge x13 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x274) (bvule (_ bv0 256) x195) (bvuge x35 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x170) (bvuge x52 (_ bv1 256)) (bvule x178 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x214 (_ bv1 256)))) (and (=> (and (and (and (= x190 (bvadd (_ bv64 256) x191)) (= x207 (x277 (_ bv64 256) x31 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x153) (= x158 (x141 x190)) (= x31 (bvand x270 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x153 (_ bv0 256)) (= x153 (_ bv0 256)) (= x158 (_ bv0 256))) x90) (= x143 (bvadd (_ bv1 256) x207)) (= x226 (x247 x207)) (bvuge (_ bv340282366920938463463374607431768211455 256) x226) (= x191 (x134 (_ bv160 256))) (= x249 (x28 x143)) (= x153 (x137 x207)) (= (x80 x289) x270) (= (x134 (_ bv160 256)) x289)) (or (and x90 (= x90 x14)) (and (not x90) (= x14 (= x120 x226))))) x222) x27) (=> (and (= x256 (_ bv0 256)) (not x222)) x34)))))
(assert (= (x290 (x277 (_ bv64 256) x16 (_ bv0 256))) (_ bv64 256)))
(assert (= (x243 (x277 (_ bv64 256) x73 (_ bv61 256))) x73))
(assert (= x88 (=> (= x175 (ite x81 x81 (not (bvult x237 x181)))) (and (=> (and (= x66 x284) x175) x36) (=> (and (and (= (bvult x181 x236) x216) (or (and (= x157 x236) (not x216)) (and x216 (= x157 x181)))) (not x175)) x133)))))
(assert (= (x148 (_ bv404098525 256)) (_ bv0 256)))
(assert (x215 (_ bv20282409603651670423947251286015 256)))
(assert (=> (bvuge (_ bv10000 256) x92) (= (x148 x92) (_ bv0 256))))
(assert (= (x243 (x277 (_ bv64 256) x16 (_ bv0 256))) x16))
(assert (= (or x292 x257) x41))
(assert (x215 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (x215 (_ bv404098525 256)))
(assert (= (x148 (x277 (_ bv64 256) x255 (_ bv2 256))) (x277 (_ bv64 256) x255 (_ bv2 256))))
(assert (=> (bvule x16 (_ bv10000 256)) (= (x148 x16) (_ bv0 256))))
(assert (= (and (not x33) x280) x60))
(assert (= (_ bv60 256) (x131 (x277 (_ bv64 256) x198 (_ bv60 256)))))
(assert (x215 (_ bv1289409798 256)))
(assert (= (and x145 (not x23)) x232))
(assert (x215 (_ bv649617121 256)))
(assert (= x248 (and x9 x189)))
(assert (=> (bvuge (_ bv10000 256) x214) (= (_ bv0 256) (x148 x214))))
(assert (= (_ bv64 256) (x290 (x277 (_ bv64 256) x16 (_ bv61 256)))))
(assert (=> (bvuge (_ bv10000 256) x198) (= (_ bv0 256) (x148 x198))))
(assert (= x65 (x131 (x277 (_ bv64 256) x73 x65))))
(assert (= (_ bv0 256) (x148 (_ bv1289409798 256))))
(assert (not (x215 (x277 (_ bv64 256) x255 (_ bv2 256)))))
(assert (= (x243 (x277 (_ bv64 256) x73 (_ bv0 256))) x73))
(assert (bvugt (x277 (_ bv64 256) x73 x65) (_ bv10000 256)))
(assert (= x46 (and x280 x33)))
(assert (bvult (_ bv10000 256) (x277 (_ bv64 256) x73 (_ bv0 256))))
(assert (= (_ bv64 256) (x290 (x277 (_ bv64 256) x73 (_ bv61 256)))))
(assert (= x113 true))
(assert (not x128))
(assert (= x189 (or x235 x166)))
(assert (=> (bvuge (_ bv10000 256) x31) (= (_ bv0 256) (x148 x31))))
(check-sat)
(exit)
