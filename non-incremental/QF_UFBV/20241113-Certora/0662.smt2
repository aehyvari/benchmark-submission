(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x65 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x71 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x24 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x45 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x4 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x73 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x36 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x18 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x59 ((_ BitVec 256)) Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x7 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(define-fun x28 ((x67 (_ BitVec 256)) (x38 (_ BitVec 256))) Bool (= x67 (bvudiv (bvmul x38 x67) x38)))
(define-fun x66 ((x67 (_ BitVec 256)) (x38 (_ BitVec 256))) Bool (= x67 (bvsdiv (bvmul x67 x38) x38)))
(define-fun x29 ((x67 (_ BitVec 256)) (x38 (_ BitVec 256))) Bool (= x67 (bvsdiv (bvmul x38 x67) x38)))
(define-fun x25 ((x46 (_ BitVec 256))) (_ BitVec 256) (ite (= x46 x56) x37 (x65 x46)))
(assert (= (=> (and (and (and (and (and (= (x18 x6) x9) (= (_ bv4 256) x72) (= x56 x85) (bvuge x9 (_ bv1 256)) (bvule (_ bv1 256) x13) (= x30 (_ bv2167012380 256)) (= x83 (_ bv6 256)) (= (_ bv404098525 256) x44) (= x13 (x18 x6)) (= (x25 x6) x2) (= x37 (x65 x56)) (= x37 x34) (= x75 (_ bv36 256)) (bvule x61 (_ bv5 256)) (= x27 x2) (= x40 (_ bv6 256))) (and (and (= x22 (bvmul (_ bv1000000000000000000 256) x16)) (= x16 x82) (= x33 (bvudiv x22 (_ bv1000000000000000000 256))) (= x16 x70) (= x42 (_ bv1289409798 256)) (= (bvudiv x22 x78) x60) (= x33 x16) (= (x18 x6) x68) (bvule (_ bv1 256) x68) (= x49 (_ bv36 256))) (and (= x80 x6) (bvule (_ bv1 256) x11) (= x35 x80) (= (bvuge x53 x60) x69) (= x74 (x45 (_ bv64 256) x80 (_ bv2 256))) (= x11 (x18 x79)) (= x53 (x71 x74)) (= x15 (_ bv1889567281 256))))) (and (= x43 (x18 x79)) x12 (= x58 (x45 (_ bv64 256) x32 (_ bv2 256))) (= (bvule x57 x1) x12) (= x32 x87) (= (_ bv1889567281 256) x48) (= x6 x32) (bvule (_ bv1 256) x43) (= (x71 x58) x1))) (and (= (_ bv36 256) x86) (= x70 x62) (= x84 (bvudiv x17 (_ bv1000000000000000000 256))) (bvule (_ bv1 256) x54) (= x17 (bvmul x62 (_ bv1000000000000000000 256))) (= (bvudiv x17 x78) x57) (= x62 x84) (= x63 (_ bv1289409798 256)) (= x62 x39) (bvule (_ bv1 256) x78) (bvule x78 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x54 (x18 x6)))) (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x77) (bvule (_ bv0 256) x41) (= x8 (_ bv0 256)) (bvuge x85 (_ bv0 256)) (bvule x6 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x4 (bvugt (x18 x79) (_ bv0 256))) (bvule x81 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge x77 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x52) (= (bvugt (x18 x6) (_ bv0 256)) x14) (bvuge (_ bv4294967295 256) x3) (not (= x79 x6)) (bvule (_ bv0 256) x64) (= x19 (_ bv4 256)) x24 (not (= x6 x77)) (bvuge x52 (_ bv0 256)) (= x51 (_ bv404098525 256)) (bvule x64 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x79 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x79 (_ bv1 256)) (bvule (_ bv4 256) x81) (bvule (_ bv0 256) x23) (= x21 (x18 x6)) (= (bvult (_ bv0 256) (x18 x77)) x24) (bvuge x50 (_ bv0 256)) (bvule x50 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv1 256) x6) (bvule (_ bv0 256) x3) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x47) (= (_ bv36 256) x20) (bvule (_ bv0 256) x10) (bvuge x21 (_ bv1 256)) (bvule x70 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (bvule (_ bv0 256) x47) x4 (not (= x79 x77)) (bvule x5 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x85) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x26) (bvule x41 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x14 (bvule (_ bv0 256) x26) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x23) (bvule (_ bv0 256) x5) (bvule x10 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) x69) x76))
(assert (= (_ bv0 256) (x36 (_ bv1000000000000000000 256))))
(assert (= (x36 (_ bv1889567281 256)) (_ bv0 256)))
(assert (x59 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x59 (_ bv1889567281 256)))
(assert (= (x36 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (x59 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (x36 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (x36 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x36 (x45 (_ bv64 256) x80 (_ bv2 256))) (x45 (_ bv64 256) x80 (_ bv2 256))))
(assert (= (x7 (x45 (_ bv64 256) x80 (_ bv2 256))) (_ bv64 256)))
(assert (= (x36 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (x31 (x45 (_ bv64 256) x32 (_ bv2 256))) (_ bv2 256)))
(assert (= (_ bv2 256) (x31 (x45 (_ bv64 256) x80 (_ bv2 256)))))
(assert (x59 (_ bv2167012380 256)))
(assert (=> (bvule x80 (_ bv10000 256)) (= (_ bv0 256) (x36 x80))))
(assert (x59 (_ bv404098525 256)))
(assert (= (x36 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (x36 (_ bv2167012380 256)) (_ bv0 256)))
(assert (x59 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (not x76))
(assert (x59 (_ bv1000000000000000000 256)))
(assert (= (_ bv0 256) (x36 (_ bv4294967295 256))))
(assert (= true x55))
(assert (bvult (_ bv10000 256) (x45 (_ bv64 256) x32 (_ bv2 256))))
(assert (x59 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (x59 (_ bv4294967295 256)))
(assert (bvugt (x45 (_ bv64 256) x80 (_ bv2 256)) (_ bv10000 256)))
(assert (=> (bvule x56 (_ bv10000 256)) (= (_ bv0 256) (x36 x56))))
(assert (= (_ bv0 256) (x36 (_ bv1289409798 256))))
(assert (=> (bvule x6 (_ bv10000 256)) (= (_ bv0 256) (x36 x6))))
(assert (= (_ bv64 256) (x7 (x45 (_ bv64 256) x32 (_ bv2 256)))))
(assert (=> (bvule x79 (_ bv10000 256)) (= (x36 x79) (_ bv0 256))))
(assert (not (x59 (x45 (_ bv64 256) x80 (_ bv2 256)))))
(assert (= x32 (x73 (x45 (_ bv64 256) x32 (_ bv2 256)))))
(assert (= (_ bv0 256) (x36 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (not (x59 (x45 (_ bv64 256) x32 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x32) (= (x36 x32) (_ bv0 256))))
(assert (x59 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (=> (bvuge (_ bv10000 256) x77) (= (_ bv0 256) (x36 x77))))
(assert (= (x73 (x45 (_ bv64 256) x80 (_ bv2 256))) x80))
(assert (= (x36 (x45 (_ bv64 256) x32 (_ bv2 256))) (x45 (_ bv64 256) x32 (_ bv2 256))))
(assert (x59 (_ bv1289409798 256)))
(check-sat)
(exit)
