(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x307 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x130 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x112 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x230 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x67 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x336 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x222 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x256 () Bool)
(declare-fun x298 () Bool)
(declare-fun x265 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x2 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x371 () Bool)
(declare-fun x331 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x386 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x24 () Bool)
(declare-fun x228 () Bool)
(declare-fun x69 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x217 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x361 () Bool)
(declare-fun x378 () Bool)
(declare-fun x313 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x117 () Bool)
(declare-fun x372 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x288 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x375 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x326 () Bool)
(declare-fun x381 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x156 () Bool)
(declare-fun x348 () Bool)
(declare-fun x304 () (_ BitVec 256))
(declare-fun x345 () Bool)
(declare-fun x318 () Bool)
(declare-fun x332 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x334 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x231 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x349 () Bool)
(declare-fun x9 () Bool)
(declare-fun x140 () Bool)
(declare-fun x370 () Bool)
(declare-fun x79 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x356 () Bool)
(declare-fun x40 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x148 () Bool)
(declare-fun x300 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x172 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x96 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x94 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x376 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x327 () Bool)
(declare-fun x53 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x259 () Bool)
(declare-fun x232 () (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x180 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x328 () (_ BitVec 256))
(declare-fun x362 () Bool)
(declare-fun x359 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x385 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x367 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x368 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x344 () (_ BitVec 256))
(declare-fun x296 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x316 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x353 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x373 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x329 () Bool)
(declare-fun x289 () Bool)
(declare-fun x152 () Bool)
(declare-fun x151 () Bool)
(declare-fun x357 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x377 () (_ BitVec 256))
(declare-fun x233 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x333 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x290 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x295 () Bool)
(declare-fun x241 () Bool)
(declare-fun x93 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x32 ((_ BitVec 256)) Bool)
(declare-fun x264 () Bool)
(declare-fun x167 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x309 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x339 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x346 () (_ BitVec 256))
(declare-fun x347 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x168 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x21 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x199 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x338 () Bool)
(declare-fun x190 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x138 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x379 () Bool)
(declare-fun x159 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x271 () Bool)
(declare-fun x127 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x95 () Bool)
(declare-fun x384 () (_ BitVec 256))
(declare-fun x363 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x319 () Bool)
(declare-fun x254 () Bool)
(declare-fun x317 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x263 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x144 () Bool)
(declare-fun x1 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x285 () (_ BitVec 256))
(declare-fun x88 () Bool)
(declare-fun x312 () (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x302 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x354 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x125 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x330 () Bool)
(declare-fun x218 () Bool)
(declare-fun x246 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x229 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x352 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x104 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x365 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x337 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x335 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x110 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x325 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x20 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x323 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x249 () Bool)
(declare-fun x342 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x3 () Bool)
(declare-fun x226 () (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x38 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x360 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x322 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x382 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x341 () (_ BitVec 256))
(declare-fun x181 () Bool)
(declare-fun x299 () Bool)
(declare-fun x294 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x133 () Bool)
(define-fun x261 ((x306 (_ BitVec 256)) (x274 (_ BitVec 256))) Bool (= x306 (bvudiv (bvmul x274 x306) x274)))
(define-fun x350 ((x306 (_ BitVec 256)) (x274 (_ BitVec 256))) Bool (= x306 (bvsdiv (bvmul x306 x274) x274)))
(define-fun x46 ((x306 (_ BitVec 256)) (x274 (_ BitVec 256))) Bool (= x306 (bvsdiv (bvmul x274 x306) x274)))
(define-fun x162 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x134 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x287 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x383 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x70 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x366 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x297 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x54 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x30 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x66 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x308 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x387 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x158 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x109 ((x321 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x235 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x305) x282 (x1 x321)))
(define-fun x25 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x262) x68 (x134 x321)))
(define-fun x380 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x185) x285 (x25 x321)))
(define-fun x194 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x15) x115 (x287 x321)))
(define-fun x123 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x231) x39 (x380 x321)))
(define-fun x182 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x269 x321) x165 (x67 x321)))
(define-fun x145 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x141) x80 (x2 x321)))
(define-fun x209 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x141 x321) x184 (x199 x321)))
(define-fun x340 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x141) x245 (x182 x321)))
(define-fun x136 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x141) x351 (x145 x321)))
(define-fun x58 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x141 x321) x27 (x209 x321)))
(define-fun x374 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x141 x321) x312 (x21 x321)))
(define-fun x277 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite x73 (x199 x321) (ite x361 (x199 x321) (x58 x321))))
(define-fun x57 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite x73 (x182 x321) (ite x361 (x182 x321) (x340 x321))))
(define-fun x369 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite x73 (x2 x321) (ite x361 (x2 x321) (x136 x321))))
(define-fun x52 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite x73 (x21 x321) (ite x361 (x21 x321) (x374 x321))))
(define-fun x358 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x201 x321) x173 (x369 x321)))
(define-fun x195 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x201 x321) x97 (x277 x321)))
(define-fun x355 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 (_ bv192 256)) x359 (x162 x321)))
(define-fun x244 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite x260 (ite x24 (x162 x321) (x355 x321)) (x162 x321)))
(define-fun x343 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 (_ bv192 256)) x183 (x244 x321)))
(define-fun x11 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite x259 (x244 x321) (x343 x321)))
(define-fun x111 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 (_ bv192 256)) x83 (x11 x321)))
(define-fun x77 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 (_ bv224 256)) x196 (x111 x321)))
(define-fun x12 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite x18 (x11 x321) (x77 x321)))
(define-fun x120 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv192 256) x321) x45 (x12 x321)))
(define-fun x19 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x15 x321) (_ bv41436628393252172163539528543619094058851530980360706587524068930525597794304 256) (x120 x321)))
(define-fun x224 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x293) x83 (x19 x321)))
(define-fun x364 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x139 x321) (_ bv0 256) (x224 x321)))
(define-fun x208 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x22) x98 (x364 x321)))
(define-fun x268 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x143 x321) (_ bv0 256) (x208 x321)))
(define-fun x324 ((x321 (_ BitVec 256))) (_ BitVec 256) (ite (= x321 x252) x45 (x268 x321)))
(assert (= x95 (or x175 x357)))
(assert (= (x125 (x20 (_ bv64 256) x83 (_ bv61 256))) (_ bv64 256)))
(assert (x32 (_ bv1000000000000000000 256)))
(assert (= (=> (= x15 x202) x218) x239))
(assert (= (x112 (_ bv41436628393252172163539528543619094058851530980360706587524068930525597794304 256)) (_ bv0 256)))
(assert (bvult (_ bv10000 256) (x20 (_ bv64 256) x83 (_ bv71 256))))
(assert (= (or x356 x108) x5))
(assert (x32 (_ bv4722366482869645213695 256)))
(assert (= (_ bv72 256) (x104 (x20 (_ bv64 256) x83 (_ bv72 256)))))
(assert (= x18 (and x140 x14)))
(assert (= (_ bv0 256) (x112 (_ bv20282409603651670423947251286014 256))))
(assert (= (and x329 x38) x249))
(assert (x32 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)))
(assert (= (and x254 x234) x243))
(assert (x32 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= x108 (and x10 x342)))
(assert (= (x125 (x20 (_ bv64 256) x83 x341)) (_ bv64 256)))
(assert (x32 (_ bv105312291668557186697918027683670432318895095400549111254310977534 256)))
(assert (= x192 (or x18 x105)))
(assert (= (x325 (x20 (_ bv64 256) x83 (_ bv72 256))) x83))
(assert (= x172 (or x214 x256)))
(assert (= (=> (and (= x6 (bvmul (_ bv1000000000000000000 256) x34)) (bvule x61 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (bvmul x72 x236) x61) (= (bvadd x28 x41) x300) (x261 x236 x72) (= x300 x359) (= (= x34 (_ bv0 256)) x246) (= x278 (= x59 (_ bv1000000000000000000 256))) (= (bvudiv x6 x34) x59) (bvule (_ bv0 256) x61) (bvuge x257 (_ bv1 256)) (not (bvugt x72 x119)) (= x72 (bvadd x119 (bvneg x335))) (= x41 (bvudiv x6 x257)) (not (bvult (bvadd x28 x41) x41)) (= x34 x61) (or x278 x246)) x17) x69))
(assert (not (x32 (x20 (_ bv64 256) x83 x341))))
(assert (not (x32 (x20 (_ bv64 256) x83 (_ bv62 256)))))
(assert (= x83 (x325 (x20 (_ bv64 256) x83 (_ bv71 256)))))
(assert (= x345 (=> (and (bvule (_ bv1 256) x98) (= (x2 x267) x272) (= x267 (x20 (_ bv64 256) x83 (_ bv0 256))) (= x222 (bvudiv x64 (_ bv1000000000000000000 256))) (= x60 (x21 x267)) (bvuge (_ bv4722366482869645213695 256) x272) (bvuge (_ bv20282409603651670423947251286015 256) x237) (bvule (_ bv1 256) x154) (= x45 x222) (= (x199 x267) x100) (= (_ bv0 256) x44) (bvuge (_ bv3 256) x60) (= x74 (bvadd (bvneg x45) x98)) (= x98 (x67 x26)) (not (bvugt x45 x98)) (= (_ bv416 256) x303) (= (x20 (_ bv64 256) x83 (_ bv0 256)) x269) (= x285 (bvudiv x64 x154)) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x154) (= x64 (bvmul x45 (_ bv1000000000000000000 256))) (= x315 (bvadd (bvneg x45) x98)) (= (bvadd (bvneg x45) x257) x206) (= x26 (x20 (_ bv64 256) x83 (_ bv0 256))) (= x78 (_ bv0 256)) (bvule x74 (_ bv20282409603651670423947251286014 256)) (= x237 (x182 x267)) (bvule x98 (_ bv20282409603651670423947251286015 256)) (bvuge (_ bv4722366482869645213695 256) x100) (not (bvugt x74 x98)) (= (bvand (_ bv20282409603651670423947251286015 256) x315) x165) (= x376 (= (_ bv0 256) x60))) (and (=> (and (= (_ bv512 256) x15) x376) x218) (=> (and (not x376) (and (or (and (not x10) (and (bvule x232 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x20 (_ bv64 256) x83 (_ bv71 256)) x84) (= x292 x232) (= (x167 x84) x232))) (and (= (_ bv0 256) x292) x10)) (and (= x10 (= x187 (_ bv0 256))) (= x178 (_ bv0 256)) (= x187 (bvand x60 (_ bv1 256)))))) x149)))))
(assert (not (x32 (x20 (_ bv64 256) x83 (_ bv71 256)))))
(assert (= (or x53 x153) x254))
(assert (= (x112 (_ bv4722366482869645213695 256)) (_ bv0 256)))
(assert (= (x112 (_ bv105312291668557186697918027683670432318895095400549111254310977534 256)) (_ bv0 256)))
(assert (= (x325 (x20 (_ bv64 256) x83 (_ bv62 256))) x83))
(assert (= x175 (or x317 x249)))
(assert (= (and (not x14) x140) x105))
(assert (= (x104 (x20 (_ bv64 256) x83 x341)) x341))
(assert (= x83 (x325 (x20 (_ bv64 256) x83 x341))))
(assert (not (x32 (x20 (_ bv64 256) x137 (_ bv60 256)))))
(assert (= (and x379 (not x157)) x101))
(assert (= x151 (=> (= (= (_ bv0 256) x81) x330) (and (=> x330 x372) (=> (and (and (or (and (not x48) (and (= x368 (x96 x255)) (bvule x107 (_ bv105312291668557186697918027683670432318895095400549111254310977534 256)) (= x255 (x20 (_ bv64 256) x83 (_ bv62 256))) (= (bvadd (bvneg x45) x368) x107) (bvule (_ bv1 256) x368) (bvule x368 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))) x48) (and (= x48 (= (_ bv0 256) x219)) (bvule x223 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (bvule (_ bv1 256) x223) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977534 256) x219) (= x219 (bvadd x223 (bvneg x45))) (not (bvult x223 x219)))) (not x330)) x7)))))
(assert (= (x112 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (x112 (x20 (_ bv64 256) x83 x341)) (x20 (_ bv64 256) x83 x341)))
(assert (=> (bvuge (_ bv10000 256) x128) (= (_ bv0 256) (x112 x128))))
(assert (= (and (not x191) x203) x295))
(assert (= (x325 (x20 (_ bv64 256) x292 (_ bv0 256))) x292))
(assert (= x271 (and x318 x48)))
(assert (=> (bvuge (_ bv10000 256) x83) (= (x112 x83) (_ bv0 256))))
(assert (= (_ bv0 256) (x104 (x20 (_ bv64 256) x83 (_ bv0 256)))))
(assert (= x348 (and x203 x191)))
(assert (= (x125 (x20 (_ bv64 256) x83 (_ bv71 256))) (_ bv64 256)))
(assert (bvult (_ bv10000 256) (x20 (_ bv64 256) x83 x341)))
(assert (=> (bvule x137 (_ bv10000 256)) (= (x112 x137) (_ bv0 256))))
(assert (= (_ bv0 256) (x112 (_ bv10000000000 256))))
(assert (= x353 (=> (and (and (bvule x346 (_ bv20282409603651670423947251286015 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x179) (= (x217 x137) x354) (bvuge x310 (_ bv0 256)) (bvule x137 (_ bv1461501637330902918203684832716283019655932542975 256)) x283 (bvule (_ bv0 256) x216) (= (_ bv0 256) x207) (bvule x75 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x216) (bvule x322 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x137) (bvuge x56 (_ bv0 256)) (= x68 (x93 (_ bv4 256))) (bvule (_ bv0 256) x4) (bvuge x242 (_ bv1 256)) (bvuge x250 (_ bv0 256)) (bvuge x346 (_ bv1 256)) (= x323 x68) (= x346 x31) (bvule x242 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x4) (= (_ bv1637409077 256) x171) (= x346 (x93 (_ bv36 256))) (bvuge x75 (_ bv0 256)) (= x283 (bvugt (x217 x137) (_ bv0 256))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x106) (bvule (_ bv1 256) x354) (bvule (_ bv1 256) x212) (bvule (_ bv1 256) x377) (bvule (_ bv68 256) x106) (bvuge x367 (_ bv0 256)) (not (= x137 x212)) x88 (= x89 (_ bv4 256)) (bvule x375 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x56) (bvule (_ bv0 256) x322) (bvule (_ bv0 256) x179) (bvule x367 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x375) (bvule x250 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x212 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv4294967295 256) x310) (bvule x68 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x88 (bvult (_ bv0 256) (x217 x212)))) (and (= x242 x83) (and (and (or x157 (and (and (not (bvult x198 x63)) (not (bvult x385 x63)) (= (bvadd x198 (bvneg x215)) x63) (not (bvult (bvadd x81 x302) x81)) (not (bvult x198 x220)) (not (bvult (bvadd x81 x302) x81)) (= x220 (bvadd x81 x302)) (= x215 (bvadd x302 x81))) (not x157))) (and (= x161 (_ bv513435984 256)) (= x266 x76) (= x99 x323) (= (bvugt x347 (_ bv0 256)) x157) (= x31 x124) (= x150 (x20 (_ bv64 256) x83 (_ bv62 256))) (= x242 x305) (bvuge (_ bv255 256) x347) (= x247 x282) (bvule (_ bv1 256) x116) (bvuge (_ bv1099511627775 256) x81) (= x116 (x217 x137)) (= x223 (x96 x150)) (= x81 (x180 x150)) (= (x1 x305) x282) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x223) (= x76 (x235 x137)))) (= x198 x56)))) x197)))
(assert (= (x325 (x20 (_ bv64 256) x83 (_ bv61 256))) x83))
(assert (x32 (_ bv1637409077 256)))
(assert (= (x112 (x20 (_ bv64 256) x83 (_ bv72 256))) (x20 (_ bv64 256) x83 (_ bv72 256))))
(assert (= (and x164 (not x129)) x241))
(assert (bvugt (x20 (_ bv64 256) x128 (_ bv0 256)) (_ bv10000 256)))
(assert (= (x112 (x20 (_ bv64 256) x83 (_ bv62 256))) (x20 (_ bv64 256) x83 (_ bv62 256))))
(assert (= x159 (or x102 x42)))
(assert (= x260 (or x24 x264)))
(assert (= (and x159 x276) x296))
(assert (= x53 (and x251 x265)))
(assert (= (_ bv0 256) (x112 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (=> (= (= x226 x183) x118) (and (=> (and (not x118) (and (or (and (= (_ bv0 256) x211) x230) (and (and (= (bvadd x183 (bvneg x226)) x382) (= x211 x163) (not (bvugt x382 x183)) (bvuge x280 (_ bv0 256)) (= (bvmul x275 x382) x280) (bvule x280 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (x261 x275 x382) (= x163 (bvudiv x280 (_ bv1000000000000000000 256)))) (not x230))) (= x230 (= (_ bv0 256) x275)))) x370) (=> (and x118 (= x196 (_ bv0 256))) x248))) x186))
(assert (= (x125 (x20 (_ bv64 256) x83 (_ bv72 256))) (_ bv64 256)))
(assert (= (=> (and (or (and x234 (= x202 x71)) (and (not x234) (and (or (and (and (bvule x97 (_ bv4722366482869645213695 256)) (= (x57 x386) x174) (bvuge (_ bv3 256) x16) (bvuge (_ bv4722366482869645213695 256) x166) (bvuge (_ bv4722366482869645213695 256) x177) (= x201 (x20 (_ bv64 256) x128 (_ bv0 256))) (bvuge (_ bv4722366482869645213695 256) x173) (= x177 (x195 x201)) (= x51 (bvudiv x98 (_ bv10000000000 256))) (= (bvadd x29 x91) x173) (= x386 (x20 (_ bv64 256) x128 (_ bv0 256))) (= x121 (x57 x201)) (= x132 x202) (= (bvadd (_ bv96 256) x332) x132) (= x204 (x369 x386)) (bvuge (_ bv4722366482869645213695 256) x29) (= x50 (bvadd x71 (_ bv96 256))) (= x91 (bvudiv x74 (_ bv10000000000 256))) (= (x358 x201) x166) (= (x277 x386) x97) (= (x52 x386) x16) (bvuge (_ bv4722366482869645213695 256) x204) (bvuge (_ bv20282409603651670423947251286015 256) x174) (= (bvadd (bvneg x51) x204) x29) (= x332 (bvadd x50 (_ bv128 256))) (bvule x121 (_ bv20282409603651670423947251286015 256))) (not x35)) (and x35 (= x71 x202))) (and (= x331 (bvadd x98 (bvneg x74))) (= x35 (= (_ bv0 256) x331)))))) (and (= (= x128 (_ bv0 256)) x234) (= x279 (_ bv1 256)))) x239) x298))
(assert (not x353))
(assert (= (and x40 x230) x214))
(assert (= (_ bv0 256) (x112 (_ bv513435984 256))))
(assert (bvult (_ bv10000 256) (x20 (_ bv64 256) x83 (_ bv62 256))))
(assert (= (_ bv0 256) (x104 (x20 (_ bv64 256) x292 (_ bv0 256)))))
(assert (x32 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x32 (_ bv1099511627775 256)))
(assert (= (and x348 x47) x110))
(assert (= x42 (and x376 x192)))
(assert (=> (bvule x103 (_ bv10000 256)) (= (_ bv0 256) (x112 x103))))
(assert (x32 (_ bv513435984 256)))
(assert (x32 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= x317 (and (not x38) x329)))
(assert (= (x104 (x20 (_ bv64 256) x83 (_ bv61 256))) (_ bv61 256)))
(assert (= x181 (and x339 x35)))
(assert (= (x112 x288) (x112 (bvadd (_ bv2 256) x288))))
(assert (= (x112 (x20 (_ bv64 256) x292 (_ bv0 256))) (x20 (_ bv64 256) x292 (_ bv0 256))))
(assert (= x357 (and x43 x281)))
(assert (= (_ bv0 256) (x104 (x20 (_ bv64 256) x128 (_ bv0 256)))))
(assert (= x362 (and x159 (not x276))))
(assert (= x370 (=> (= x211 x196) x248)))
(assert (= (and (not x48) x318) x365))
(assert (= x264 (and (not x9) x95)))
(assert (= (and x95 x9) x24))
(assert (bvult (_ bv10000 256) (x20 (_ bv64 256) x83 (_ bv72 256))))
(assert (=> (bvuge (_ bv10000 256) x292) (= (_ bv0 256) (x112 x292))))
(assert (= x259 (and x138 x118)))
(assert (= (_ bv0 256) (x112 (_ bv20282409603651670423947251286015 256))))
(assert (x32 (_ bv20282409603651670423947251286015 256)))
(assert (= (x112 (x20 (_ bv64 256) x83 (_ bv0 256))) (x20 (_ bv64 256) x83 (_ bv0 256))))
(assert (= (and (not x330) x225) x318))
(assert (= (x125 (x20 (_ bv64 256) x292 (_ bv0 256))) (_ bv64 256)))
(assert (= (x112 (_ bv1099511627775 256)) (_ bv0 256)))
(assert (= x225 (or x362 x296)))
(assert (= (x20 (_ bv64 256) x128 (_ bv0 256)) (x112 (x20 (_ bv64 256) x128 (_ bv0 256)))))
(assert (= x329 (and (not x43) x281)))
(assert (= (_ bv0 256) (x112 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (=> (bvuge (_ bv10000 256) x305) (= (x112 x305) (_ bv0 256))))
(assert (= x213 (=> (and (= x359 x183) (= (bvand (_ bv340282366920938463463374607431768211455 256) x198) x263)) x186)))
(assert (x32 (_ bv20282409603651670423947251286014 256)))
(assert (x32 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= x256 (and x40 (not x230))))
(assert (= x83 (x325 (x20 (_ bv64 256) x83 (_ bv0 256)))))
(assert (= (x112 (bvadd (_ bv1 256) x288)) (x112 x288)))
(assert (= (_ bv0 256) (x112 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (_ bv62 256) (x104 (x20 (_ bv64 256) x83 (_ bv62 256)))))
(assert (= (x325 (x20 (_ bv64 256) x128 (_ bv0 256))) x128))
(assert (bvult (_ bv10000 256) (x20 (_ bv64 256) x137 (_ bv60 256))))
(assert (not (x32 (x20 (_ bv64 256) x83 (_ bv0 256)))))
(assert (= x342 (and (not x376) x192)))
(assert (= (_ bv64 256) (x125 (x20 (_ bv64 256) x83 (_ bv62 256)))))
(assert (not (x32 (x20 (_ bv64 256) x128 (_ bv0 256)))))
(assert (= (or x271 x365) x319))
(assert (= (_ bv60 256) (x104 (x20 (_ bv64 256) x137 (_ bv60 256)))))
(assert (= true x379))
(assert (= (_ bv0 256) (x112 (_ bv4294967295 256))))
(assert (not (x32 (x20 (_ bv64 256) x83 (_ bv72 256)))))
(assert (= x149 (=> (and (or (and x144 (= (_ bv512 256) x71)) (and (and (or (and (not x129) (and (= (bvadd (bvneg x85) x291) x336) (bvuge (_ bv4722366482869645213695 256) x184) (bvuge (_ bv4722366482869645213695 256) x336) (= x291 (x199 x189)) (bvuge (_ bv4722366482869645213695 256) x351) (bvule x291 (_ bv4722366482869645213695 256)) (bvuge (_ bv4722366482869645213695 256) x80) (= x141 (x20 (_ bv64 256) x292 (_ bv0 256))) (= (x182 x189) x344) (= x8 (_ bv736 256)) (= (x209 x141) x27) (= x312 (x21 x189)) (bvule x27 (_ bv4722366482869645213695 256)) (= (bvudiv x98 (_ bv10000000000 256)) x85) (= x184 (bvadd x336 x316)) (= x80 (x2 x189)) (bvule x245 (_ bv20282409603651670423947251286015 256)) (= (_ bv832 256) x71) (bvuge (_ bv20282409603651670423947251286015 256) x344) (bvuge (_ bv3 256) x312) (= (x145 x141) x351) (= x245 (x182 x141)) (= x316 (bvudiv x74 (_ bv10000000000 256))) (= x189 (x20 (_ bv64 256) x292 (_ bv0 256))))) (and x129 (= x71 (_ bv512 256)))) (and (= (bvadd x98 (bvneg x74)) x273) (= (= x273 (_ bv0 256)) x129))) (not x144))) (and (= x144 (= x292 (_ bv0 256))) (= (_ bv0 256) x240))) x168)))
(assert (=> (bvuge (_ bv10000 256) x212) (= (x112 x212) (_ bv0 256))))
(assert (= (_ bv64 256) (x125 (x20 (_ bv64 256) x137 (_ bv60 256)))))
(assert (= x218 (=> (and (or (and (not x276) (and (bvuge x127 (_ bv1 256)) (= x127 (x217 x103)) (= x139 (bvadd (_ bv32 256) x293)) (= x293 (bvadd x15 (_ bv4 256))) (= (bvadd x139 (_ bv32 256)) x22) (= x143 (bvadd x22 (_ bv32 256))) (= (bvadd x143 (_ bv32 256)) x252) (bvuge (_ bv4294967295 256) x13))) x276) (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x103) (= (= x103 (_ bv0 256)) x276))) x151)))
(assert (= x73 (and x129 x164)))
(assert (x32 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x32 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x112 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (= (or x319 (and x330 x225)) x349))
(assert (= x228 (and (not x35) x339)))
(assert (= (_ bv64 256) (x125 (x20 (_ bv64 256) x128 (_ bv0 256)))))
(assert (= (and x138 (not x118)) x40))
(assert (= (x125 (x20 (_ bv64 256) x83 (_ bv0 256))) (_ bv64 256)))
(assert (= (_ bv71 256) (x104 (x20 (_ bv64 256) x83 (_ bv71 256)))))
(assert (= (_ bv0 256) (x112 (_ bv1637409077 256))))
(assert (= x197 (=> (and (bvule x114 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x335 (x229 x288)) (= x288 (x20 (_ bv64 256) x137 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x335) (= x191 (bvugt x122 (_ bv0 256))) (= x284 (_ bv1 256)) (= (x20 (_ bv64 256) x83 x341) x131) (= (x20 (_ bv64 256) x83 (_ bv0 256)) x384) (= x45 (ite (bvugt x346 x114) x114 x346)) (bvule (_ bv1 256) x114) (= x28 (x337 x146)) (= x341 (bvadd (_ bv2 256) x288)) (bvuge x45 (_ bv1 256)) (= x226 (x290 x131)) (= (ite (bvugt x347 (_ bv0 256)) x275 x223) x114) (= x275 (x67 x384)) (bvule x45 (_ bv20282409603651670423947251286015 256)) (= (bvadd (_ bv1 256) x288) x146) (= x122 (bvadd x198 (bvneg x335))) (bvule x275 (_ bv20282409603651670423947251286015 256))) (and (=> (and (= x28 x183) (not x191)) x186) (=> (and (and (or (and (not x47) (= (= x198 x335) x37)) (and (= x37 x47) x47)) (and (= (ite (= (_ bv0 256) x236) (= x236 (_ bv0 256)) (= (_ bv0 256) x257)) x47) (= (x233 x288) x236) (bvule x236 (_ bv340282366920938463463374607431768211455 256)))) x191) x148)))))
(assert (= x339 (and (not x234) x254)))
(assert (= (x112 (x20 (_ bv64 256) x83 (_ bv71 256))) (x20 (_ bv64 256) x83 (_ bv71 256))))
(assert (= (x112 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x20 (_ bv64 256) x137 (_ bv60 256)) (x112 (x20 (_ bv64 256) x137 (_ bv60 256)))))
(assert (= (and (not x47) x348) x133))
(assert (= (or x101 (and x379 x157)) x203))
(assert (= (=> (and (= (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x311) x313) (= (x380 x231) x311) (= x231 (bvadd x15 (_ bv32 256))) (= x39 (bvadd (bvneg (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)) x313)) (= (x194 x15) x193) (= x160 (bvadd x328 (bvneg x15))) (= x115 (bvadd (bvneg (_ bv32 256)) x160)) (= x55 (not (bvugt x193 (_ bv128 256)))) (= (bvadd x262 (_ bv64 256)) x328) (bvule (_ bv97 256) x193) (= x360 (_ bv0 256)) (= x262 (bvadd (_ bv36 256) x15)) (= x185 (bvadd x262 (_ bv32 256)))) x55) x372))
(assert (bvult (_ bv10000 256) (x20 (_ bv64 256) x83 (_ bv61 256))))
(assert (= x148 (=> (= (ite x37 x37 (not (bvult x335 x314))) x43) (and (=> (and (and (or (and (not x38) (= x119 x198)) (and x38 (= x314 x119))) (= (bvugt x198 x314) x38)) (not x43)) x69) (=> (and x43 (= x28 x359)) x17)))))
(assert (= (x112 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)) (_ bv0 256)))
(assert (bvugt (x20 (_ bv64 256) x292 (_ bv0 256)) (_ bv10000 256)))
(assert (= x7 x372))
(assert (= x17 (=> (and (= (= x28 x359) x9) (or x9 (not x9))) x213)))
(assert (= x361 (and x144 x5)))
(assert (= x168 (=> (and (or (and (and (= (x20 (_ bv64 256) x83 (_ bv72 256)) x301) (= x128 x155) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x155) (= (x94 x301) x155)) (not x265)) (and (= x128 (_ bv0 256)) x265)) (and (= x258 (_ bv1 256)) (= x265 (bvult x60 (_ bv2 256))))) x298)))
(assert (bvugt (x20 (_ bv64 256) x83 (_ bv0 256)) (_ bv10000 256)))
(assert (not (x32 (x20 (_ bv64 256) x83 (_ bv61 256)))))
(assert (= x164 (and x5 (not x144))))
(assert (x32 (_ bv10000000000 256)))
(assert (= (x20 (_ bv64 256) x83 (_ bv61 256)) (x112 (x20 (_ bv64 256) x83 (_ bv61 256)))))
(assert (= x137 (x325 (x20 (_ bv64 256) x137 (_ bv60 256)))))
(assert (= (=> (and (or (not x14) x14) (and (not (bvugt x363 (bvadd x363 x196))) (= x14 (= (_ bv0 256) x196)) (= x65 (x20 (_ bv64 256) x83 (_ bv61 256))) (= x135 (bvadd x196 x363)) (= (x130 x65) x363))) x345) x248))
(assert (not (x32 (x20 (_ bv64 256) x292 (_ bv0 256)))))
(assert (= x140 (or x259 x172)))
(assert (= (and (not x10) x342) x356))
(assert (= x102 (or x228 x243 x181)))
(assert (x32 (_ bv41436628393252172163539528543619094058851530980360706587524068930525597794304 256)))
(assert (= x251 (or x361 x73 x241)))
(assert (= (or x110 x133) x281))
(assert (= (and (not x265) x251) x153))
(assert (x32 (_ bv4294967295 256)))
(assert (= (x112 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (or x295 x260) x138))
(check-sat)
(exit)
