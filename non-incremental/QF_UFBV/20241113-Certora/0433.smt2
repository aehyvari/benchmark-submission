(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x169 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x116 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x61 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x211 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x252 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x41 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x228 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x112 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x132 ((_ BitVec 256)) Bool)
(declare-fun x65 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x223 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x33 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x77 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x57 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x29 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x160 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x222 () Bool)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x18 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x131 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x26 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x99 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x82 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x35 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x224 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x23 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x152 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x201 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x225 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x187 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(define-fun x11 ((x235 (_ BitVec 256)) (x219 (_ BitVec 256))) Bool (= x235 (bvudiv (bvmul x219 x235) x219)))
(define-fun x227 ((x235 (_ BitVec 256)) (x219 (_ BitVec 256))) Bool (= x235 (bvsdiv (bvmul x235 x219) x219)))
(define-fun x39 ((x235 (_ BitVec 256)) (x219 (_ BitVec 256))) Bool (= x235 (bvsdiv (bvmul x219 x235) x219)))
(define-fun x101 ((x208 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x218 ((x208 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x16 ((x208 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x76 ((x208 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x165 ((x208 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x231 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv128 256)) x10 (x101 x208)))
(define-fun x92 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv160 256)) x50 (x231 x208)))
(define-fun x193 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv128 256)) x204 (x218 x208)))
(define-fun x108 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv160 256)) x206 (x193 x208)))
(define-fun x138 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv192 256)) x94 (x108 x208)))
(define-fun x13 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv224 256) x208) x68 (x138 x208)))
(define-fun x47 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv256 256)) x48 (x13 x208)))
(define-fun x88 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x230 x208) x3 (x201 x208)))
(define-fun x130 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv128 256)) (_ bv98327780604053883821268666426439554083964158327795945480120698603646092312576 256) (x165 x208)))
(define-fun x37 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv132 256)) x251 (x130 x208)))
(define-fun x14 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x208) x178 (x16 x208)))
(define-fun x240 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x208) x104 (x14 x208)))
(define-fun x237 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv192 256)) x247 (x240 x208)))
(define-fun x127 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv224 256) x208) x86 (x237 x208)))
(define-fun x143 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x208) x111 (x127 x208)))
(define-fun x128 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv128 256)) x209 (x37 x208)))
(define-fun x182 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv160 256)) x42 (x128 x208)))
(define-fun x229 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv0 256)) x144 (x211 x208)))
(define-fun x124 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv32 256) x208) x234 (x229 x208)))
(define-fun x215 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv64 256)) x4 (x124 x208)))
(define-fun x184 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv96 256) x208) x89 (x215 x208)))
(define-fun x151 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x208) (_ bv82467972356648268838901393969492511368025335918746190468134166670270422581248 256) (x182 x208)))
(define-fun x210 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x208) x251 (x151 x208)))
(define-fun x194 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x208) x248 (x210 x208)))
(define-fun x135 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x208) x158 (x194 x208)))
(define-fun x25 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x148 x208) x6 (x187 x208)))
(define-fun x72 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x208) x213 (x76 x208)))
(define-fun x153 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv160 256)) x221 (x72 x208)))
(define-fun x102 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv192 256)) x125 (x153 x208)))
(define-fun x1 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv224 256) x208) x46 (x102 x208)))
(define-fun x238 ((x208 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 (_ bv256 256)) x183 (x1 x208)))
(assert (not (x132 (x228 (_ bv64 256) x251 (_ bv1 256)))))
(assert (= true x203))
(assert (=> (bvule x55 (_ bv10000 256)) (= (x223 x55) (_ bv0 256))))
(assert (x132 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (bvult (_ bv10000 256) (x228 (_ bv64 256) x251 (_ bv1 256))))
(assert (= (or x7 x190) x23))
(assert (= (_ bv64 256) (x61 (x228 (_ bv64 256) x251 (_ bv2 256)))))
(assert (= (x223 x58) (x223 (bvadd x58 (_ bv1 256)))))
(assert (= (x99 (x228 (_ bv64 256) x248 (_ bv5 256))) x248))
(assert (= x107 (and x203 x212)))
(assert (=> (bvuge (_ bv10000 256) x20) (= (_ bv0 256) (x223 x20))))
(assert (not x164))
(assert (= (_ bv0 256) (x223 (_ bv98327780604053883821268666426439554083964158327795945480120698603646092312576 256))))
(assert (= x205 (and x196 (not x40))))
(assert (= (x223 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (or x23 x107) x5))
(assert (= (x223 (_ bv3058907103 256)) (_ bv0 256)))
(assert (= (x223 x117) (x223 (bvadd (_ bv1 256) x117))))
(assert (= x174 (=> (and (ite x33 x33 (not (bvult x122 x181))) (= x136 (bvadd x30 (_ bv1 256))) (= (x224 x103) x150) (ite x133 x133 (not (bvult x142 x38))) (bvule x154 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (not (bvslt x192 (_ bv0 256))) x133) (= x170 x28) (= (x160 x136) x125) (ite x121 x121 (not (bvugt x142 x38))) (= (not (bvslt x192 (_ bv0 256))) x65) (ite x198 x198 (= x134 (bvudiv x146 x154))) (bvule (_ bv1 256) x179) (= x242 (x187 x148)) (= (not (bvsgt x158 (_ bv0 256))) x225) (= x9 x91) (= x197 (_ bv3058907103 256)) (= x34 (_ bv128 256)) (= x19 (_ bv1 256)) (= x173 (x228 (_ bv64 256) x131 (_ bv0 256))) (= x43 x28) (= x79 x87) (ite x245 x245 (= (ite (or (= x192 (_ bv0 256)) (= x158 (_ bv0 256))) (_ bv0 256) (ite (= (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x192) (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x158)) (bvudiv (ite (bvult x192 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) x192 (bvadd (bvneg (bvadd x192 (bvneg (_ bv1 256)))) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (ite (bvult x158 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) x158 (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd x158 (bvneg (_ bv1 256))))))) (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd (bvudiv (ite (bvult x192 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) x192 (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd x192 (bvneg (_ bv1 256)))))) (ite (bvult x158 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) x158 (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd (bvneg (_ bv1 256)) x158))))) (bvneg (_ bv1 256))))))) x141)) (= (x116 x200) x142) (= (_ bv36 256) x98) (= (_ bv1 256) x31) (= x54 x239) (= x121 (not (bvsgt x192 (_ bv0 256)))) (= x185 x87) (= (bvadd x181 x192) x122) (= x213 (x35 x109)) (= x200 (x228 (_ bv64 256) x248 (_ bv5 256))) (= x183 (x77 x62)) (= (bvudiv x146 (_ bv1000000000000000000000000000 256)) x137) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x141) (= (not (bvsgt x192 (_ bv0 256))) x33) (= x38 (bvadd x192 x142)) (ite x112 x112 (not (bvult x242 x6))) (= x73 x15) (= (= x158 (_ bv0 256)) x245) (= x161 x15) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x248) (= (not (bvslt x158 (_ bv0 256))) x112) (= x129 (_ bv82467972356648268838901393969492511368025335918746190468134166670270422581248 256)) (= x141 (x35 x32)) (= (x238 (_ bv160 256)) x54) (bvule x249 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x249) (= (x228 (_ bv64 256) x87 (_ bv2 256)) x109) (bvule (_ bv1 256) x150) (= x6 (bvadd x158 x242)) (= x185 x84) (= (x224 x20) x105) (= (x224 x103) x179) (= x192 (bvmul x158 x141)) (= x198 (= x154 (_ bv0 256))) (= x62 (bvadd x114 (_ bv1 256))) (= x158 (bvadd (bvneg x154) x137)) (= (x41 x114) x46) (= (_ bv100 256) x195) (= (bvadd x136 (_ bv1 256)) x114) (ite x225 x225 (not (bvugt x242 x6))) (= x248 x28) (= x30 (bvadd (_ bv1 256) x109)) (= x217 (_ bv3647180086 256)) (= x148 (bvadd (_ bv1 256) x32)) (= (x228 (_ bv64 256) x251 (_ bv2 256)) x32) (= (x152 x173) x19) (= x221 (x25 x30)) (= (bvule x172 x239) x57) (= (bvmul x134 x154) x146) (bvuge x105 (_ bv1 256)) (ite x65 x65 (not (bvugt x122 x181))) (= x158 x9)) x57)))
(assert (= (x223 (x228 (_ bv64 256) x87 (_ bv2 256))) (x228 (_ bv64 256) x87 (_ bv2 256))))
(assert (= (x223 (x228 (_ bv64 256) x55 (_ bv1 256))) (x228 (_ bv64 256) x55 (_ bv1 256))))
(assert (= x251 (x99 (x228 (_ bv64 256) x251 (_ bv1 256)))))
(assert (= (x223 x136) (x223 (bvadd (_ bv1 256) x136))))
(assert (= (_ bv1 256) (x169 (x228 (_ bv64 256) x251 (_ bv1 256)))))
(assert (= (x99 (x228 (_ bv64 256) x251 (_ bv2 256))) x251))
(assert (=> (bvule x248 (_ bv10000 256)) (= (_ bv0 256) (x223 x248))))
(assert (not (x132 (x228 (_ bv64 256) x55 (_ bv1 256)))))
(assert (= (x228 (_ bv64 256) x131 (_ bv0 256)) (x223 (x228 (_ bv64 256) x131 (_ bv0 256)))))
(assert (= (_ bv2 256) (x169 (x228 (_ bv64 256) x251 (_ bv2 256)))))
(assert (x132 (_ bv1155704232 256)))
(assert (= (x223 (bvadd (_ bv1 256) x109)) (x223 x109)))
(assert (= (x223 (_ bv1155704232 256)) (_ bv0 256)))
(assert (= (x223 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (=> (and (and (bvule x159 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x241 (x224 x131)) (bvule x60 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (x187 x8) x206) (bvuge x20 (_ bv1 256)) (= x214 (_ bv3647180086 256)) (bvule (_ bv0 256) x60) x126 (= (_ bv3647180086 256) x113) (bvule x226 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x82 (bvuge x97 (_ bv0 256)) (bvule (_ bv0 256) x177) (= x56 (bvadd (_ bv1 256) x24)) (bvule (_ bv0 256) x78) (= x149 (bvadd (_ bv1 256) x96)) (= x22 x250) (= (x228 (_ bv64 256) x95 (_ bv2 256)) x67) (= x199 x172) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x53) (= x95 x79) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x44) (bvuge x202 (_ bv0 256)) (= (_ bv36 256) x175) (bvuge x241 (_ bv1 256)) (= x96 (bvadd x8 (_ bv1 256))) (bvule x78 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x163 x233) (bvuge x110 (_ bv1 256)) (not (= x103 x131)) (= x24 (x228 (_ bv64 256) x55 (_ bv1 256))) (= (x18 x56) x50) (= (bvadd (_ bv1 256) x149) x166) (bvule (_ bv1 256) x103) (= x232 (_ bv36 256)) (bvule (_ bv0 256) x188) (= x180 (_ bv0 256)) (= x204 (x35 x67)) (= (x47 (_ bv160 256)) x199) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x20) (bvule x131 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x177 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x68 (x41 x149)) (= x79 x251) (= x22 x95) (= (x29 x24) x10) (bvuge x44 (_ bv0 256)) (= x49 x251) (= x110 (x224 x103)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x188) (= x55 x233) (= (x92 (_ bv128 256)) x168) (= (_ bv36 256) x157) (bvuge x168 (_ bv1000000000000000000000000000 256)) (bvuge x159 (_ bv0 256)) (bvuge x226 (_ bv0 256)) (= x79 x55) (= (bvult (_ bv0 256) (x224 x103)) x126) (= (bvadd x67 (_ bv1 256)) x8) (bvuge x53 (_ bv0 256)) (bvule x103 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x202 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x94 (x160 x96)) (= x82 (bvult (_ bv0 256) (x224 x131))) (= x20 x103) (= (x77 x166) x48) (bvuge x131 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x97)) (and (and (= (_ bv128 256) x21) (= (= (_ bv0 256) x253) x212) (= (x77 x207) x111) (= (_ bv36 256) x145) (= x117 (x228 (_ bv64 256) x251 (_ bv1 256))) (= (_ bv98327780604053883821268666426439554083964158327795945480120698603646092312576 256) x52) (= x69 (bvadd (_ bv1 256) x176)) (= x81 x36) (bvule (_ bv1 256) x120) (= (bvadd x66 x167) x253) (= x154 (x182 (_ bv160 256))) (= (bvadd (_ bv1 256) x236) x162) (= (x143 (_ bv160 256)) x42) (bvule (_ bv1 256) x171) (= x207 (bvadd (_ bv1 256) x58)) (= x3 (x201 x230)) (= x89 (x143 (_ bv224 256))) (= (_ bv1155704232 256) x63) (= (x18 x162) x140) (= x70 (bvadd (_ bv1 256) x117)) (= (_ bv3647180086 256) x155) (not (bvugt x115 x83)) (= x123 x246) (= x2 (x224 x131)) (= x147 (bvadd x83 (bvneg x140))) (= x189 (x228 (_ bv64 256) x251 (_ bv2 256))) (= x234 (x143 (_ bv160 256))) (= (x160 x69) x247) (= x73 x49) (= (x224 x20) x120) (= x167 (x29 x17)) (= x171 (x224 x103)) (not (bvult (bvadd x66 x167) x66)) (= (x35 x189) x178) (= x17 (x228 (_ bv64 256) x251 (_ bv1 256))) (= (x228 (_ bv64 256) x251 (_ bv1 256)) x236) (= x144 (x143 (_ bv128 256))) (= x86 (x41 x58)) (= x123 x73) (= x3 x51) (= x78 x230) (= (bvadd (_ bv1 256) x189) x176) (= x209 (x143 (_ bv128 256))) (= (_ bv1000000000000000000000000000 256) x244) (= (x143 (_ bv192 256)) x4) (= x58 (bvadd (_ bv1 256) x69)) (= x81 (x88 x131)) (= (x18 x70) x115) (bvule (_ bv1 256) x2) (= (x187 x176) x104)) (= x226 x83))) (and (=> (and x212 (= x134 (ite (= x147 (_ bv0 256)) (_ bv1000000000000000000000000000 256) (_ bv0 256)))) x174) (=> (and (and (= (bvudiv x147 (_ bv2 256)) x80) (= x118 (= x80 (_ bv0 256))) (= (ite (= (bvurem x147 (_ bv2 256)) (_ bv0 256)) (_ bv1000000000000000000000000000 256) x253) x12)) (not x212)) (and (=> (and x118 (= x12 x156)) x216) (=> (and (not x118) (and (or (and (not x40) (and (x11 x12 x139) (= x191 x64) (bvule x90 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (bvmul x12 x139) x90) (bvule (_ bv0 256) x90) (= x64 (bvudiv (bvadd (_ bv500000000000000000000000000 256) x90) (_ bv1000000000000000000000000000 256))))) (and x40 (= x191 x12))) (and (bvule x74 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256)) (= x139 (bvudiv (bvadd (_ bv500000000000000000000000000 256) x74) (_ bv1000000000000000000000000000 256))) (x11 x253 x253) (= x40 (= (bvurem x80 (_ bv2 256)) (_ bv0 256))) (= x74 (bvmul x253 x253))))) x222))))) x164))
(assert (= (x223 (bvadd (_ bv1 256) x149)) (x223 x149)))
(assert (= (_ bv64 256) (x61 (x228 (_ bv64 256) x95 (_ bv2 256)))))
(assert (= (_ bv0 256) (x223 (_ bv500000000000000000000000000 256))))
(assert (not (x132 (x228 (_ bv64 256) x95 (_ bv2 256)))))
(assert (x132 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (=> (bvuge (_ bv10000 256) x131) (= (_ bv0 256) (x223 x131))))
(assert (= (x169 (x228 (_ bv64 256) x131 (_ bv0 256))) (_ bv0 256)))
(assert (= (x61 (x228 (_ bv64 256) x251 (_ bv1 256))) (_ bv64 256)))
(assert (= (_ bv2 256) (x169 (x228 (_ bv64 256) x87 (_ bv2 256)))))
(assert (= (x223 (x228 (_ bv64 256) x248 (_ bv5 256))) (x228 (_ bv64 256) x248 (_ bv5 256))))
(assert (= (and x203 (not x212)) x186))
(assert (x132 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (=> (bvuge (_ bv10000 256) x230) (= (x223 x230) (_ bv0 256))))
(assert (= (x223 x30) (x223 (bvadd (_ bv1 256) x30))))
(assert (x132 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256)))
(assert (= (_ bv64 256) (x61 (x228 (_ bv64 256) x131 (_ bv0 256)))))
(assert (= (x99 (x228 (_ bv64 256) x87 (_ bv2 256))) x87))
(assert (not (x132 (x228 (_ bv64 256) x248 (_ bv5 256)))))
(assert (=> (bvule x251 (_ bv10000 256)) (= (_ bv0 256) (x223 x251))))
(assert (bvult (_ bv10000 256) (x228 (_ bv64 256) x87 (_ bv2 256))))
(assert (x132 (_ bv98327780604053883821268666426439554083964158327795945480120698603646092312576 256)))
(assert (= (_ bv0 256) (x223 (_ bv1000000000000000000000000000 256))))
(assert (bvugt (x228 (_ bv64 256) x251 (_ bv2 256)) (_ bv10000 256)))
(assert (x132 (_ bv3647180086 256)))
(assert (= (x223 (bvadd (_ bv1 256) x32)) (x223 x32)))
(assert (= (_ bv5 256) (x169 (x228 (_ bv64 256) x248 (_ bv5 256)))))
(assert (= (x228 (_ bv64 256) x95 (_ bv2 256)) (x223 (x228 (_ bv64 256) x95 (_ bv2 256)))))
(assert (= (and x196 x40) x252))
(assert (= (_ bv0 256) (x223 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256))))
(assert (= (x61 (x228 (_ bv64 256) x248 (_ bv5 256))) (_ bv64 256)))
(assert (= (_ bv64 256) (x61 (x228 (_ bv64 256) x55 (_ bv1 256)))))
(assert (bvult (_ bv10000 256) (x228 (_ bv64 256) x248 (_ bv5 256))))
(assert (=> (bvule x87 (_ bv10000 256)) (= (x223 x87) (_ bv0 256))))
(assert (= (x223 (_ bv115792089237316195423570985008687907853269984665640064039457584007913129639935 256)) (_ bv0 256)))
(assert (= x55 (x99 (x228 (_ bv64 256) x55 (_ bv1 256)))))
(assert (= x131 (x99 (x228 (_ bv64 256) x131 (_ bv0 256)))))
(assert (= (=> (and (= (bvudiv x80 (_ bv2 256)) x119) (= (= x119 (_ bv0 256)) x27)) (and (=> (= x191 x156) x216) x27)) x222))
(assert (= (x223 (_ bv82467972356648268838901393969492511368025335918746190468134166670270422581248 256)) (_ bv0 256)))
(assert (not (x132 (x228 (_ bv64 256) x251 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x103) (= (x223 x103) (_ bv0 256))))
(assert (= (x223 (bvadd (_ bv1 256) x176)) (x223 x176)))
(assert (= (x223 (bvadd (_ bv1 256) x69)) (x223 x69)))
(assert (= (x223 x114) (x223 (bvadd (_ bv1 256) x114))))
(assert (= (x61 (x228 (_ bv64 256) x87 (_ bv2 256))) (_ bv64 256)))
(assert (not (x132 (x228 (_ bv64 256) x87 (_ bv2 256)))))
(assert (= (x223 x189) (x223 (bvadd x189 (_ bv1 256)))))
(assert (= (x223 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x95) (= (_ bv0 256) (x223 x95))))
(assert (x132 (_ bv1000000000000000000000000000 256)))
(assert (= (x169 (x228 (_ bv64 256) x55 (_ bv1 256))) (_ bv1 256)))
(assert (= (x223 x236) (x223 (bvadd x236 (_ bv1 256)))))
(assert (= (x223 x96) (x223 (bvadd x96 (_ bv1 256)))))
(assert (= (and x118 x186) x190))
(assert (= (x223 (x228 (_ bv64 256) x251 (_ bv1 256))) (x228 (_ bv64 256) x251 (_ bv1 256))))
(assert (x132 (_ bv82467972356648268838901393969492511368025335918746190468134166670270422581248 256)))
(assert (= (x99 (x228 (_ bv64 256) x95 (_ bv2 256))) x95))
(assert (bvugt (x228 (_ bv64 256) x55 (_ bv1 256)) (_ bv10000 256)))
(assert (x132 (_ bv500000000000000000000000000 256)))
(assert (x132 (_ bv3058907103 256)))
(assert (= x216 (=> (= x134 x156) x174)))
(assert (bvult (_ bv10000 256) (x228 (_ bv64 256) x95 (_ bv2 256))))
(assert (x132 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)))
(assert (= (x223 x8) (x223 (bvadd (_ bv1 256) x8))))
(assert (= (x223 x67) (x223 (bvadd x67 (_ bv1 256)))))
(assert (= x196 (and x186 (not x118))))
(assert (not (x132 (x228 (_ bv64 256) x131 (_ bv0 256)))))
(assert (= (x223 x24) (x223 (bvadd x24 (_ bv1 256)))))
(assert (= (_ bv2 256) (x169 (x228 (_ bv64 256) x95 (_ bv2 256)))))
(assert (= (_ bv0 256) (x223 (_ bv3647180086 256))))
(assert (bvult (_ bv10000 256) (x228 (_ bv64 256) x131 (_ bv0 256))))
(assert (= (x223 (x228 (_ bv64 256) x251 (_ bv2 256))) (x228 (_ bv64 256) x251 (_ bv2 256))))
(assert (= x7 (or x205 x252)))
(check-sat)
(exit)
