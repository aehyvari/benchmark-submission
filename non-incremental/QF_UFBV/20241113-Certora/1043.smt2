(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x43 () Bool)
(declare-fun x123 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x237 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x301 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x52 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x238 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x164 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x146 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x183 () Bool)
(declare-fun x46 () Bool)
(declare-fun x284 () Bool)
(declare-fun x5 () Bool)
(declare-fun x66 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x260 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x278 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x229 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x129 () Bool)
(declare-fun x53 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x272 () Bool)
(declare-fun x135 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x300 () Bool)
(declare-fun x19 () Bool)
(declare-fun x233 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x40 () Bool)
(declare-fun x218 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x140 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x127 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x162 () Bool)
(declare-fun x51 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x171 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x126 () Bool)
(declare-fun x203 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x216 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x257 () Bool)
(declare-fun x85 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x102 () (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x235 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x48 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x184 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x11 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x77 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x244 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x158 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x290 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x100 ((_ BitVec 256)) Bool)
(declare-fun x4 () Bool)
(declare-fun x39 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x268 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x277 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x9 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x232 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x255 () Bool)
(declare-fun x266 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x136 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(define-fun x258 ((x304 (_ BitVec 256)) (x108 (_ BitVec 256))) Bool (= x304 (bvudiv (bvmul x108 x304) x108)))
(define-fun x71 ((x304 (_ BitVec 256)) (x108 (_ BitVec 256))) Bool (= x304 (bvsdiv (bvmul x304 x108) x108)))
(define-fun x145 ((x304 (_ BitVec 256)) (x108 (_ BitVec 256))) Bool (= x304 (bvsdiv (bvmul x108 x304) x108)))
(define-fun x72 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x111 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x22 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x16 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x169 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x270 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x247 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x193 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x20 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x206 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x165 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x252 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x133 ((x241 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x261 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 x157) x38 (x53 x241)))
(define-fun x68 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv512 256)) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x72 x241)))
(define-fun x103 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv516 256)) x106 (x68 x241)))
(define-fun x197 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv0 256)) x296 (x146 x241)))
(define-fun x239 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv512 256)) x296 (x103 x241)))
(define-fun x109 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv512 256) x241) (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256) (x239 x241)))
(define-fun x62 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv516 256)) x37 (x109 x241)))
(define-fun x110 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv548 256) x241) x81 (x62 x241)))
(define-fun x223 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv580 256)) x185 (x110 x241)))
(define-fun x245 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvugt (_ bv544 256) x241) (bvule (_ bv512 256) x241)) (x277 (bvadd (bvneg (_ bv512 256)) x241)) (x223 x241)))
(define-fun x8 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite x3 (x245 x241) (x223 x241)))
(define-fun x91 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv768 256)) x27 (x8 x241)))
(define-fun x87 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv800 256) x241) x139 (x91 x241)))
(define-fun x75 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv832 256)) x96 (x87 x241)))
(define-fun x200 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv864 256) x241) x37 (x75 x241)))
(define-fun x246 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv896 256)) x55 (x200 x241)))
(define-fun x73 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 (_ bv928 256)) x101 (x246 x241)))
(define-fun x14 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite x40 (x72 x241) (x73 x241)))
(define-fun x148 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x24 x241) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x14 x241)))
(define-fun x97 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 x267) x106 (x148 x241)))
(define-fun x204 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x241) x130 (x184 x241)))
(define-fun x210 ((x241 (_ BitVec 256))) (_ BitVec 256) (ite (= x241 x24) x130 (x97 x241)))
(define-fun x287 ((x161 (_ BitVec 256))) Bool (or (not (and (bvule x161 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x161))) (not (and (bvugt x149 x161) (bvule (_ bv0 256) x161))) (= (bvadd (_ bv1 256) x161) (x51 (x140 x161)))))
(define-fun x154 ((x275 (_ BitVec 256))) Bool (or (and (bvule (x51 x275) x149) (and (= (x140 (bvadd (x51 x275) (bvneg (_ bv1 256)))) x275) (bvule (_ bv1 256) (x51 x275)))) (= (x51 x275) (_ bv0 256)) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x275) (bvuge x275 (_ bv0 256))))))
(define-fun x236 ((x104 (_ BitVec 256)) (x260 (_ BitVec 256))) Bool (or (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x104) (bvule (_ bv0 256) x104))) (or (= (x266 x104 (x158 x104 x260)) (bvadd (_ bv1 256) x260)) (not (and (bvuge x260 (_ bv0 256)) (bvule x260 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (not (and (bvult x260 (x268 x104)) (bvuge x260 (_ bv0 256)))))))
(define-fun x49 ((x47 (_ BitVec 256)) (x290 (_ BitVec 256))) Bool (or (not (and (bvule x47 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x47))) (or (= (_ bv0 256) (x266 x47 x290)) (not (and (bvuge x290 (_ bv0 256)) (bvule x290 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (and (bvule (x266 x47 x290) (x268 x47)) (and (bvule (_ bv1 256) (x266 x47 x290)) (= x290 (x158 x47 (bvadd (x266 x47 x290) (bvneg (_ bv1 256))))))))))
(define-fun x172 ((x79 (_ BitVec 256)) (x59 (_ BitVec 256))) Bool (or (or (= (x31 x79 (x77 x79 x59)) (bvadd (_ bv1 256) x59)) (not (and (bvule (_ bv0 256) x59) (bvugt (x135 x79) x59))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x59) (bvuge x59 (_ bv0 256))))) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x79) (bvuge x79 (_ bv0 256))))))
(define-fun x144 ((x28 (_ BitVec 256)) (x41 (_ BitVec 256))) Bool (or (or (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x41) (bvuge x41 (_ bv0 256)))) (= (_ bv0 256) (x31 x28 x41)) (and (and (= (x77 x28 (bvadd (x31 x28 x41) (bvneg (_ bv1 256)))) x41) (bvuge (x31 x28 x41) (_ bv1 256))) (bvuge (x135 x28) (x31 x28 x41)))) (not (and (bvule (_ bv0 256) x28) (bvule x28 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x25 ((x78 (_ BitVec 256)) (x303 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x78) (bvule x78 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x303) (bvuge x303 (_ bv0 256)))) (not (or (not (= (_ bv0 256) (x266 x78 x303))) (not (= (x31 x78 x303) (_ bv0 256))))) (not (= (x51 x303) (_ bv0 256))))))
(define-fun x289 ((x6 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x6) (bvule x6 (_ bv1461501637330902918203684832716283019655932542975 256)))) (bvugt (_ bv340282366920938463463374607431768211455 256) (x268 x6))))
(define-fun x274 ((x63 (_ BitVec 256))) Bool (or (bvult (x135 x63) (_ bv340282366920938463463374607431768211455 256)) (not (and (bvule (_ bv0 256) x63) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x63)))))
(define-fun x221 () Bool (x287 (bvadd (x51 x280) (bvneg (_ bv1 256)))))
(define-fun x286 () Bool x221)
(define-fun x94 () Bool (x154 x280))
(define-fun x195 () Bool x94)
(define-fun x188 () Bool (x236 x98 (bvadd (bvneg (_ bv1 256)) (x266 x98 x280))))
(define-fun x122 () Bool x188)
(define-fun x34 () Bool (x49 x98 x280))
(define-fun x227 () Bool x34)
(define-fun x302 () Bool (x172 x98 (bvadd (x31 x98 x280) (bvneg (_ bv1 256)))))
(define-fun x112 () Bool x302)
(define-fun x294 () Bool (x144 x98 x280))
(define-fun x190 () Bool x294)
(define-fun x50 () Bool (x25 x98 x280))
(define-fun x35 () Bool (x25 x98 x280))
(define-fun x76 () Bool (and x50 x35))
(define-fun x156 () Bool (x289 x98))
(define-fun x141 () Bool x156)
(define-fun x54 () Bool (x274 x98))
(define-fun x219 () Bool x54)
(assert (x100 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)))
(assert (x100 (_ bv4294967295 256)))
(assert (= (and (not x150) x209) x178))
(assert (=> (bvuge (_ bv10000 256) x106) (= (_ bv0 256) (x244 x106))))
(assert (x100 (_ bv3178072397 256)))
(assert (= (or x36 x178) x80))
(assert (= x136 (or x113 x278)))
(assert (= (x244 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (or x3 x284) x209))
(assert (= x186 (=> (and (or (and (= (_ bv0 256) x82) x288) (and (not x288) (and (= x181 x82) (x258 x160 x139) (= x181 (bvmul x160 x139))))) (and (= x288 (= (_ bv0 256) x160)) (= (bvudiv x263 (_ bv1000000000000000000 256)) x139) (not (bvult (bvadd x81 x139) x139)) (= x13 (_ bv576 256)) (= (_ bv1000000000000000000 256) x264) (= (bvadd x139 x81) x55))) x192)))
(assert (= x2 (and (not x5) x283)))
(assert (= (x244 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x244 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x244 (_ bv1000000000000000 256)) (_ bv0 256)))
(assert x219)
(assert (=> (bvuge (_ bv10000 256) x179) (= (x244 x179) (_ bv0 256))))
(assert (x100 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)))
(assert (= (x244 (_ bv3178072397 256)) (_ bv0 256)))
(assert (x100 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (or x235 x216) x213))
(assert (= (and x150 x209) x36))
(assert (= (x66 (x127 (_ bv64 256) x106 (_ bv103 256))) (_ bv64 256)))
(assert (= x113 (or x155 x33)))
(assert x141)
(assert (= (=> (= x237 (or (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x98) (bvuge x98 (_ bv0 256)))) (or (not (or (not (= (_ bv0 256) (x31 x98 x280))) (not (= (x266 x98 x280) (_ bv0 256))))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x280) (bvule (_ bv0 256) x280))) (not (= (_ bv0 256) (x51 x280)))))) x237) x191))
(assert (=> (bvule x15 (_ bv10000 256)) (= (_ bv0 256) (x244 x15))))
(assert (x100 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= x46 (and (not x29) x159)))
(assert (=> (bvule x60 (_ bv10000 256)) (= (_ bv0 256) (x244 x60))))
(assert (= (and x19 (not x288)) x235))
(assert (=> (bvule x226 (_ bv10000 256)) (= (x244 x226) (_ bv0 256))))
(assert (= (=> (= x29 (= x147 (_ bv0 256))) (and (=> (and x29 (= x120 (_ bv1000000000000000000 256))) x191) (=> (and (not x29) (and (or (and (not x167) (and (= x240 x282) (= (bvmul (_ bv1000000000000000000 256) x234) x282) (x258 x234 (_ bv1000000000000000000 256)))) (and x167 (= (_ bv0 256) x240))) (and (= (bvadd x214 (bvneg x256)) x234) (= (x127 (_ bv64 256) x106 (_ bv103 256)) x175) (= x106 x26) (= x88 (_ bv1889567281 256)) (bvuge x102 (_ bv1 256)) (= (x39 x175) x130) (= x26 x163) (= (_ bv36 256) x164) (= x267 (bvadd (_ bv4 256) x24)) (= x124 (_ bv36 256)) (= x153 (x210 x24)) (bvuge x89 (_ bv1 256)) (= x295 (x48 x106)) (= (_ bv1000000000000000000 256) x249) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x102) (bvuge x147 (_ bv1 256)) (= x214 (bvadd x153 x194)) (= x102 x106) (= (x48 x102) x89) (= x187 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)) (= x233 (bvadd (_ bv64 256) x24)) (= (= x234 (_ bv0 256)) x167) (not (bvugt x153 (bvadd x194 x153))) (= x164 (bvadd (bvneg x24) x168)) (bvuge x295 (_ bv1 256)) (= (bvadd (_ bv32 256) x267) x168) (not (bvugt x256 x214))))) x93))) x67))
(assert (= (x244 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= x255 (=> (and (and (= x27 x65) (and (= (_ bv3178072397 256) x182) (bvule (_ bv1 256) x116) (= x285 x117) (= x38 (x53 x157)) (= (x261 x106) x117) (= x299 x157) (= (= x27 x254) x5) (= x116 (x48 x106)) (= x38 x45))) (and (bvule x273 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x226 (_ bv1 256)) (bvule x65 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x123 x279 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x226) (= (bvult (_ bv0 256) (x48 x220)) x300) (= x107 (bvugt (x48 x106) (_ bv0 256))) (bvule (_ bv0 256) x65) (= x196 x217) (bvuge x86 (_ bv1 256)) x11 (bvule x207 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x60) (bvuge x230 (_ bv1 256)) (bvule x58 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x205 x227) x203 (bvuge x60 (_ bv1 256)) (bvule x106 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x60 x180)) (bvuge x132 (_ bv1 256)) x107 (bvule x217 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x60 x106)) (not (= x226 x220)) (bvule (_ bv1 256) x196) (bvule (_ bv0 256) x83) (bvuge x301 (_ bv4 256)) x18 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x44) (bvule (_ bv0 256) x299) (bvule (_ bv0 256) x44) (not (= x217 x226)) (= x220 x207) (not (= x15 x180)) (not (= x220 x180)) (not (= x15 x220)) x300 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x179) (bvuge x217 (_ bv1 256)) (not (= x60 x217)) (= (_ bv0 256) x225) (= (bvult (_ bv0 256) (x48 x217)) x74) (bvule x196 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x132 x106)) (not (= x217 x179)) (not (= x226 x15)) (not (= x60 x179)) (bvule (_ bv0 256) x99) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x301) (bvule (_ bv0 256) x119) (bvule x70 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x180 (_ bv1 256)) (not (= x217 x106)) (bvule (_ bv1 256) x70) (= x230 x220) (not (= x179 x220)) (not (= x106 x226)) x61 (= x112 x257) (bvule x21 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x60 x15)) (bvuge x143 (_ bv0 256)) (= x60 x70) (bvuge x271 (_ bv0 256)) (bvule x230 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x220 x60)) (not (= x226 x60)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x143) (not (= x106 x180)) (not (= x15 x106)) (bvule (_ bv1 256) x207) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x299) (bvule x119 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x226 x180)) (not (= x132 x226)) (= x203 (bvugt (x48 x179) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x86) (= x195 x126) (not (= x179 x180)) (bvule x180 (_ bv1461501637330902918203684832716283019655932542975 256)) x23 x257 x170 (bvuge x220 (_ bv1 256)) (not (= x132 x60)) (= x23 x76) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x132) (not (= x220 x106)) (= x12 (bvugt (x48 x132) (_ bv0 256))) (bvule x271 (_ bv4294967295 256)) x126 (= (bvult (_ bv0 256) (x48 x180)) x272) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x83) (bvule x15 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x11 x190) (not (= x179 x132)) x12 (= x15 x86) (bvule x220 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x273) (not (= x106 x179)) (bvule (_ bv1 256) x106) (not (= x179 x226)) (not (= x132 x217)) (bvule (_ bv1 256) x179) (= x122 x61) (not (= x179 x15)) (bvule (_ bv0 256) x21) (not (= x132 x220)) (= x18 x286) (not (= x15 x217)) (= (bvult (_ bv0 256) (x48 x15)) x279) (bvule (_ bv0 256) x58) (= (bvugt (x48 x60) (_ bv0 256)) x170) (not (= x132 x180)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x99) (not (= x15 x132)) x74 (not (= x217 x180)) x205 (bvule (_ bv1 256) x15) (not (= x220 x217)) (= x123 (bvult (_ bv0 256) (x48 x226))) x272)) (and (=> (and x5 (and (= x24 (_ bv128 256)) (= x256 x185) (= x81 x194))) x67) (=> (and (and (or (and (= x218 x238) (not x253)) (and x253 (and (bvule (_ bv32 256) x243) (bvule x243 (_ bv4294967295 256)) (= (_ bv1 256) x218)))) (and (= x151 (_ bv512 256)) (bvule (_ bv1 256) x102) (= x56 (_ bv1889567281 256)) (= x7 (_ bv512 256)) (bvuge x189 (_ bv1 256)) (= (x127 (_ bv64 256) x106 (_ bv103 256)) x30) (= (x239 (_ bv512 256)) x37) (= (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) x42) (= x297 (_ bv36 256)) (= x253 (bvult (_ bv0 256) x238)) (bvule x102 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x281 x106) (= x201 (x48 x102)) (= x198 x281) (= (x48 x177) x189) (= x138 (x48 x106)) (bvule (_ bv1 256) x138) (bvule (_ bv1 256) x201) (= (x39 x30) x296) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x177) (= x106 x102) (bvuge x243 (_ bv32 256)))) (not x5)) x215)))))
(assert (= (_ bv0 256) (x244 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256))))
(assert (= x278 (and x159 x29)))
(assert (not (x100 (x127 (_ bv64 256) x106 (_ bv103 256)))))
(assert (=> (bvuge (_ bv10000 256) x102) (= (_ bv0 256) (x244 x102))))
(assert (= x92 (and x212 x80)))
(assert (= (=> (and (or (and (= x134 (_ bv0 256)) x162) (and (not x162) (and (= x134 x259) (= x259 (bvmul x114 x32)) (x258 x32 x114)))) (and (= x228 (_ bv640 256)) (not (bvugt x265 (bvadd x185 x265))) (= (bvadd x185 x265) x101) (= (= x32 (_ bv0 256)) x162) (= (bvudiv x82 (_ bv1000000000000000000 256)) x265) (= x118 (_ bv1000000000000000000 256)))) x64) x192))
(assert (= (and x46 x167) x33))
(assert (x100 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (=> (bvuge (_ bv10000 256) x220) (= (_ bv0 256) (x244 x220))))
(assert (= (=> (and (or (and (and (= x251 x32) (x258 x248 x125) (= (bvmul x248 x125) x251)) (not x150)) (and x150 (= (_ bv0 256) x32))) (and (bvuge x218 (_ bv1 256)) (= (x8 (_ bv512 256)) x248) (not (bvugt x254 x27)) (bvuge (_ bv1000000000000000 256) x248) (= (_ bv512 256) x269) (= (bvadd x27 (bvneg x254)) x125) (= (= (_ bv0 256) x248) x150))) x176) x215))
(assert (= (=> (and (or (and (= x263 (_ bv0 256)) x212) (and (and (= (bvmul x81 x32) x173) (x258 x32 x81) (= x173 x263)) (not x212))) (and (= (_ bv1000000000000000000 256) x90) (= x212 (= (_ bv0 256) x32)))) x186) x176))
(assert (= (=> (and (not (bvugt x232 (bvadd x232 x114))) (= (_ bv768 256) x24) (= x293 x256) (= x96 (bvadd x114 x232)) (= x293 (bvadd x265 x185)) (= (bvadd x81 x139) x152) (= (_ bv704 256) x105) (= x152 x194) (= x232 (bvudiv x134 (_ bv1000000000000000000 256)))) x67) x64))
(assert (= (x244 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x100 (_ bv1000000000000000 256)))
(assert (=> (bvule x157 (_ bv10000 256)) (= (_ bv0 256) (x244 x157))))
(assert (= x52 (and x213 x162)))
(assert (= (or x222 x52) x4))
(assert (= x106 (x171 (x127 (_ bv64 256) x106 (_ bv103 256)))))
(assert (not x255))
(assert (bvugt (_ bv340282366920938463463374607431768211455 256) x149))
(assert (= (x244 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (and x46 (not x167)) x155))
(assert (= x216 (and x19 x288)))
(assert (x100 (_ bv1889567281 256)))
(assert (= (and x253 x2) x3))
(assert (=> (bvule x177 (_ bv10000 256)) (= (x244 x177) (_ bv0 256))))
(assert (x100 (_ bv1000000000000000000 256)))
(assert (= true x283))
(assert (= (or x84 x92) x19))
(assert (=> (bvuge (_ bv10000 256) x180) (= (x244 x180) (_ bv0 256))))
(assert (=> (bvule x217 (_ bv10000 256)) (= (_ bv0 256) (x244 x217))))
(assert (= (and x213 (not x162)) x222))
(assert (= x284 (and x2 (not x253))))
(assert (= x40 (and x5 x283)))
(assert (= (x244 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= x159 (or x40 x4)))
(assert (x100 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (_ bv103 256) (x229 (x127 (_ bv64 256) x106 (_ bv103 256)))))
(assert (= (x127 (_ bv64 256) x106 (_ bv103 256)) (x244 (x127 (_ bv64 256) x106 (_ bv103 256)))))
(assert (= (x244 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x132) (= (_ bv0 256) (x244 x132))))
(assert (bvugt (x127 (_ bv64 256) x106 (_ bv103 256)) (_ bv10000 256)))
(assert (= (and x80 (not x212)) x84))
(assert (= (=> (and (= x121 (bvudiv x240 x147)) (= x121 x120)) x191) x93))
(check-sat)
(exit)
