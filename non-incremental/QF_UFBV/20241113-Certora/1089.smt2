(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x139 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x229 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x231 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x227 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x219 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x110 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x111 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x258 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x25 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x222 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x77 () Bool)
(declare-fun x58 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x196 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x315 () (_ BitVec 256))
(declare-fun x206 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x143 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x198 () Bool)
(declare-fun x180 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x296 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x57 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x76 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x314 () Bool)
(declare-fun x216 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x245 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x224 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x307 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x269 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x285 () Bool)
(declare-fun x300 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x184 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x116 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x313 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x179 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x117 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x312 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x142 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x267 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x316 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x96 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x289 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x295 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x213 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x161 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x311 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x318 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x298 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x127 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x270 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x264 () Bool)
(declare-fun x257 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x209 ((_ BitVec 256)) Bool)
(declare-fun x30 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x304 () Bool)
(declare-fun x309 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x106 () Bool)
(declare-fun x41 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x274 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(define-fun x183 ((x261 (_ BitVec 256)) (x164 (_ BitVec 256))) Bool (= x261 (bvudiv (bvmul x164 x261) x164)))
(define-fun x65 ((x261 (_ BitVec 256)) (x164 (_ BitVec 256))) Bool (= x261 (bvsdiv (bvmul x261 x164) x164)))
(define-fun x66 ((x261 (_ BitVec 256)) (x164 (_ BitVec 256))) Bool (= x261 (bvsdiv (bvmul x164 x261) x164)))
(define-fun x201 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x254 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x256 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x188 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x118 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x170 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x185 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x107 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x212 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x31 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x84 ((x232 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x26 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv60 256)) x223 (x206 x232)))
(define-fun x131 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv61 256)) x105 (x26 x232)))
(define-fun x162 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv62 256)) x95 (x131 x232)))
(define-fun x305 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 x21) x85 (x180 x232)))
(define-fun x287 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv128 256)) (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256) (x201 x232)))
(define-fun x288 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x232) x246 (x287 x232)))
(define-fun x292 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv0 256)) x306 (x30 x232)))
(define-fun x276 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x232) x306 (x288 x232)))
(define-fun x48 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv128 256)) (_ bv77053863734975077137548456399560439977311721439096602559221323163398253314048 256) (x276 x232)))
(define-fun x83 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvugt (_ bv160 256) x232) (bvule (_ bv128 256) x232)) (x111 (bvadd (bvneg (_ bv128 256)) x232)) (x48 x232)))
(define-fun x199 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x232) (_ bv67786092356555159507356436471653316820297734139094316147850075200834515238912 256) (x83 x232)))
(define-fun x177 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv132 256)) x115 (x199 x232)))
(define-fun x249 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x232) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x276 x232)))
(define-fun x182 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv132 256)) x115 (x249 x232)))
(define-fun x153 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x232) x303 (x196 x232)))
(define-fun x186 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv128 256)) x303 (x182 x232)))
(define-fun x193 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 (_ bv0 256)) x64 (x227 x232)))
(define-fun x24 ((x232 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x232) x64 (x177 x232)))
(define-fun x151 ((x291 (_ BitVec 256))) Bool (or (not (and (bvult x291 x7) (bvule (_ bv0 256) x291))) (not (and (bvuge x291 (_ bv0 256)) (bvule x291 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (x116 (x224 x291)) (bvadd x291 (_ bv1 256)))))
(define-fun x114 ((x283 (_ BitVec 256))) Bool (or (and (bvule (x116 x283) x7) (and (= (x224 (bvadd (x116 x283) (bvneg (_ bv1 256)))) x283) (bvuge (x116 x283) (_ bv1 256)))) (= (_ bv0 256) (x116 x283)) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x283) (bvuge x283 (_ bv0 256))))))
(define-fun x319 ((x168 (_ BitVec 256)) (x101 (_ BitVec 256))) Bool (or (or (not (and (bvuge x101 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x101))) (= (bvadd (_ bv1 256) x101) (x289 x168 (x179 x168 x101))) (not (and (bvule (_ bv0 256) x101) (bvult x101 (x311 x168))))) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x168) (bvule (_ bv0 256) x168)))))
(define-fun x80 ((x33 (_ BitVec 256)) (x20 (_ BitVec 256))) Bool (or (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x33) (bvule (_ bv0 256) x33))) (or (and (bvule (x289 x33 x20) (x311 x33)) (and (bvuge (x289 x33 x20) (_ bv1 256)) (= x20 (x179 x33 (bvadd (x289 x33 x20) (bvneg (_ bv1 256))))))) (= (x289 x33 x20) (_ bv0 256)) (not (and (bvuge x20 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x20))))))
(define-fun x317 ((x273 (_ BitVec 256)) (x59 (_ BitVec 256))) Bool (or (or (not (and (bvule (_ bv0 256) x59) (bvult x59 (x318 x273)))) (not (and (bvuge x59 (_ bv0 256)) (bvule x59 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (bvadd (_ bv1 256) x59) (x57 x273 (x245 x273 x59)))) (not (and (bvule x273 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x273 (_ bv0 256))))))
(define-fun x171 ((x109 (_ BitVec 256)) (x176 (_ BitVec 256))) Bool (or (not (and (bvuge x109 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x109))) (or (not (and (bvule x176 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x176 (_ bv0 256)))) (= (_ bv0 256) (x57 x109 x176)) (and (bvule (x57 x109 x176) (x318 x109)) (and (= (x245 x109 (bvadd (x57 x109 x176) (bvneg (_ bv1 256)))) x176) (bvuge (x57 x109 x176) (_ bv1 256)))))))
(define-fun x100 ((x282 (_ BitVec 256)) (x266 (_ BitVec 256))) Bool (or (or (not (or (not (= (x289 x282 x266) (_ bv0 256))) (not (= (x57 x282 x266) (_ bv0 256))))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x266) (bvule (_ bv0 256) x266))) (not (= (x116 x266) (_ bv0 256)))) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x282) (bvuge x282 (_ bv0 256))))))
(define-fun x242 ((x63 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x63) (bvule x63 (_ bv1461501637330902918203684832716283019655932542975 256)))) (bvugt (_ bv340282366920938463463374607431768211455 256) (x311 x63))))
(define-fun x157 ((x133 (_ BitVec 256))) Bool (or (bvugt (_ bv340282366920938463463374607431768211455 256) (x318 x133)) (not (and (bvule (_ bv0 256) x133) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x133)))))
(define-fun x253 () Bool (and (x151 (bvadd (x116 x246) (bvneg (_ bv1 256)))) (x151 (bvadd (x116 x132) (bvneg (_ bv1 256))))))
(define-fun x130 () Bool x253)
(define-fun x90 () Bool (and (x114 x132) (x114 x246)))
(define-fun x82 () Bool x90)
(define-fun x187 () Bool (x319 x172 (bvadd (x289 x172 x132) (bvneg (_ bv1 256)))))
(define-fun x14 () Bool x187)
(define-fun x54 () Bool (x80 x172 x132))
(define-fun x75 () Bool x54)
(define-fun x10 () Bool (x317 x172 (bvadd (bvneg (_ bv1 256)) (x57 x172 x132))))
(define-fun x50 () Bool x10)
(define-fun x150 () Bool (x171 x172 x132))
(define-fun x36 () Bool x150)
(define-fun x128 () Bool (x100 x172 x132))
(define-fun x277 () Bool (x100 x172 x132))
(define-fun x152 () Bool (and x128 x277))
(define-fun x308 () Bool (x242 x172))
(define-fun x103 () Bool x308)
(define-fun x124 () Bool (x157 x172))
(define-fun x55 () Bool x124)
(assert (x209 (_ bv4294967295 256)))
(assert (= (x110 (_ bv64 256) x246 (_ bv53 256)) (x76 (x110 (_ bv64 256) x246 (_ bv53 256)))))
(assert (= x108 (and (not x6) x41)))
(assert (= (x274 (x110 (_ bv64 256) x115 x34)) x115))
(assert (= (x76 (bvadd (_ bv1 256) x40)) (x76 x40)))
(assert (= (x161 (x110 (_ bv64 256) x246 (_ bv59 256))) (_ bv64 256)))
(assert (= x13 (and x29 x160)))
(assert (= (x110 (_ bv64 256) x115 x34) (x76 (x110 (_ bv64 256) x115 x34))))
(assert (= (_ bv64 256) (x161 (x110 (_ bv64 256) x246 (_ bv56 256)))))
(assert (not (x209 (x110 (_ bv64 256) x246 (_ bv56 256)))))
(assert (=> (bvule x115 (_ bv10000 256)) (= (x76 x115) (_ bv0 256))))
(assert (= (and x281 x28) x239))
(assert (= x230 (=> (= (or (or (not (and (bvule x132 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x132 (_ bv0 256)))) (not (or (not (= (_ bv0 256) (x57 x172 x132))) (not (= (_ bv0 256) (x289 x172 x132))))) (not (= (_ bv0 256) (x116 x132)))) (not (and (bvule x172 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x172)))) x200) x200)))
(assert x55)
(assert (= (_ bv0 256) (x76 (_ bv67786092356555159507356436471653316820297734139094316147850075200834515238912 256))))
(assert (= (_ bv0 256) (x76 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256))))
(assert (not (x209 (x110 (_ bv64 256) x115 x34))))
(assert (= (_ bv0 256) (x76 (_ bv340282366920938463463374607431768211455 256))))
(assert (x209 (_ bv1143531618 256)))
(assert (= x247 (=> (and (= (bvudiv x89 x23) x68) (= x235 x163) (= x68 x312) (= x156 (_ bv192 256)) (= (_ bv128 256) x88) (= x233 x18)) x167)))
(assert (x209 (_ bv1889567281 256)))
(assert (= x264 (and x62 (not x241))))
(assert (= (_ bv0 256) (x76 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (_ bv59 256) (x295 (x110 (_ bv64 256) x246 (_ bv59 256)))))
(assert (= x267 (=> (and (and (not (= x67 x125)) (not (= x67 x95)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x105) (= x257 x301) (= x125 x250) (not (= x95 x155)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x149) (not (= x67 x202)) x194 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x95) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x123) (= x248 (_ bv0 256)) (bvule (_ bv1 256) x300) (not (= x202 x105)) (= x148 x166) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x169) (not (= x297 x95)) (not (= x67 x105)) (not (= x149 x67)) x72 x279 (= (x142 (_ bv68 256)) x286) (= x14 x279) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x136) (not (= x105 x149)) (bvule (_ bv0 256) x169) (not (= x223 x155)) (not (= x223 x297)) (bvule x223 (_ bv1461501637330902918203684832716283019655932542975 256)) x81 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x2) (bvuge x234 (_ bv0 256)) (not (= x202 x223)) (bvule (_ bv1 256) x121) (bvule (_ bv1 256) x67) (bvule x300 (_ bv1461501637330902918203684832716283019655932542975 256)) x309 (not (= x223 x67)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x265) (bvuge x141 (_ bv0 256)) (not (= x67 x297)) (bvule x145 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x149 x155)) (= (bvult (_ bv0 256) (x258 x67)) x72) (= x136 x155) x19 (not (= x149 x223)) (= x75 x19) x117 x129 (not (= x297 x155)) (bvuge x205 (_ bv0 256)) (not (= x105 x125)) (not (= x202 x149)) (= x82 x215) (= x220 x50) (bvule (_ bv0 256) x39) (= (bvult (_ bv0 256) (x258 x155)) x117) (= x70 x36) (= (bvult (_ bv0 256) (x258 x223)) x129) x9 (= (bvult (_ bv0 256) (x258 x95)) x263) (not (= x95 x223)) (not (= x202 x95)) x299 (not (= x297 x105)) (not (= x297 x202)) (bvuge x105 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x137) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x202) x296 (bvule (_ bv0 256) x2) (= x130 x309) (bvuge x125 (_ bv1 256)) (bvuge x202 (_ bv1 256)) (= x237 x155) x263 (bvule x125 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x237 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x138) (bvule (_ bv1 256) x297) (= x81 (bvugt (x258 x297) (_ bv0 256))) (= x300 x297) (not (= x95 x125)) (bvuge x95 (_ bv1 256)) (not (= x155 x105)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x141) (bvuge x149 (_ bv1 256)) (bvuge x136 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x250) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x39) (bvule x237 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x208) (not (= x202 x125)) (= x257 (x142 (_ bv4 256))) (= x152 x299) (not (= x125 x223)) (not (= x105 x223)) (not (= x297 x125)) (bvuge (_ bv4294967295 256) x208) x70 (bvule (_ bv0 256) x145) (= (bvugt (x258 x202) (_ bv0 256)) x9) (bvule (_ bv0 256) x138) (not (= x155 x125)) x220 (not (= x202 x155)) (bvule x67 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x297) (= x149 x121) (not (= x149 x95)) (bvuge x223 (_ bv1 256)) (not (= x149 x297)) x215 (bvule x155 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x155 x67)) (bvuge x123 (_ bv0 256)) (not (= x125 x149)) (not (= x95 x105)) x217 (bvule (_ bv1 256) x250) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x121) (= x194 (bvugt (x258 x149) (_ bv0 256))) (= (bvult (_ bv0 256) (x258 x125)) x296) (= x217 (bvult (_ bv0 256) (x258 x105))) (bvuge x137 (_ bv0 256)) (bvule x205 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x265 (_ bv100 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x234) (= x148 (x142 (_ bv36 256))) (bvuge x155 (_ bv1 256)) (= x240 x286)) (and (= x246 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x257)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x115) (= x146 (x258 x223)) (= (= x78 x259) x272) (bvule (_ bv1 256) x32) (= x207 (x110 (_ bv64 256) x246 (_ bv53 256))) (= (x162 x207) x78) (bvule x259 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x85 x126) (bvuge x92 (_ bv1 256)) (= (ite x226 (_ bv1 256) (_ bv0 256)) x284) (= x56 (_ bv2100654845 256)) (bvuge x246 (_ bv1 256)) (= x21 x123) (= (ite x197 (_ bv1 256) (_ bv0 256)) x306) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x246) (= (_ bv52 256) x144) (= (x276 (_ bv128 256)) x92) (= x211 (_ bv1143531618 256)) (= (_ bv36 256) x98) (= x307 (_ bv52 256)) (= (not (= x286 (_ bv0 256))) x226) (bvule (_ bv1 256) x115) x272 (= x115 (bvand x148 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x197 (not (= (_ bv0 256) x78))) (= x32 (x258 x155)) (= x259 (x116 x246)) (bvule (_ bv1 256) x146) (= x140 (x305 x223)) (= x197 x96) (bvule (_ bv0 256) x259) (bvule (_ bv1 256) x8) (= x271 x302) (= x17 (_ bv128 256)) (= x120 (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256)) (= x246 x302) (= x140 x112) (= x8 (x258 x237)) (= x85 (x180 x21)))) (and (=> (and (and (= x313 x293) (= (x110 (_ bv64 256) x246 (_ bv56 256)) x255) (= (x143 x15) x303) (= x67 x246) (= x244 (_ bv128 256)) (bvuge x228 (_ bv1 256)) (= x228 (x258 x246)) (= (x258 x67) x38) (= x275 (x110 (_ bv64 256) x115 x243)) (= x313 x115) (= x260 x163) (= x280 (_ bv1889567281 256)) (= x1 (x186 (_ bv128 256))) (= x165 (x139 x255)) (= (x110 (_ bv64 256) x246 (_ bv58 256)) x243) (= x134 (_ bv36 256)) (bvuge x38 (_ bv1 256)) (= x260 (x25 x275)) (= x1 x312) (= (_ bv128 256) x156) (= x15 (x110 (_ bv64 256) x115 (_ bv103 256))) (= x165 x18) (= (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) x175)) (not x226)) x167) (=> (and x226 (and (or (and (not x6) (and (= x241 (= x159 (_ bv0 256))) (= x122 (bvadd x40 (_ bv1 256))) (= (x298 x122) x159))) (and (= x241 x6) x6)) (and (bvule (_ bv1 256) x37) (bvuge (_ bv4294967295 256) x79) (bvuge x79 (_ bv32 256)) (bvule (_ bv1 256) x22) (= (= (_ bv0 256) x3) x6) (= x99 x191) (= (x110 (_ bv64 256) x246 (_ bv59 256)) x34) (= x310 x191) (= (x110 (_ bv64 256) x115 x34) x315) (= (_ bv128 256) x154) (bvule (_ bv1 256) x23) (= x238 (_ bv36 256)) (= (x258 x246) x22) (= x102 (x110 (_ bv64 256) x246 (_ bv57 256))) (= (x139 x102) x233) (= (_ bv2514325907 256) x147) (= (x213 x315) x235) (bvule (_ bv1 256) x16) (= (_ bv128 256) x192) (= (x258 x67) x16) (= x3 (x219 x40)) (= x67 x246) (= x37 (x258 x246)) (= (x110 (_ bv64 256) x115 (_ bv169 256)) x40) (= (x83 (_ bv128 256)) x23) (= x191 x115) (= x53 (_ bv67786092356555159507356436471653316820297734139094316147850075200834515238912 256))))) x225)))))
(assert (= x115 (x274 (x110 (_ bv64 256) x115 (_ bv103 256)))))
(assert (bvult (_ bv10000 256) (x110 (_ bv64 256) x115 (_ bv103 256))))
(assert (= (or x221 x268) x251))
(assert (= (x161 (x110 (_ bv64 256) x115 x34)) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x202) (= (_ bv0 256) (x76 x202))))
(assert (= (_ bv64 256) (x161 (x110 (_ bv64 256) x115 (_ bv60 256)))))
(assert (bvugt (x110 (_ bv64 256) x246 (_ bv58 256)) (_ bv10000 256)))
(assert (= (x76 (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256)) (_ bv0 256)))
(assert (= (_ bv169 256) (x295 (x110 (_ bv64 256) x115 (_ bv169 256)))))
(assert (bvugt (x110 (_ bv64 256) x246 (_ bv56 256)) (_ bv10000 256)))
(assert (= (and x174 x251) x51))
(assert (x209 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (bvugt (x110 (_ bv64 256) x115 (_ bv60 256)) (_ bv10000 256)))
(assert (not (x209 (x110 (_ bv64 256) x246 (_ bv58 256)))))
(assert (=> (bvule x95 (_ bv10000 256)) (= (x76 x95) (_ bv0 256))))
(assert (x209 (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256)))
(assert (=> (bvuge (_ bv10000 256) x67) (= (_ bv0 256) (x76 x67))))
(assert (= (x76 (_ bv2100654845 256)) (_ bv0 256)))
(assert (= x34 (x295 (x110 (_ bv64 256) x115 x34))))
(assert (bvugt (x110 (_ bv64 256) x115 x34) (_ bv10000 256)))
(assert (bvugt (x110 (_ bv64 256) x246 (_ bv53 256)) (_ bv10000 256)))
(assert (= (_ bv53 256) (x295 (x110 (_ bv64 256) x246 (_ bv53 256)))))
(assert (= (and x241 x62) x268))
(assert (bvult (_ bv10000 256) (x110 (_ bv64 256) x246 (_ bv57 256))))
(assert (x209 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (or x269 x190) x221))
(assert x103)
(assert (= (x110 (_ bv64 256) x115 (_ bv169 256)) (x76 (x110 (_ bv64 256) x115 (_ bv169 256)))))
(assert (not (x209 (x110 (_ bv64 256) x115 (_ bv60 256)))))
(assert (= (x76 (x110 (_ bv64 256) x115 (_ bv103 256))) (x110 (_ bv64 256) x115 (_ bv103 256))))
(assert (= (_ bv58 256) (x295 (x110 (_ bv64 256) x246 (_ bv58 256)))))
(assert (not (x209 (x110 (_ bv64 256) x246 (_ bv53 256)))))
(assert (=> (bvuge (_ bv10000 256) x149) (= (x76 x149) (_ bv0 256))))
(assert (not (x209 (x110 (_ bv64 256) x115 x243))))
(assert (= (or x108 x198) x62))
(assert (= (x161 (x110 (_ bv64 256) x115 (_ bv103 256))) (_ bv64 256)))
(assert (bvugt (x110 (_ bv64 256) x115 x243) (_ bv10000 256)))
(assert (= (x76 (_ bv1143531618 256)) (_ bv0 256)))
(assert (not (x209 (x110 (_ bv64 256) x115 (_ bv169 256)))))
(assert (x209 (_ bv2100654845 256)))
(assert (= (x274 (x110 (_ bv64 256) x246 (_ bv59 256))) x246))
(assert (= (and x216 x226) x41))
(assert (= (and (not x160) x29) x58))
(assert (x209 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x28 (or x13 x58)))
(assert (= (=> (and (and (= x45 (bvadd x156 (_ bv64 256))) (= (= x312 (_ bv0 256)) x160) (not (bvult x18 x163)) (= (bvadd (bvneg x163) x18) x278) (= x158 (_ bv1000000000000000000 256))) (or (and (not x160) (and (= x93 x49) (x183 x312 x278) (= (bvmul x278 x312) x49))) (and (= (_ bv0 256) x93) x160))) x316) x167))
(assert (= (x274 (x110 (_ bv64 256) x246 (_ bv58 256))) x246))
(assert (= (or x231 x184) x29))
(assert (= x246 (x274 (x110 (_ bv64 256) x246 (_ bv56 256)))))
(assert (= x115 (x274 (x110 (_ bv64 256) x115 (_ bv60 256)))))
(assert (bvult (_ bv10000 256) (x110 (_ bv64 256) x115 (_ bv169 256))))
(assert (x209 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x198 (and x6 x41)))
(assert (= (or x60 x51) x231))
(assert (= (x76 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x246) (= (_ bv0 256) (x76 x246))))
(assert (= x43 (or x239 (and x28 (not x281)))))
(assert (not (x209 (x110 (_ bv64 256) x246 (_ bv59 256)))))
(assert (=> (bvuge (_ bv10000 256) x125) (= (x76 x125) (_ bv0 256))))
(assert (= (x76 (_ bv77053863734975077137548456399560439977311721439096602559221323163398253314048 256)) (_ bv0 256)))
(assert (not (x209 (x110 (_ bv64 256) x246 (_ bv57 256)))))
(assert (x209 (_ bv67786092356555159507356436471653316820297734139094316147850075200834515238912 256)))
(assert (= (x110 (_ bv64 256) x115 (_ bv60 256)) (x76 (x110 (_ bv64 256) x115 (_ bv60 256)))))
(assert (= true x216))
(assert (=> (bvule x105 (_ bv10000 256)) (= (_ bv0 256) (x76 x105))))
(assert (= (x76 (x110 (_ bv64 256) x246 (_ bv59 256))) (x110 (_ bv64 256) x246 (_ bv59 256))))
(assert (= (x110 (_ bv64 256) x246 (_ bv56 256)) (x76 (x110 (_ bv64 256) x246 (_ bv56 256)))))
(assert (= (and x251 (not x174)) x60))
(assert (= (=> (and (or (and x281 (and (= (x110 (_ bv64 256) x115 (_ bv60 256)) x236) (= (bvadd x94 x252) x61) (= x94 (x127 x236)) (not (bvult (bvadd x252 x94) x94)))) (not x281)) (and (= x252 (bvudiv x93 (_ bv1000000000000000000 256))) (= (bvugt x252 (_ bv0 256)) x281))) x230) x316))
(assert (=> (bvule x155 (_ bv10000 256)) (= (x76 x155) (_ bv0 256))))
(assert (= (x161 (x110 (_ bv64 256) x115 x243)) (_ bv64 256)))
(assert (= (x295 (x110 (_ bv64 256) x246 (_ bv56 256))) (_ bv56 256)))
(assert (=> (bvuge (_ bv10000 256) x21) (= (x76 x21) (_ bv0 256))))
(assert (= (x110 (_ bv64 256) x246 (_ bv58 256)) (x76 (x110 (_ bv64 256) x246 (_ bv58 256)))))
(assert (x209 (_ bv2514325907 256)))
(assert (= x246 (x274 (x110 (_ bv64 256) x246 (_ bv57 256)))))
(assert (= x222 (=> (and (= (bvudiv x74 x113) x204) (= x64 x204) (= (_ bv128 256) x262) (= x44 (bvadd (bvneg (_ bv1 256)) x113)) (= (bvadd x91 x44) x74) (= x294 (_ bv192 256)) (not (bvugt x91 (bvadd x91 x44))) (= (_ bv1 256) x73)) x218)))
(assert (= (x161 (x110 (_ bv64 256) x246 (_ bv58 256))) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x237) (= (_ bv0 256) (x76 x237))))
(assert (= x243 (x295 (x110 (_ bv64 256) x115 x243))))
(assert (= (x76 (x110 (_ bv64 256) x115 x243)) (x110 (_ bv64 256) x115 x243)))
(assert (= (x295 (x110 (_ bv64 256) x115 (_ bv60 256))) (_ bv60 256)))
(assert (= (_ bv0 256) (x76 (_ bv1000000000000000000 256))))
(assert (not (x209 (x110 (_ bv64 256) x115 (_ bv103 256)))))
(assert (= x246 (x274 (x110 (_ bv64 256) x246 (_ bv53 256)))))
(assert (= (x110 (_ bv64 256) x246 (_ bv57 256)) (x76 (x110 (_ bv64 256) x246 (_ bv57 256)))))
(assert (= (x295 (x110 (_ bv64 256) x246 (_ bv57 256))) (_ bv57 256)))
(assert (= x184 (and (not x226) x216)))
(assert (x209 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)))
(assert (= (_ bv64 256) (x161 (x110 (_ bv64 256) x246 (_ bv57 256)))))
(assert (= x269 (and x264 (not x77))))
(assert (bvult (_ bv10000 256) (x110 (_ bv64 256) x246 (_ bv59 256))))
(assert (=> (bvuge (_ bv10000 256) x223) (= (x76 x223) (_ bv0 256))))
(assert (= (x76 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (x209 (_ bv1000000000000000000 256)))
(assert (= x190 (and x77 x264)))
(assert (= (x161 (x110 (_ bv64 256) x115 (_ bv169 256))) (_ bv64 256)))
(assert (= (x76 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (x274 (x110 (_ bv64 256) x115 x243)) x115))
(assert (= (_ bv64 256) (x161 (x110 (_ bv64 256) x246 (_ bv53 256)))))
(assert (=> (bvule x297 (_ bv10000 256)) (= (x76 x297) (_ bv0 256))))
(assert (= x225 (and (=> (and (= x64 (_ bv0 256)) x241) x218) (=> (and (not x241) (and (or (and (= (_ bv0 256) x91) x77) (and (not x77) (and (= x91 x12) (x183 x181 x270) (= (bvmul x181 x270) x12)))) (and (= (x219 x40) x181) (= x11 (bvadd (_ bv1 256) x40)) (= x77 (= x181 (_ bv0 256))) (bvuge x113 (_ bv1 256)) (= x113 (x298 x11))))) x222))))
(assert (= (x295 (x110 (_ bv64 256) x115 (_ bv103 256))) (_ bv103 256)))
(assert (x209 (_ bv77053863734975077137548456399560439977311721439096602559221323163398253314048 256)))
(assert (= (_ bv0 256) (x76 (_ bv1889567281 256))))
(assert (= (x76 (_ bv2514325907 256)) (_ bv0 256)))
(assert (= (x274 (x110 (_ bv64 256) x115 (_ bv169 256))) x115))
(assert (bvult x7 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (=> (and (and (= x178 (x24 (_ bv128 256))) (= x174 (= (_ bv0 256) x178)) (= x5 (_ bv1000000000000000000 256))) (or (and (not x174) (and (x183 x178 (_ bv1000000000000000000 256)) (= (bvmul x178 (_ bv1000000000000000000 256)) x195) (= x89 x195))) (and (= x89 (_ bv0 256)) x174))) x247) x218))
(assert (not x267))
(check-sat)
(exit)
