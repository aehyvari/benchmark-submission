(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x300 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x313 () Bool)
(declare-fun x141 () Bool)
(declare-fun x24 () Bool)
(declare-fun x305 () Bool)
(declare-fun x56 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x321 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x170 () Bool)
(declare-fun x174 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x325 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x42 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x311 () (_ BitVec 256))
(declare-fun x124 () Bool)
(declare-fun x322 () Bool)
(declare-fun x109 () Bool)
(declare-fun x315 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x335 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x317 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x303 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x266 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x296 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x146 () Bool)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x268 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x191 () Bool)
(declare-fun x331 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x292 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x281 () Bool)
(declare-fun x316 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x195 () Bool)
(declare-fun x205 () Bool)
(declare-fun x21 () Bool)
(declare-fun x183 () Bool)
(declare-fun x333 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x5 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x133 () Bool)
(declare-fun x239 () (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x76 () Bool)
(declare-fun x330 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x47 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x301 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x185 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x307 ((_ BitVec 256)) Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x104 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x323 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x121 () Bool)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x334 () (_ BitVec 256))
(declare-fun x260 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x250 () Bool)
(declare-fun x324 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x328 () Bool)
(declare-fun x67 () Bool)
(declare-fun x225 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x314 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x319 () Bool)
(declare-fun x210 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x211 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x106 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x253 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x286 () Bool)
(declare-fun x290 () Bool)
(declare-fun x332 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x102 () Bool)
(declare-fun x127 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x94 () Bool)
(declare-fun x158 () Bool)
(declare-fun x39 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x232 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x204 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x306 () (_ BitVec 256))
(declare-fun x329 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x149 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x218 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x336 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x206 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x299 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x112 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x184 () Bool)
(declare-fun x23 () Bool)
(declare-fun x142 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(define-fun x254 ((x79 (_ BitVec 256)) (x117 (_ BitVec 256))) Bool (= x79 (bvudiv (bvmul x117 x79) x117)))
(define-fun x95 ((x79 (_ BitVec 256)) (x117 (_ BitVec 256))) Bool (= x79 (bvsdiv (bvmul x79 x117) x117)))
(define-fun x145 ((x79 (_ BitVec 256)) (x117 (_ BitVec 256))) Bool (= x79 (bvsdiv (bvmul x117 x79) x117)))
(define-fun x48 ((x309 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x163 ((x309 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x28 ((x309 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x248 ((x309 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x252 ((x309 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x17 ((x309 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x202 ((x309 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x244 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 x68) x57 (x315 x309)))
(define-fun x119 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 x271) x242 (x244 x309)))
(define-fun x293 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 x287) x134 (x149 x309)))
(define-fun x123 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite x12 (x149 x309) (x293 x309)))
(define-fun x277 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 x259) x264 (x47 x309)))
(define-fun x326 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite x305 (ite x32 (x47 x309) (x277 x309)) (x47 x309)))
(define-fun x291 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x309) x264 (x252 x309)))
(define-fun x11 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite x305 (ite x32 (x252 x309) (x291 x309)) (x252 x309)))
(define-fun x9 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv128 256)) x134 (x11 x309)))
(define-fun x234 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite x12 (x11 x309) (x9 x309)))
(define-fun x278 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv128 256)) x8 (x234 x309)))
(define-fun x63 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv160 256)) x13 (x278 x309)))
(define-fun x213 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite x303 (x234 x309) (x63 x309)))
(define-fun x327 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv164 256)) x44 (x48 x309)))
(define-fun x181 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x309) x201 (x327 x309)))
(define-fun x101 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv228 256)) x53 (x181 x309)))
(define-fun x43 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x309) (_ bv100 256) (x163 x309)))
(define-fun x115 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x309) x88 (x101 x309)))
(define-fun x89 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv324 256)) x196 (x213 x309)))
(define-fun x229 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv356 256)) x179 (x89 x309)))
(define-fun x73 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x309) x98 (x229 x309)))
(define-fun x280 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv324 256)) (_ bv32 256) (x17 x309)))
(define-fun x263 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv0 256)) (_ bv1 256) (x296 x309)))
(define-fun x203 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvugt (_ bv388 256) x309) (bvuge x309 (_ bv356 256))) (x263 (bvadd (bvneg (_ bv356 256)) x309)) (x202 x309)))
(define-fun x74 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 (_ bv420 256)) x283 (x73 x309)))
(define-fun x111 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite x170 (x73 x309) (ite x133 (x229 x309) (ite x178 (x89 x309) (ite x238 (x213 x309) (x74 x309))))))
(define-fun x302 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x309 x212) (_ bv0 256) (x111 x309)))
(define-fun x176 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x271 x309) x93 (x119 x309)))
(define-fun x279 ((x309 (_ BitVec 256))) (_ BitVec 256) (ite (= x3 x309) x97 (x185 x309)))
(assert (not (x307 (x174 (_ bv64 256) x220 (_ bv60 256)))))
(assert (= x249 (x321 (x174 (_ bv64 256) x8 x249))))
(assert (= (_ bv0 256) (x266 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (not (x307 (x174 (_ bv64 256) x219 (_ bv60 256)))))
(assert (= (and x300 x66) x121))
(assert (x307 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x133 (and (not x191) x195)))
(assert (= (or (and x300 (not x66)) x121) x72))
(assert (= x170 (and x106 (not x52))))
(assert (not (x307 (x174 (_ bv64 256) x190 (_ bv60 256)))))
(assert (= (=> (= x56 (= x265 x134)) (and (=> (and x56 (= (_ bv0 256) x13)) x102) (=> (and (not x56) (and (or (and (not x286) (and (not (bvult x134 x269)) (x254 x61 x269) (= (bvudiv x22 (_ bv1000000000000000000 256)) x116) (bvuge x22 (_ bv0 256)) (= (bvmul x61 x269) x22) (bvule x22 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x128 x116) (= (bvadd (bvneg x265) x134) x269))) (and (= x128 (_ bv0 256)) x286)) (= x286 (= x61 (_ bv0 256))))) x173))) x75))
(assert (= (x266 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x266 (bvadd x332 (_ bv1 256))) (x266 x332)))
(assert (bvugt (x174 (_ bv64 256) x201 (_ bv2 256)) (_ bv10000 256)))
(assert (= (and x124 (not x298)) x245))
(assert (= (and x124 x298) x303))
(assert (= (x5 (x174 (_ bv64 256) x44 (_ bv3 256))) (_ bv64 256)))
(assert (not (x307 (x174 (_ bv64 256) x8 (_ bv61 256)))))
(assert (bvugt (x174 (_ bv64 256) x219 (_ bv60 256)) (_ bv10000 256)))
(assert (bvugt (x174 (_ bv64 256) x190 (_ bv60 256)) (_ bv10000 256)))
(assert (= (x266 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x10) (= (_ bv0 256) (x266 x10))))
(assert (= (x321 (x174 (_ bv64 256) x271 (_ bv60 256))) (_ bv60 256)))
(assert (= x313 (or x178 x238 x133 x170 x225)))
(assert (= (and (not x322) x319) x238))
(assert (= (x266 (x174 (_ bv64 256) x220 (_ bv60 256))) (x174 (_ bv64 256) x220 (_ bv60 256))))
(assert (= (x266 (x174 (_ bv64 256) x44 (_ bv2 256))) (x174 (_ bv64 256) x44 (_ bv2 256))))
(assert (= (x260 (x174 (_ bv64 256) x190 (_ bv60 256))) x190))
(assert (= x184 (and (not x286) x251)))
(assert (= (x321 (x174 (_ bv64 256) x219 (_ bv60 256))) (_ bv60 256)))
(assert (= (or x217 x32) x305))
(assert (= (x260 (x174 (_ bv64 256) x219 (_ bv60 256))) x219))
(assert (= (x174 (_ bv64 256) x8 (_ bv0 256)) (x266 (x174 (_ bv64 256) x8 (_ bv0 256)))))
(assert (bvugt (x174 (_ bv64 256) x44 (_ bv3 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x174 (_ bv64 256) x129 x64)))
(assert (= x8 (x260 (x174 (_ bv64 256) x8 x249))))
(assert (not (x307 (x174 (_ bv64 256) x8 x249))))
(assert (= x329 (=> (and (= x193 (bvmul x324 x120)) (not (bvugt x324 x246)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x193) (= (= x275 (_ bv0 256)) x29) (or x29 x312) (= (bvadd x262 x228) x294) (bvuge x193 (_ bv0 256)) (= x324 (bvadd x246 (bvneg x155))) (= x228 (bvudiv x41 x306)) (= x312 (= x165 (_ bv1000000000000000000 256))) (= x275 x193) (not (bvugt x228 (bvadd x228 x262))) (= (bvmul x275 (_ bv1000000000000000000 256)) x41) (= x264 x294) (= x165 (bvudiv x41 x275)) (bvuge x306 (_ bv1 256)) (x254 x120 x324)) x24)))
(assert (= (and (not x109) x21) x178))
(assert (= x251 (and (not x56) x215)))
(assert (= x44 (x260 (x174 (_ bv64 256) x44 (_ bv2 256)))))
(assert (= (=> (and (= x94 (not (bvult (_ bv128 256) x92))) (= (x115 (_ bv256 256)) x283)) (and x62 x94)) x241))
(assert (not (x307 (x174 (_ bv64 256) x166 x258))))
(assert (= (_ bv0 256) (x266 (_ bv553353397 256))))
(assert (= (_ bv60 256) (x321 (x174 (_ bv64 256) x190 (_ bv60 256)))))
(assert (= x224 (and (not x183) x20)))
(assert (x307 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (not (x307 (x174 (_ bv64 256) x201 (_ bv2 256)))))
(assert (= (x266 (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256))))
(assert (= x220 (x260 (x174 (_ bv64 256) x220 (_ bv60 256)))))
(assert (= x204 (=> (and (and (= (bvugt x147 (_ bv0 256)) x66) (= (_ bv324 256) x171) (= (x280 (_ bv324 256)) x147) (= (_ bv324 256) x100) (= x160 (_ bv324 256))) (or (not x66) (and x66 (and (= (_ bv1 256) x107) (bvuge x297 (_ bv32 256)) (= x297 (x280 (_ bv324 256))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x297) (= x107 (x203 (_ bv356 256))))))) x154)))
(assert (= (_ bv2 256) (x321 (x174 (_ bv64 256) x44 (_ bv2 256)))))
(assert (= (x266 (_ bv599290589 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x90 (_ bv60 256)))))
(assert (= (or (and x313 (not x104)) x146) x300))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x8 x249))))
(assert (=> (bvule x8 (_ bv10000 256)) (= (_ bv0 256) (x266 x8))))
(assert (= (x260 (x174 (_ bv64 256) x90 (_ bv60 256))) x90))
(assert (= (or x276 x12) x124))
(assert (= (=> (and (= (x174 (_ bv64 256) x8 x249) x287) (= x128 x13)) x102) x173))
(assert (x307 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (=> (and (= x42 (= x264 x262)) (or x42 (not x42))) x141) x24))
(assert (= (and (not x295) x138) x290))
(assert (x307 (_ bv1817583341 256)))
(assert (= x276 (or x184 x206)))
(assert (= (x260 (x174 (_ bv64 256) x44 (_ bv3 256))) x44))
(assert (=> (bvule x190 (_ bv10000 256)) (= (_ bv0 256) (x266 x190))))
(assert (= (x321 (x174 (_ bv64 256) x8 (_ bv61 256))) (_ bv61 256)))
(assert (= (x266 x237) (x266 (bvadd x237 (_ bv1 256)))))
(assert (= (_ bv2 256) (x321 (x174 (_ bv64 256) x201 (_ bv2 256)))))
(assert (x307 (_ bv599290589 256)))
(assert (= (x5 (x174 (_ bv64 256) x129 x64)) (_ bv64 256)))
(assert (x307 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= (x266 (_ bv1817583341 256)) (_ bv0 256)))
(assert (= (x174 (_ bv64 256) x90 (_ bv60 256)) (x266 (x174 (_ bv64 256) x90 (_ bv60 256)))))
(assert (= (_ bv0 256) (x266 (_ bv340282366920938463463374607431768211455 256))))
(assert (=> (bvule x129 (_ bv10000 256)) (= (x266 x129) (_ bv0 256))))
(assert (= (and x290 (not x159)) x99))
(assert (= (x260 (x174 (_ bv64 256) x129 x64)) x129))
(assert (= (x174 (_ bv64 256) x166 x258) (x266 (x174 (_ bv64 256) x166 x258))))
(assert (= (x260 (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (_ bv2 256)))
(assert (not (x307 (x174 (_ bv64 256) x90 (_ bv60 256)))))
(assert (x307 (_ bv20282409603651670423947251286015 256)))
(assert (= (x260 (x174 (_ bv64 256) x271 x335)) x271))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x271 (_ bv60 256)))))
(assert (= x319 (or x303 x245)))
(assert (x307 (_ bv1000000000000000000 256)))
(assert (not (x307 (x174 (_ bv64 256) x271 x335))))
(assert (= (x174 (_ bv64 256) x201 (_ bv2 256)) (x266 (x174 (_ bv64 256) x201 (_ bv2 256)))))
(assert (= (x321 (x174 (_ bv64 256) x220 (_ bv60 256))) (_ bv60 256)))
(assert (= (=> (and (or x298 (not x298)) (and (= (bvadd x13 x143) x199) (= x239 (x174 (_ bv64 256) x8 (_ bv61 256))) (= (= (_ bv0 256) x13) x298) (not (bvugt x143 (bvadd x13 x143))) (= (x232 x239) x143))) x186) x102))
(assert (= x201 (x260 (x174 (_ bv64 256) x201 (_ bv2 256)))))
(assert (not (x307 (x174 (_ bv64 256) x129 x64))))
(assert (= x186 (=> (and (= x322 (bvult (_ bv0 256) x92)) (not (bvult x199 x65)) (= (_ bv260 256) x110) (= x118 (bvand x240 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))) (= (x101 (_ bv160 256)) x240) (bvule (_ bv1 256) x53) (= x92 (x43 (_ bv128 256))) (= (_ bv128 256) x208) (= x88 (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x118)) (= x65 (bvadd x199 (bvneg x53))) (= (bvand x311 (_ bv1461501637330902918203684832716283019655932542975 256)) x44) (= x53 (ite (bvult x199 x161) x199 x161)) (= x96 (_ bv0 256))) (and (=> (not x322) x62) (=> (and (and (= x196 (x115 (_ bv160 256))) (= (bvult (_ bv32 256) x92) x109)) x322) (and (=> (and x109 (and (= (x115 (_ bv192 256)) x179) (= x191 (bvult (_ bv64 256) x92)))) (and (=> (and (and (= x52 (bvult (_ bv96 256) x92)) (= (x115 (_ bv224 256)) x98)) x191) (and (=> x52 x241) (=> (not x52) x62))) (=> (not x191) x62))) (=> (not x109) x62)))))))
(assert (= (x174 (_ bv64 256) x8 (_ bv61 256)) (x266 (x174 (_ bv64 256) x8 (_ bv61 256)))))
(assert (= (x260 (x174 (_ bv64 256) x8 (_ bv0 256))) x8))
(assert (= (or x316 x284) x138))
(assert (= (x321 (x174 (_ bv64 256) x271 x335)) x335))
(assert (bvugt (x174 (_ bv64 256) x90 (_ bv60 256)) (_ bv10000 256)))
(assert (x307 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (and x215 x56) x12))
(assert (= x217 (and x76 (not x42))))
(assert (not x45))
(assert (bvult (_ bv10000 256) (x174 (_ bv64 256) x271 x335)))
(assert (= x106 (and x191 x195)))
(assert (bvugt (x174 (_ bv64 256) x166 x258) (_ bv10000 256)))
(assert (=> (bvuge (_ bv10000 256) x220) (= (x266 x220) (_ bv0 256))))
(assert (=> (bvule x271 (_ bv10000 256)) (= (x266 x271) (_ bv0 256))))
(assert (= (x266 (bvadd x49 (_ bv2 256))) (x266 x49)))
(assert (= (x5 (x174 (_ bv64 256) x8 (_ bv0 256))) (_ bv64 256)))
(assert (= (x321 (x174 (_ bv64 256) x90 (_ bv60 256))) (_ bv60 256)))
(assert (= (and x39 x288) x284))
(assert (bvugt (x174 (_ bv64 256) x8 (_ bv0 256)) (_ bv10000 256)))
(assert (= (=> (and (and (= x331 x219) (and (and (= (_ bv1817583341 256) x78) (bvuge x40 (_ bv1 256)) (= x49 (x174 (_ bv64 256) x219 (_ bv60 256))) (= (x112 x271) x40) (= x129 x282) (= x26 x150) (= x129 x46) (= x219 x188) (= x304 (x123 x51)) (= (bvadd x49 (_ bv2 256)) x64) (= x51 (x174 (_ bv64 256) x129 x64)) (= (_ bv36 256) x151)) (and (= (_ bv2727740892 256) x187) (= x220 x27) (= x127 (bvadd x332 (_ bv1 256))) (= x4 (x112 x271)) (= x26 x220) (bvule (_ bv1 256) x4) (= x71 (bvule x304 x320)) (= x320 (x326 x127)) (= (x174 (_ bv64 256) x220 (_ bv60 256)) x332)))) (and (= (_ bv68 256) x85) (= x282 x177) (= x331 x150))) x71) x154))
(assert (bvugt (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256)) (_ bv10000 256)))
(assert (bvugt (x174 (_ bv64 256) x8 x249) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x174 (_ bv64 256) x271 (_ bv60 256))))
(assert (bvult (_ bv10000 256) (x174 (_ bv64 256) x220 (_ bv60 256))))
(assert (= x195 (and x109 x21)))
(assert (x307 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (not (x307 (x174 (_ bv64 256) x44 (_ bv3 256)))))
(assert (= (x266 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= x21 (and x322 x319)))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x8 (_ bv61 256)))))
(assert (= x141 (=> (and (= x15 (bvand x256 (_ bv340282366920938463463374607431768211455 256))) (= x134 x264)) x75)))
(assert (= (_ bv0 256) (x266 (_ bv2727740892 256))))
(assert (= (x266 (x174 (_ bv64 256) x190 (_ bv60 256))) (x174 (_ bv64 256) x190 (_ bv60 256))))
(assert (not (x307 (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (bvult (_ bv10000 256) (x174 (_ bv64 256) x8 (_ bv61 256))))
(assert (= (x174 (_ bv64 256) x44 (_ bv3 256)) (x266 (x174 (_ bv64 256) x44 (_ bv3 256)))))
(assert (= (x5 (x174 (_ bv64 256) x190 (_ bv60 256))) (_ bv64 256)))
(assert (= (or x224 x305) x215))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x219 (_ bv60 256)))))
(assert (= (x266 (x174 (_ bv64 256) x8 x249)) (x174 (_ bv64 256) x8 x249)))
(assert (= (x5 (x174 (_ bv64 256) x166 x258)) (_ bv64 256)))
(assert (= x250 (and x138 x295)))
(assert (= x316 (and (not x39) x288)))
(assert (= (x321 (x174 (_ bv64 256) x8 (_ bv0 256))) (_ bv0 256)))
(assert (= x45 (=> (and (and (= x90 x81) (and (and (and (bvuge x161 (_ bv1 256)) (= x201 (x211 (_ bv36 256))) (= x310 (_ bv2727740892 256)) (= x161 (x211 (_ bv68 256))) (= (bvule x299 x30) x36) (= x236 (bvadd x237 (_ bv1 256))) (= x227 x161) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x201) (= x201 x60) (= (x211 (_ bv4 256)) x8) (bvule (_ bv1 256) x164) (bvule x8 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x30 (x47 x236)) (= x237 (x174 (_ bv64 256) x190 (_ bv60 256))) (= (x112 x271) x164) (= x190 x37) (= x330 x190) x36 (= x34 x8)) (and (and (and (= (bvadd (bvneg x155) x256) x289) (= x34 x318) (= x262 (x47 x259)) (bvuge x189 (_ bv1 256)) (= x7 x60) (= x200 (x244 x271)) (= (x174 (_ bv64 256) x8 x249) x197) (= x249 (bvadd (_ bv2 256) x156)) (= (x31 x169) x61) (bvule x223 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x68 x82) (= x57 x261) (= (x253 x156) x155) (= x57 (x315 x68)) (= x169 (x174 (_ bv64 256) x8 (_ bv0 256))) (= x223 (x336 x168)) (= (x174 (_ bv64 256) x271 (_ bv60 256)) x156) (= x189 (x112 x271)) (= x265 (x149 x197)) (bvule x61 (_ bv20282409603651670423947251286015 256)) (= (_ bv2 256) x69) (= x200 x242) (= x227 x50) (= x183 (bvult (_ bv0 256) x289)) (= x259 (bvadd x156 (_ bv1 256))) (= (_ bv0 256) x221) (bvuge (_ bv340282366920938463463374607431768211455 256) x155) (= x139 (_ bv553353397 256)) (= x223 x33) (= x168 (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256)))) (= x58 x256)) (= x33 x82))) (and (= x166 x274) (= x105 (x174 (_ bv64 256) x166 x258)) (bvule (_ bv1 256) x323) (= x114 x90) (= (x149 x105) x299) (= x150 x37) (= x166 x334) (= (_ bv36 256) x198) (= (x174 (_ bv64 256) x90 (_ bv60 256)) x142) (= x55 (_ bv1817583341 256)) (= x323 (x112 x271)) (= x258 (bvadd x142 (_ bv2 256)))))) (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x136) (bvuge x180 (_ bv0 256)) (bvuge x125 (_ bv0 256)) (bvuge x58 (_ bv0 256)) (bvule x231 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x1 (bvule (_ bv0 256) x103) (= x130 (bvult (_ bv0 256) (x112 x10))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x273) (bvule x271 (_ bv1461501637330902918203684832716283019655932542975 256)) x130 (bvule (_ bv1 256) x10) (bvule x103 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x81 x150) (= (_ bv68 256) x83) (bvule (_ bv0 256) x144) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x77) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x150) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x144) (bvuge (_ bv4294967295 256) x125) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x177) (bvule x180 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x273) (bvuge x150 (_ bv0 256)) (bvule (_ bv0 256) x136) (bvuge x231 (_ bv0 256)) (bvule (_ bv100 256) x77) (bvule x148 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x58) (bvule (_ bv1 256) x271) (= x177 x274) (not (= x271 x10)) (= x1 (bvugt (x112 x271) (_ bv0 256))) (= (_ bv0 256) x19) (bvule x82 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x177) (bvuge x82 (_ bv0 256)) (bvule x167 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x167 (_ bv0 256)) (bvule (_ bv0 256) x148) (bvule x10 (_ bv1461501637330902918203684832716283019655932542975 256)))) (and (=> (and (= x134 x262) (not x183)) x75) (=> (and x183 (and (and (bvuge (_ bv340282366920938463463374607431768211455 256) x120) (= x39 (ite (= (_ bv0 256) x120) (= (_ bv0 256) x120) (= (_ bv0 256) x306))) (= (x301 x156) x120)) (or (and (= (= x256 x155) x140) (not x39)) (and x39 (= x39 x140))))) x59)))))
(assert (= (x260 (x174 (_ bv64 256) x166 x258)) x166))
(assert (= (x260 (x174 (_ bv64 256) x8 (_ bv61 256))) x8))
(assert (= (or x87 x99) x230))
(assert (= (x260 (x174 (_ bv64 256) x271 (_ bv60 256))) x271))
(assert (= x76 (or x230 x250)))
(assert (x307 (_ bv553353397 256)))
(assert (= (x174 (_ bv64 256) x271 (_ bv60 256)) (x266 (x174 (_ bv64 256) x271 (_ bv60 256)))))
(assert (= (x266 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= x206 (and x286 x251)))
(assert (= (x266 x156) (x266 (bvadd (_ bv1 256) x156))))
(assert (not (x307 (x174 (_ bv64 256) x271 (_ bv60 256)))))
(assert (= (x266 (x174 (_ bv64 256) x129 x64)) (x174 (_ bv64 256) x129 x64)))
(assert (= x225 (and x52 x106)))
(assert (= x87 (and x159 x290)))
(assert (bvugt (x174 (_ bv64 256) x44 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x321 (x174 (_ bv64 256) x44 (_ bv3 256))) (_ bv3 256)))
(assert (x307 (_ bv4294967295 256)))
(assert (= x20 true))
(assert (=> (bvuge (_ bv10000 256) x219) (= (x266 x219) (_ bv0 256))))
(assert (= (x266 (bvadd x156 (_ bv2 256))) (x266 x156)))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x201 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x201) (= (x266 x201) (_ bv0 256))))
(assert (= (and x183 x20) x288))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x220 (_ bv60 256)))))
(assert (=> (bvule x44 (_ bv10000 256)) (= (x266 x44) (_ bv0 256))))
(assert (= x32 (and x42 x76)))
(assert (= (x266 (bvadd (_ bv2 256) x142)) (x266 x142)))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (= (and x104 x313) x146))
(assert (= (=> (= (ite x140 x140 (not (bvugt x132 x155))) x295) (and (=> (and (= x262 x264) x295) x24) (=> (and (not x295) (and (= x159 (bvult x132 x256)) (or (and (= x132 x246) x159) (and (= x246 x256) (not x159))))) x329))) x59))
(assert (= (_ bv0 256) (x266 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x321 (x174 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (_ bv69 256)))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x271 x335))))
(assert (= (_ bv64 256) (x5 (x174 (_ bv64 256) x44 (_ bv2 256)))))
(assert (= (x266 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x166) (= (x266 x166) (_ bv0 256))))
(assert (= (x174 (_ bv64 256) x219 (_ bv60 256)) (x266 (x174 (_ bv64 256) x219 (_ bv60 256)))))
(assert (not (x307 (x174 (_ bv64 256) x44 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x68) (= (x266 x68) (_ bv0 256))))
(assert (=> (bvule x90 (_ bv10000 256)) (= (_ bv0 256) (x266 x90))))
(assert (not (x307 (x174 (_ bv64 256) x8 (_ bv0 256)))))
(assert (= (_ bv0 256) (x266 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x64 (x321 (x174 (_ bv64 256) x129 x64))))
(assert (x307 (_ bv2727740892 256)))
(assert (= x258 (x321 (x174 (_ bv64 256) x166 x258))))
(assert (= (x266 (x174 (_ bv64 256) x271 x335)) (x174 (_ bv64 256) x271 x335)))
(assert (= x62 (=> (and (or (not x104) (and (and (= x54 true) (= (x112 x10) x308) (bvuge x308 (_ bv1 256))) x104)) (and (= (x174 (_ bv64 256) x44 (_ bv2 256)) x233) (= x152 x257) (= (bvadd x84 (bvneg x53)) x97) (= x44 x325) (= (x218 x137) x192) (= x104 (= (_ bv0 256) x267)) (bvule (_ bv1 256) x84) (= x226 x25) (= (_ bv324 256) x255) (bvule (_ bv1 256) x108) (= x292 (bvadd (bvneg (_ bv324 256)) x212)) (= x175 x247) (= x325 x182) (= x93 (x119 x271)) (= x53 x247) (= x84 (x185 x233)) (= (x112 x10) x108) (not (bvult x84 x97)) (not (bvugt x216 x192)) (= x14 x93) (= x137 (x174 (_ bv64 256) x271 x335)) (= x126 (_ bv324 256)) (bvuge x192 (_ bv1 256)) (= (x280 (_ bv324 256)) x267) (= x292 (_ bv100 256)) (not (bvult x84 x53)) (= x3 (x174 (_ bv64 256) x44 (_ bv2 256))) (not (bvugt x235 x317)) (= (x176 x10) x226) (= x135 (_ bv599290589 256)) (= x335 (x174 (_ bv64 256) x44 (_ bv3 256))) (not (bvugt x53 x192)) (= x317 (bvadd x53 x235)) (= (bvadd (bvneg x53) x192) x216) (= x268 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (= (_ bv100 256) x86) (= (x279 x35) x235) (= (bvadd (_ bv324 256) x92) x212) (= (_ bv1 256) x207) (= x35 (x174 (_ bv64 256) x201 (_ bv2 256))) (not (bvugt x235 x317)) (= x7 x152))) x204)))
(check-sat)
(exit)
