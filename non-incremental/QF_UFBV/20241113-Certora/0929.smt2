(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x216 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x79 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x271 () Bool)
(declare-fun x83 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x220 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x214 () Bool)
(declare-fun x135 () Bool)
(declare-fun x70 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x96 () Bool)
(declare-fun x63 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x66 () Bool)
(declare-fun x98 () Bool)
(declare-fun x248 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x62 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x88 () Bool)
(declare-fun x217 () Bool)
(declare-fun x289 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x20 () Bool)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x57 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x13 () Bool)
(declare-fun x244 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x44 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x136 () Bool)
(declare-fun x222 () Bool)
(declare-fun x126 () Bool)
(declare-fun x72 () Bool)
(declare-fun x31 () Bool)
(declare-fun x188 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x283 () Bool)
(declare-fun x285 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x61 () Bool)
(declare-fun x274 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x258 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x267 () Bool)
(declare-fun x260 () (_ BitVec 256))
(declare-fun x130 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x211 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x180 () Bool)
(declare-fun x288 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x199 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x290 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x65 () Bool)
(declare-fun x241 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x100 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x140 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x183 () Bool)
(declare-fun x249 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x124 () Bool)
(declare-fun x56 () Bool)
(declare-fun x194 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x52 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x229 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x75 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x265 () Bool)
(declare-fun x193 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x155 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x236 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x76 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x259 ((_ BitVec 256)) Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x153 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x68 () Bool)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x192 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x149 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x221 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x262 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x33 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x165 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x187 () Bool)
(define-fun x201 ((x200 (_ BitVec 256)) (x28 (_ BitVec 256))) Bool (= x200 (bvudiv (bvmul x28 x200) x28)))
(define-fun x104 ((x200 (_ BitVec 256)) (x28 (_ BitVec 256))) Bool (= x200 (bvsdiv (bvmul x200 x28) x28)))
(define-fun x112 ((x200 (_ BitVec 256)) (x28 (_ BitVec 256))) Bool (= x200 (bvsdiv (bvmul x28 x200) x28)))
(define-fun x186 ((x158 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x41 ((x158 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x230 ((x158 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x92 ((x158 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x24 ((x158 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x171 ((x158 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x30 ((x158 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x261 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 x173) x1 (x199 x158)))
(define-fun x137 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 x257) x160 (x261 x158)))
(define-fun x170 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 (_ bv128 256)) x27 (x24 x158)))
(define-fun x107 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite x62 (ite x232 (x24 x158) (x170 x158)) (x24 x158)))
(define-fun x253 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 (_ bv128 256)) x274 (x107 x158)))
(define-fun x145 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite x109 (x107 x158) (x253 x158)))
(define-fun x82 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x158) x212 (x145 x158)))
(define-fun x156 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x158) x51 (x82 x158)))
(define-fun x23 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite x196 (x145 x158) (x156 x158)))
(define-fun x34 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x158) x197 (x186 x158)))
(define-fun x95 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x158) x260 (x34 x158)))
(define-fun x169 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x158) x36 (x95 x158)))
(define-fun x177 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 (_ bv128 256)) (_ bv100 256) (x41 x158)))
(define-fun x64 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x158) x240 (x169 x158)))
(define-fun x48 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 (_ bv324 256)) x7 (x23 x158)))
(define-fun x219 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv356 256) x158) x255 (x48 x158)))
(define-fun x8 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 (_ bv388 256)) x167 (x219 x158)))
(define-fun x174 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 (_ bv324 256)) (_ bv32 256) (x171 x158)))
(define-fun x159 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x158) (_ bv1 256) (x57 x158)))
(define-fun x10 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x158 (_ bv356 256)) (bvult x158 (_ bv388 256))) (x159 (bvadd (bvneg (_ bv356 256)) x158)) (x30 x158)))
(define-fun x206 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 (_ bv420 256)) x285 (x8 x158)))
(define-fun x166 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite x31 (x8 x158) (ite x131 (x219 x158) (ite x249 (x48 x158) (ite x203 (x23 x158) (x206 x158))))))
(define-fun x178 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 x182) (_ bv0 256) (x166 x158)))
(define-fun x218 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x257 x158) x117 (x137 x158)))
(define-fun x207 ((x158 (_ BitVec 256))) (_ BitVec 256) (ite (= x280 x158) x45 (x220 x158)))
(assert (= (_ bv0 256) (x216 (_ bv599290589 256))))
(assert (= (or x183 x196) x225))
(assert (= (_ bv64 256) (x188 (x192 (_ bv64 256) x257 x144))))
(assert (= x33 (and (not x133) x211)))
(assert (= (x192 (_ bv64 256) x260 (_ bv2 256)) (x216 (x192 (_ bv64 256) x260 (_ bv2 256)))))
(assert (= (or x116 x84) x211))
(assert (= x20 (or x83 x4)))
(assert (= (_ bv61 256) (x149 (x192 (_ bv64 256) x212 (_ bv61 256)))))
(assert (= (_ bv3 256) (x149 (x192 (_ bv64 256) x197 (_ bv3 256)))))
(assert (= (x216 (x192 (_ bv64 256) x197 (_ bv3 256))) (x192 (_ bv64 256) x197 (_ bv3 256))))
(assert (bvugt (x192 (_ bv64 256) x197 (_ bv3 256)) (_ bv10000 256)))
(assert (= x84 (and (not x155) x284)))
(assert (= (x216 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (=> (and (and (bvule x77 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv36 256) x93) (bvuge x12 (_ bv0 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x176) (= x120 (_ bv0 256)) x286 (bvule x25 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x77 (_ bv0 256)) (= (bvult (_ bv0 256) (x130 x257)) x102) x102 (bvule x97 (_ bv4294967295 256)) (bvuge x81 (_ bv0 256)) (bvule x3 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x161 (_ bv0 256)) (bvuge x3 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x161) (bvuge x176 (_ bv68 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x81) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x138) (bvule (_ bv0 256) x138) (bvule x204 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x286 (bvugt (x130 x25) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x108) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x12) (bvule x55 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv1 256) x25) (bvule (_ bv0 256) x108) (not (= x25 x257)) (bvule (_ bv0 256) x55) (bvule (_ bv1 256) x257) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x239) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x257) (bvule (_ bv0 256) x239) (bvuge x97 (_ bv0 256)) (bvule (_ bv0 256) x204)) (and (and (= (x130 x257) x54) (= x273 x157) (= (x153 x29) x101) (= (x63 (_ bv36 256)) x273) (= (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)) x29) (= x49 x260) (bvule x260 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x273 (_ bv1 256)) (= (x63 (_ bv4 256)) x260) (= (_ bv0 256) x69) (bvuge x54 (_ bv1 256)) (= x26 (_ bv0 256)) (= x101 (_ bv0 256)) (= (_ bv1889567281 256) x43)) (and (= x212 x81) (and (and (= x103 x157) (= x110 (bvadd x146 (_ bv2 256))) (= x50 (bvadd x146 (_ bv1 256))) (= x59 (_ bv0 256)) (bvuge x202 (_ bv1 256)) (= x242 (x165 x146)) (= x146 (x192 (_ bv64 256) x257 (_ bv60 256))) (= x250 (x192 (_ bv64 256) x212 (_ bv0 256))) (= x18 (bvugt x19 (_ bv0 256))) (= x163 (x261 x257)) (= x163 x160) (= x236 (_ bv2593764592 256)) (= x1 (x199 x173)) (bvule x242 (_ bv340282366920938463463374607431768211455 256)) (= x277 (x76 x237)) (= x237 (x192 (_ bv64 256) x212 x110)) (= (bvadd (bvneg x242) x181) x19) (= x179 (x229 x50)) (= x251 (x153 x250)) (bvuge (_ bv20282409603651670423947251286015 256) x251) (= x173 x81) (= (x130 x257) x202) (= x6 x1) (= x49 x22)) (= x12 x181))))) (and (=> (and (= x179 x274) (not x18)) x100) (=> (and x18 (and (and (= x139 (x79 x146)) (bvuge (_ bv340282366920938463463374607431768211455 256) x139) (= (ite (= x139 (_ bv0 256)) (= (_ bv0 256) x139) (= x266 (_ bv0 256))) x155)) (or (and x155 (= x155 x195)) (and (= (= x242 x181) x195) (not x155))))) x215))) x85))
(assert (x259 (_ bv1889567281 256)))
(assert (= (and x13 (not x111)) x52))
(assert (= x278 (=> (and (or x91 (not x91)) (= (= x179 x27) x91)) x44)))
(assert (= (=> (and (= x36 (ite (bvult x128 x273) x128 x273)) (= x127 (bvand x53 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))) (bvule (_ bv1 256) x36) (= (_ bv260 256) x46) (= (_ bv0 256) x16) (= (_ bv128 256) x234) (= (bvadd x127 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) x240) (= x152 (bvugt x243 (_ bv0 256))) (= x197 (bvand x198 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (x169 (_ bv160 256)) x53) (= (x177 (_ bv128 256)) x243) (= (bvadd x128 (bvneg x36)) x125) (not (bvult x128 x125))) (and (=> (not x152) x164) (=> (and (and (= (x64 (_ bv160 256)) x7) (= (bvult (_ bv32 256) x243) x98)) x152) (and (=> (not x98) x164) (=> (and (and (= x290 (bvugt x243 (_ bv64 256))) (= (x64 (_ bv192 256)) x255)) x98) (and (=> (and x290 (and (= (x64 (_ bv224 256)) x167) (= x136 (bvugt x243 (_ bv96 256))))) (and (=> (not x136) x164) (=> x136 x14))) (=> (not x290) x164))))))) x135))
(assert (= (_ bv0 256) (x216 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and (not x98) x209) x249))
(assert (= (=> (and (and (= (bvadd (_ bv324 256) x243) x182) (= x5 x39) (= x11 (_ bv100 256)) (= x275 x80) (= (= (_ bv0 256) x32) x126) (bvule (_ bv1 256) x38) (= x147 (_ bv324 256)) (not (bvugt x36 x38)) (= (bvadd (bvneg x36) x254) x45) (= x21 (x192 (_ bv64 256) x260 (_ bv2 256))) (not (bvugt x123 x245)) (= x205 (_ bv1 256)) (= x117 (x137 x257)) (= x245 (bvadd x123 x36)) (bvule (_ bv1 256) x254) (= x38 (x244 x287)) (= (x192 (_ bv64 256) x257 x144) x287) (= (x192 (_ bv64 256) x197 (_ bv2 256)) x280) (= x114 x162) (= (x218 x25) x263) (= x80 x197) (= x227 (x130 x25)) (not (bvugt x36 x254)) (= x114 x36) (= x78 x263) (= (x192 (_ bv64 256) x197 (_ bv2 256)) x58) (not (bvugt x106 x38)) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x252) (= x175 (bvadd x182 (bvneg (_ bv324 256)))) (= (x220 x58) x254) (= (x174 (_ bv324 256)) x32) (= x117 x2) (not (bvult x254 x45)) (= (x207 x21) x123) (= (bvadd (bvneg x36) x38) x106) (= x22 x5) (= (_ bv324 256) x105) (= (_ bv100 256) x175) (= x247 (_ bv599290589 256)) (= (x192 (_ bv64 256) x197 (_ bv3 256)) x144) (not (bvult x245 x123)) (bvule (_ bv1 256) x227)) (or (not x126) (and (and (= (x130 x25) x86) (= true x194) (bvule (_ bv1 256) x86)) x126))) x134) x164))
(assert (bvugt (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x192 (_ bv64 256) x257 (_ bv60 256))))
(assert (= x61 (or x109 x141)))
(assert (= (or x232 x180) x62))
(assert (= (x289 (x192 (_ bv64 256) x197 (_ bv3 256))) x197))
(assert (= x197 (x289 (x192 (_ bv64 256) x197 (_ bv2 256)))))
(assert (= (_ bv2 256) (x149 (x192 (_ bv64 256) x197 (_ bv2 256)))))
(assert (not (x259 (x192 (_ bv64 256) x257 (_ bv60 256)))))
(assert (= (x216 (x192 (_ bv64 256) x212 (_ bv61 256))) (x192 (_ bv64 256) x212 (_ bv61 256))))
(assert (= x257 (x289 (x192 (_ bv64 256) x257 (_ bv60 256)))))
(assert (= (and (not x18) x222) x118))
(assert (= (x149 (x192 (_ bv64 256) x260 (_ bv2 256))) (_ bv2 256)))
(assert (= x131 (and x269 (not x290))))
(assert (= (and x111 x13) x88))
(assert (not x85))
(assert (= x180 (and x20 (not x91))))
(assert (= (x188 (x192 (_ bv64 256) x212 (_ bv0 256))) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x197) (= (_ bv0 256) (x216 x197))))
(assert (= (_ bv64 256) (x188 (x192 (_ bv64 256) x197 (_ bv2 256)))))
(assert (= (_ bv0 256) (x149 (x192 (_ bv64 256) x212 (_ bv0 256)))))
(assert (= (or x62 x118) x124))
(assert (= x212 (x289 (x192 (_ bv64 256) x212 x110))))
(assert (= (x188 (x192 (_ bv64 256) x257 (_ bv60 256))) (_ bv64 256)))
(assert (= (and x248 x61) x196))
(assert (= (_ bv0 256) (x216 (_ bv1889567281 256))))
(assert (= (_ bv0 256) (x216 (_ bv2593764592 256))))
(assert (= x110 (x149 (x192 (_ bv64 256) x212 x110))))
(assert (bvult (_ bv10000 256) (x192 (_ bv64 256) x212 (_ bv61 256))))
(assert (= (_ bv0 256) (x216 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (x216 (bvadd x146 (_ bv2 256))) (x216 x146)))
(assert (x259 (_ bv340282366920938463463374607431768211455 256)))
(assert (x259 (_ bv1000000000000000000 256)))
(assert (= (x188 (x192 (_ bv64 256) x197 (_ bv3 256))) (_ bv64 256)))
(assert (= x141 (or x88 x52)))
(assert (=> (bvule x260 (_ bv10000 256)) (= (x216 x260) (_ bv0 256))))
(assert (bvult (_ bv10000 256) (x192 (_ bv64 256) x212 x110)))
(assert (= x260 (x289 (x192 (_ bv64 256) x260 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x192 (_ bv64 256) x212 (_ bv0 256))))
(assert (not (x259 (x192 (_ bv64 256) x197 (_ bv2 256)))))
(assert (= (=> (= x133 (ite x195 x195 (not (bvult x242 x42)))) (and (=> (and x133 (= x179 x27)) x278) (=> (and (and (= x17 (bvult x42 x181)) (or (and (= x238 x181) (not x17)) (and x17 (= x42 x238)))) (not x133)) x143))) x215))
(assert (= (=> (and (bvule x151 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x27 x256) (= x288 (bvudiv x60 x266)) (= x151 x35) (= (bvudiv x60 x35) x121) (not (bvugt x288 (bvadd x288 x179))) (bvule (_ bv1 256) x266) (= x184 (bvadd x238 (bvneg x242))) (= x270 (= (_ bv1000000000000000000 256) x121)) (= x226 (= (_ bv0 256) x35)) (= x151 (bvmul x139 x184)) (= (bvadd x288 x179) x256) (or x270 x226) (not (bvugt x184 x238)) (= x60 (bvmul x35 (_ bv1000000000000000000 256))) (x201 x139 x184) (bvule (_ bv0 256) x151)) x278) x143))
(assert (not (x259 (x192 (_ bv64 256) x212 (_ bv0 256)))))
(assert (= x212 (x289 (x192 (_ bv64 256) x212 (_ bv61 256)))))
(assert (= (and x152 x225) x209))
(assert (= (=> (and (and (= x9 (_ bv324 256)) (= x233 (bvugt x99 (_ bv0 256))) (= x37 (_ bv324 256)) (= x99 (x174 (_ bv324 256))) (= x87 (_ bv324 256))) (or (not x233) (and x233 (and (bvule (_ bv32 256) x113) (= (_ bv1 256) x213) (bvule x113 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (x174 (_ bv324 256)) x113) (= x213 (x10 (_ bv356 256))))))) x193) x134))
(assert (= (and x124 x119) x109))
(assert (x259 (_ bv599290589 256)))
(assert (= (_ bv0 256) (x216 (_ bv1000000000000000000 256))))
(assert (= true x222))
(assert (x259 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (or x249 x31 x131 x203 x267) x72))
(assert (= x83 (and x133 x211)))
(assert (not (x259 (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (x149 (x192 (_ bv64 256) x257 x144)) x144))
(assert (not (x259 (x192 (_ bv64 256) x257 x144))))
(assert (x259 (_ bv4294967295 256)))
(assert (= (x216 (x192 (_ bv64 256) x197 (_ bv2 256))) (x192 (_ bv64 256) x197 (_ bv2 256))))
(assert (x259 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x216 x146) (x216 (bvadd (_ bv1 256) x146))))
(assert (= (or x75 x142) x4))
(assert (= x13 (and (not x119) x124)))
(assert (not (x259 (x192 (_ bv64 256) x197 (_ bv3 256)))))
(assert (= x203 (and (not x152) x225)))
(assert (= x269 (and x98 x209)))
(assert (= (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)) (x216 (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x257) (= (x216 x257) (_ bv0 256))))
(assert (=> (bvule x212 (_ bv10000 256)) (= (x216 x212) (_ bv0 256))))
(assert (= x100 (=> (= x119 (= x274 x277)) (and (=> (and x119 (= x51 (_ bv0 256))) x187) (=> (and (and (= x111 (= x251 (_ bv0 256))) (or (and x111 (= (_ bv0 256) x90)) (and (not x111) (and (= x122 (bvudiv x208 (_ bv1000000000000000000 256))) (x201 x251 x129) (bvuge x208 (_ bv0 256)) (= x208 (bvmul x129 x251)) (bvule x208 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (bvadd (bvneg x277) x274) x129) (= x90 x122) (not (bvult x274 x129)))))) (not x119)) x258)))))
(assert (not (x259 (x192 (_ bv64 256) x212 x110))))
(assert (= (_ bv64 256) (x188 (x192 (_ bv64 256) x212 x110))))
(assert (bvult (_ bv10000 256) (x192 (_ bv64 256) x260 (_ bv2 256))))
(assert (= x75 (and x33 (not x17))))
(assert (= (or x56 (and (not x126) x72)) x221))
(assert (= (and x155 x284) x116))
(assert (= (x192 (_ bv64 256) x257 x144) (x216 (x192 (_ bv64 256) x257 x144))))
(assert (x259 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (=> (and (= (bvand x181 (_ bv340282366920938463463374607431768211455 256)) x231) (= x274 x27)) x100) x44))
(assert (= (and (not x248) x61) x183))
(assert (= x187 (=> (and (or (not x248) x248) (and (= (x140 x71) x47) (not (bvult (bvadd x47 x51) x47)) (= x71 (x192 (_ bv64 256) x212 (_ bv61 256))) (= x248 (= x51 (_ bv0 256))) (= (bvadd x47 x51) x128))) x135)))
(assert (= x212 (x289 (x192 (_ bv64 256) x212 (_ bv0 256)))))
(assert (= (x188 (x192 (_ bv64 256) x260 (_ bv2 256))) (_ bv64 256)))
(assert (= x267 (and x172 x136)))
(assert (= (x289 (x192 (_ bv64 256) x257 x144)) x257))
(assert (= (and x33 x17) x142))
(assert (bvugt (x192 (_ bv64 256) x257 x144) (_ bv10000 256)))
(assert (= x132 (and x221 x233)))
(assert (= (_ bv64 256) (x188 (x192 (_ bv64 256) x212 (_ bv61 256)))))
(assert (= (_ bv60 256) (x149 (x192 (_ bv64 256) x257 (_ bv60 256)))))
(assert (x259 (_ bv20282409603651670423947251286015 256)))
(assert (= x172 (and x290 x269)))
(assert (= x258 (=> (= x51 x90) x187)))
(assert (= (_ bv0 256) (x216 (_ bv20282409603651670423947251286015 256))))
(assert (= (x216 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (x259 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (x192 (_ bv64 256) x212 (_ bv0 256)) (x216 (x192 (_ bv64 256) x212 (_ bv0 256)))))
(assert (not (x259 (x192 (_ bv64 256) x212 (_ bv61 256)))))
(assert (= (_ bv64 256) (x188 (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (=> (bvule x25 (_ bv10000 256)) (= (_ bv0 256) (x216 x25))))
(assert (= x193 (=> (and (= (_ bv36 256) x281) (and (= (x130 x257) x89) (bvuge x89 (_ bv1 256)) (= x189 (x153 x228)) (= (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)) x228) (= x15 (_ bv1889567281 256)) (= x65 (= (_ bv0 256) x189)) (= x190 (_ bv0 256)) (bvuge (_ bv20282409603651670423947251286015 256) x189))) x65)))
(assert (=> (bvule x173 (_ bv10000 256)) (= (_ bv0 256) (x216 x173))))
(assert (= (and x222 x18) x284))
(assert (= (_ bv0 256) (x289 (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (bvugt (x192 (_ bv64 256) x197 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x192 (_ bv64 256) x212 x110) (x216 (x192 (_ bv64 256) x212 x110))))
(assert (x259 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= (_ bv0 256) (x149 (x192 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (x259 (_ bv2593764592 256)))
(assert (= (x216 (x192 (_ bv64 256) x257 (_ bv60 256))) (x192 (_ bv64 256) x257 (_ bv60 256))))
(assert (= x272 (or x132 (and x221 (not x233)))))
(assert (= (=> (and (= (x64 (_ bv256 256)) x285) (= x191 (not (bvult (_ bv128 256) x243)))) (and x191 x164)) x14))
(assert (not (x259 (x192 (_ bv64 256) x260 (_ bv2 256)))))
(assert (= (_ bv0 256) (x216 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (and x20 x91) x232))
(assert (= (and x172 (not x136)) x31))
(assert (= (and x72 x126) x56))
(assert (= (x216 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x216 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(check-sat)
(exit)
