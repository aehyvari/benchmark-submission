(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x18 () Bool)
(declare-fun x148 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x56 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x178 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x126 () Bool)
(declare-fun x107 () Bool)
(declare-fun x50 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x57 () Bool)
(declare-fun x105 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x132 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x157 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x117 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x183 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x201 () Bool)
(declare-fun x7 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x5 () Bool)
(declare-fun x111 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x208 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x161 () Bool)
(declare-fun x72 () Bool)
(declare-fun x36 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x113 () Bool)
(declare-fun x209 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x108 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x92 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x55 () Bool)
(declare-fun x134 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x10 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x130 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x31 () Bool)
(declare-fun x214 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x203 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x95 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x88 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x141 ((_ BitVec 256)) Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x114 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x136 () Bool)
(declare-fun x34 () Bool)
(declare-fun x96 () Bool)
(declare-fun x51 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x4 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x199 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(define-fun x28 ((x84 (_ BitVec 256)) (x210 (_ BitVec 256))) Bool (= x84 (bvudiv (bvmul x210 x84) x210)))
(define-fun x71 ((x84 (_ BitVec 256)) (x210 (_ BitVec 256))) Bool (= x84 (bvsdiv (bvmul x84 x210) x210)))
(define-fun x3 ((x84 (_ BitVec 256)) (x210 (_ BitVec 256))) Bool (= x84 (bvsdiv (bvmul x210 x84) x210)))
(define-fun x147 ((x29 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x184 ((x29 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x211 ((x29 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x83 ((x29 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x151 ((x29 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x174 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (bvugt x68 x29) (x50 x29) (_ bv0 256)))
(define-fun x144 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv0 256) x29) (bvugt x68 x29)) (x114 x29) (x174 x29)))
(define-fun x115 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (= x29 x37) x166 (x36 x29)))
(define-fun x158 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (= x29 (_ bv128 256)) x128 (x147 x29)))
(define-fun x195 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x29) x2 (x151 x29)))
(define-fun x99 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite x96 (x151 x29) (x195 x29)))
(define-fun x165 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (= x44 x29) x17 (x211 x29)))
(define-fun x133 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite x96 (x211 x29) (x165 x29)))
(define-fun x101 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (= x29 x112) x163 (x133 x29)))
(define-fun x6 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite x87 (x133 x29) (x101 x29)))
(define-fun x191 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (= x120 x29) x90 (x83 x29)))
(define-fun x79 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite x96 (x83 x29) (x191 x29)))
(define-fun x40 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite (= x2 x29) x125 (x184 x29)))
(define-fun x58 ((x29 (_ BitVec 256))) (_ BitVec 256) (ite x96 (x184 x29) (x40 x29)))
(assert (x141 (_ bv20282409603651670423947251286015 256)))
(assert (= (x199 (x132 (_ bv64 256) x23 (_ bv60 256))) (x132 (_ bv64 256) x23 (_ bv60 256))))
(assert (x141 (_ bv18446744073709551487 256)))
(assert (not (x141 (x132 (_ bv64 256) x23 (_ bv60 256)))))
(assert (= (and x161 x51) x57))
(assert (= (=> (and (= x156 (bvand (_ bv340282366920938463463374607431768211455 256) x46)) (= x170 x162)) x188) x41))
(assert (= x88 (or x82 x43)))
(assert (= x25 (and x72 x53)))
(assert (= (and (not x35) x138) x15))
(assert (= (x199 (_ bv2997214202 256)) (_ bv0 256)))
(assert (= (x199 (_ bv4294967295 256)) (_ bv0 256)))
(assert (x141 (_ bv18446744073709551519 256)))
(assert (= x30 (or x88 (and x183 (not x142)))))
(assert (= x126 (or x106 x105)))
(assert (x141 (_ bv2997214202 256)))
(assert (=> (bvule x205 (_ bv10000 256)) (= (x199 x205) (_ bv0 256))))
(assert (= (x209 (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256))) (_ bv0 256)))
(assert (= x23 (x203 (x132 (_ bv64 256) x23 (_ bv60 256)))))
(assert (= x85 (=> (and (and (bvule (_ bv1 256) x205) (bvule x131 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x110 (_ bv1 256)) (bvuge x139 (_ bv0 256)) (bvuge x164 (_ bv0 256)) (bvule x21 (_ bv4294967295 256)) (bvule x164 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x110) (bvuge x196 (_ bv0 256)) (bvule (_ bv68 256) x68) (bvule (_ bv0 256) x100) (bvuge x187 (_ bv0 256)) (bvule x20 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x196) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x139) (bvule (_ bv0 256) x159) (bvule x206 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x5 (bvugt (x130 x205) (_ bv0 256))) (= x10 (bvugt (x130 x110) (_ bv0 256))) (bvule x68 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv0 256) x206) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x205) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x187) (bvule (_ bv0 256) x21) (bvule x100 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x10 (bvule (_ bv0 256) x131) (= (_ bv36 256) x143) (bvuge x103 (_ bv0 256)) (= (_ bv0 256) x13) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x103) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x159) (bvule (_ bv0 256) x20) (not (= x110 x205)) x5) (and (and (bvule (_ bv1 256) x168) (bvuge (_ bv18446744073709551615 256) x16) (= x167 (_ bv0 256)) (= (x114 (_ bv4 256)) x16) (= (_ bv0 256) x93) (= x116 (_ bv1889567281 256)) (= x168 (x130 x110)) (= (x157 x182) x150) (= (_ bv0 256) x150) (= x52 x16) (= x182 (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256)))) (and (and (= x46 x206) (and (= x160 (bvadd x197 (_ bv63 256))) (= (bvadd x33 x24) x207) (bvuge x81 (_ bv1 256)) (bvule x66 (_ bv18446744073709551487 256)) (= (bvugt x207 x24) x72) (= (bvadd x16 (_ bv4 256)) x62) (= x9 (_ bv2997214202 256)) (= x166 (x36 x37)) (= (bvmul (_ bv32 256) x128) x197) (= x121 (bvadd x62 (_ bv31 256))) (= x2 (bvadd x66 (_ bv128 256))) (= x54 (_ bv128 256)) (= x166 x202) (bvugt x68 x121) (bvule x128 (_ bv18446744073709551615 256)) (not (bvugt x207 x68)) (= (x144 x62) x128) (= x81 (x130 x110)) (= x131 x37) (= x66 (bvand (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256) x160)) (= x24 (bvadd x62 (_ bv32 256))) (= x75 x32) (= (bvmul x128 (_ bv96 256)) x33) (= (x115 x110) x32))) (= x131 x77)))) (and (=> x72 x74) (=> (not x72) x64)))))
(assert (x141 (_ bv4294967295 256)))
(assert (x141 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x199 x177) (x199 (bvadd x177 (_ bv1 256)))))
(assert (= (_ bv0 256) (x199 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (and x57 x26) x49))
(assert (= x97 (=> (and (= x162 x59) (= (bvmul (_ bv1000000000000000000 256) x8) x171) (bvule x137 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv1 256) x176) (= (bvmul x45 x179) x137) (= (= x8 (_ bv0 256)) x172) (= x212 (bvudiv x171 x176)) (bvule (_ bv0 256) x137) (not (bvult x149 x45)) (= x148 (= x48 (_ bv1000000000000000000 256))) (x28 x179 x45) (or x148 x172) (= (bvudiv x171 x8) x48) (not (bvult (bvadd x212 x153) x212)) (= (bvadd x212 x153) x59) (= (bvadd x149 (bvneg x145)) x45) (= x8 x137)) x31)))
(assert (= (=> (and (= x77 x11) (= (x158 (_ bv128 256)) x154) (= x117 (bvult (_ bv0 256) x154)) (= x11 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x122))) (and (=> x117 x136) (=> (not x117) x140))) x64))
(assert (= (_ bv0 256) (x199 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (bvult (_ bv10000 256) (x132 (_ bv64 256) x23 (_ bv60 256))))
(assert (= (x95 (x132 (_ bv64 256) x23 (_ bv60 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x199 (_ bv1000000000000000000 256))))
(assert (= true x53))
(assert (= (_ bv0 256) (x203 (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= x138 (and x55 (not x118))))
(assert (x141 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)))
(assert (= (x199 (_ bv18446744073709551615 256)) (_ bv0 256)))
(assert (= (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256)) (x199 (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (x95 (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256))) (_ bv64 256)))
(assert (x141 (_ bv1000000000000000000 256)))
(assert (x141 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (=> (and (bvule (_ bv1 256) x124) (= (x158 (_ bv128 256)) x155) (= x34 (not (bvugt x119 (_ bv1 256)))) (bvule (_ bv1 256) x135) (bvuge x155 (_ bv1 256)) (= (x158 (_ bv128 256)) x119) (= (bvand (_ bv340282366920938463463374607431768211455 256) x193) x98) (= (x58 x190) x193) (= x190 (x99 (_ bv160 256))) (= (x158 (_ bv128 256)) x135) (= (x158 (_ bv128 256)) x124)) (and x34 x61)) x188))
(assert (x141 (_ bv18446744073709551615 256)))
(assert (not x85))
(assert (= (x199 (_ bv18446744073709551487 256)) (_ bv0 256)))
(assert (= (or x18 (and x73 x126)) x43))
(assert (=> (bvuge (_ bv10000 256) x110) (= (_ bv0 256) (x199 x110))))
(assert (= (_ bv0 256) (x199 (_ bv20282409603651670423947251286015 256))))
(assert (= (and x138 x35) x175))
(assert (= (_ bv0 256) (x199 (_ bv1889567281 256))))
(assert (x141 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (=> (and (= (x158 (_ bv128 256)) x69) (= (bvugt x69 (_ bv0 256)) x142)) (and (=> (not x142) x61) (=> (and x142 (and (= (bvadd (_ bv64 256) x102) x14) (= (x132 (_ bv64 256) x23 (_ bv60 256)) x177) (= x91 (bvadd (_ bv64 256) x67)) (= x192 (x158 (_ bv128 256))) (= x161 (bvugt x104 (_ bv0 256))) (= x42 (x158 (_ bv128 256))) (= (x92 x76) x153) (= (bvadd (bvneg x145) x46) x104) (bvuge (_ bv340282366920938463463374607431768211455 256) x145) (= x102 (x99 (_ bv160 256))) (= x67 (x99 (_ bv160 256))) (= x70 (bvadd (_ bv32 256) x204)) (= x145 (x108 x177)) (= x76 (bvadd (_ bv1 256) x177)) (bvule (_ bv1 256) x42) (= (bvand x180 (_ bv1461501637330902918203684832716283019655932542975 256)) x23) (bvuge x192 (_ bv1 256)) (= x176 (x6 x70)) (bvule (_ bv1 256) x47) (= (x99 (_ bv160 256)) x204) (= x200 (x79 x14)) (= (x158 (_ bv128 256)) x47) (= (x79 x91) x180))) (and (=> (and (= x153 x170) (not x161)) x188) (=> (and x161 (and (and (bvuge (_ bv340282366920938463463374607431768211455 256) x179) (= (ite (= x179 (_ bv0 256)) (= (_ bv0 256) x179) (= x176 (_ bv0 256))) x26) (= (x4 x177) x179)) (or (and (not x26) (= (= x145 x46) x7)) (and (= x7 x26) x26)))) x22))))) x140))
(assert (= (x199 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)) (_ bv0 256)))
(assert (= x61 (=> (and (and (= (x157 x173) x181) (= x146 (= (_ bv0 256) x181)) (= x173 (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256))) (= (_ bv0 256) x152) (bvule (_ bv1 256) x198) (= (_ bv1889567281 256) x86) (= (x130 x110) x198) (bvule x181 (_ bv20282409603651670423947251286015 256))) (= (_ bv36 256) x94)) x146)))
(assert (= (=> (= x118 (ite x7 x7 (not (bvugt x78 x145)))) (and (=> (and (and (or (and (= x149 x78) x35) (and (= x149 x46) (not x35))) (= x35 (bvult x78 x46))) (not x118)) x97) (=> (and (= x153 x162) x118) x31))) x22))
(assert (= (x199 (_ bv18446744073709551519 256)) (_ bv0 256)))
(assert (= (x199 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x37) (= (_ bv0 256) (x199 x37))))
(assert (= (_ bv0 256) (x199 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= x194 (and (not x26) x57)))
(assert (bvult (_ bv10000 256) (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256))))
(assert (x141 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))
(assert (= x183 (or x178 x87)))
(assert (= (and x126 (not x73)) x18))
(assert (=> (bvule x23 (_ bv10000 256)) (= (x199 x23) (_ bv0 256))))
(assert (= (or x175 x15) x105))
(assert (= (_ bv60 256) (x209 (x132 (_ bv64 256) x23 (_ bv60 256)))))
(assert (= (=> (and (= x73 (= x162 x153)) (or (not x73) x73)) x41) x31))
(assert (= x82 (and x51 (not x161))))
(assert (= x96 (and (not x72) x53)))
(assert (= (_ bv0 256) (x199 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256))))
(assert (= x51 (and x183 x142)))
(assert (= x178 (and x117 x129)))
(assert (= (or x49 x194) x55))
(assert (= (and x55 x118) x106))
(assert (not (x141 (x132 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= x87 (and (not x117) x129)))
(assert (= x136 (=> (and (= (x158 (_ bv128 256)) x109) (= x112 (bvadd (_ bv32 256) x89)) (bvule (_ bv1 256) x109) (= (not (bvugt x127 (_ bv1 256))) x56) (= x127 (x158 (_ bv128 256))) (= x89 (x99 (_ bv160 256)))) (and x140 x56))))
(assert (= (=> (and (= (x144 x65) x17) (= (bvadd (_ bv32 256) x65) x19) (= x120 (bvadd (_ bv32 256) x44)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x68) (= (bvadd (_ bv96 256) x2) x169) (bvule x2 (_ bv18446744073709551615 256)) (bvule x27 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)) (= x44 (bvadd (_ bv32 256) x2)) (bvuge x27 (_ bv96 256)) (bvule x125 (_ bv340282366920938463463374607431768211455 256)) (bvule x2 (_ bv18446744073709551615 256)) (or (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x2) (bvuge (_ bv18446744073709551519 256) x2)) (bvule x90 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv132 256) x68) (= x60 (not (bvugt x207 (bvadd (_ bv32 256) x19)))) (= x125 (x144 x24)) (= x27 (bvadd (bvneg x24) x68)) (or (bvule x2 (_ bv18446744073709551519 256)) (bvuge x2 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256))) (= x90 (x144 x19)) (= x65 (bvadd x24 (_ bv32 256))) (not (bvugt x2 x169))) (and x60 x64)) x74))
(assert (= (_ bv0 256) (x199 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (or x25 x96) x129))
(assert (x141 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)))
(assert (x141 (_ bv1889567281 256)))
(assert (x141 (_ bv340282366920938463463374607431768211455 256)))
(check-sat)
(exit)
