(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x144 () Bool)
(declare-fun x303 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x302 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x173 () Bool)
(declare-fun x240 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x125 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x273 () Bool)
(declare-fun x230 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x250 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x295 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x185 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x183 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x249 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x262 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x72 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x126 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x293 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x200 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x73 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x171 () Bool)
(declare-fun x276 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x225 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x5 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x111 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x215 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x32 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x136 () Bool)
(declare-fun x48 () Bool)
(declare-fun x35 () Bool)
(declare-fun x68 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x135 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x26 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x38 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x244 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x98 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x226 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x24 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x296 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x141 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x157 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x300 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x263 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x160 ((_ BitVec 256)) Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x69 () Bool)
(declare-fun x2 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x216 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x195 () Bool)
(declare-fun x298 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x95 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x88 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x79 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x29 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x299 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x210 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x152 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x116 () (_ BitVec 256))
(define-fun x156 ((x170 (_ BitVec 256)) (x221 (_ BitVec 256))) Bool (= x170 (bvudiv (bvmul x221 x170) x221)))
(define-fun x291 ((x170 (_ BitVec 256)) (x221 (_ BitVec 256))) Bool (= x170 (bvsdiv (bvmul x170 x221) x221)))
(define-fun x89 ((x170 (_ BitVec 256)) (x221 (_ BitVec 256))) Bool (= x170 (bvsdiv (bvmul x221 x170) x221)))
(define-fun x233 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x13 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x235 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x18 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x9 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x71 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x96 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x103 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x172 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x155 ((x49 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x118 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 x142) x66 (x141 x49)))
(define-fun x4 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 x154) x93 (x118 x49)))
(define-fun x181 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv128 256)) (_ bv1 256) (x233 x49)))
(define-fun x23 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv192 256)) (_ bv0 256) (x235 x49)))
(define-fun x288 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv224 256)) (_ bv0 256) (x9 x49)))
(define-fun x53 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x49) (_ bv0 256) (x96 x49)))
(define-fun x84 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv160 256)) (_ bv192 256) (x172 x49)))
(define-fun x54 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x49) x154 (x23 x49)))
(define-fun x196 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv320 256)) x257 (x288 x49)))
(define-fun x76 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv352 256)) x201 (x53 x49)))
(define-fun x40 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x49) (_ bv288 256) (x84 x49)))
(define-fun x60 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x270 x49) x26 (x4 x49)))
(define-fun x168 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 x154) x242 (x60 x49)))
(define-fun x267 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x37 x49) x94 (x168 x49)))
(define-fun x206 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x49) (_ bv1 256) (x13 x49)))
(define-fun x199 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv192 256)) (_ bv0 256) (x18 x49)))
(define-fun x271 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv224 256)) (_ bv0 256) (x71 x49)))
(define-fun x294 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv256 256)) (_ bv0 256) (x103 x49)))
(define-fun x204 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x49) (_ bv192 256) (x155 x49)))
(define-fun x165 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= x49 (_ bv288 256)) x154 (x199 x49)))
(define-fun x47 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x49) x70 (x271 x49)))
(define-fun x205 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x49) x201 (x294 x49)))
(define-fun x140 ((x49 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x49) (_ bv288 256) (x204 x49)))
(assert (= (_ bv64 256) (x38 (x250 (_ bv64 256) x239 (_ bv0 256)))))
(assert (= (x298 (x250 (_ bv64 256) x74 (_ bv61 256))) x74))
(assert (= (_ bv64 256) (x38 (x250 (_ bv64 256) x74 x192))))
(assert (= (and x44 x144) x35))
(assert (= (_ bv0 256) (x126 (x250 (_ bv64 256) x239 (_ bv0 256)))))
(assert (not (x160 (x250 (_ bv64 256) x239 (_ bv61 256)))))
(assert (= (x298 (x250 (_ bv64 256) x62 (_ bv60 256))) x62))
(assert (= (_ bv64 256) (x38 (x250 (_ bv64 256) x255 (_ bv60 256)))))
(assert (= (x157 (_ bv2873126886 256)) (_ bv0 256)))
(assert (x160 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (x157 (x250 (_ bv64 256) x188 (_ bv0 256))) (x250 (_ bv64 256) x188 (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x62) (= (_ bv0 256) (x157 x62))))
(assert (= x73 (and x282 x91)))
(assert (= (_ bv0 256) (x157 (_ bv2378104546 256))))
(assert (= (_ bv0 256) (x157 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (=> (= (ite x146 x146 (not (bvugt x231 x28))) x195) (and (=> (and x195 (= x137 x106)) x171) (=> (and (not x195) (and (= x44 (bvugt x36 x231)) (or (and (= x246 x231) x44) (and (not x44) (= x36 x246))))) x15))) x104))
(assert (x160 (_ bv1000000000000000000 256)))
(assert (= (x157 (x250 (_ bv64 256) x255 (_ bv60 256))) (x250 (_ bv64 256) x255 (_ bv60 256))))
(assert (= (and x282 (not x91)) x203))
(assert (= (_ bv64 256) (x38 (x250 (_ bv64 256) x239 x85))))
(assert (= (=> (and (= x207 (bvadd x180 x148)) (not (bvugt x180 (bvadd x148 x180))) (= x33 (x250 (_ bv64 256) x74 (_ bv61 256))) (= x180 (x244 x33)) (= x174 (bvuge x274 x176)) (= x274 x207)) x174) x187))
(assert (= (and x144 (not x44)) x212))
(assert (= x278 (and x11 x73)))
(assert (= (x126 (x250 (_ bv64 256) x74 x192)) x192))
(assert (= (x157 x113) (x157 (bvadd x113 (_ bv1 256)))))
(assert (= x74 (x298 (x250 (_ bv64 256) x74 (_ bv0 256)))))
(assert (= (_ bv0 256) (x157 (_ bv1000000000000000000 256))))
(assert (= (or x63 x139) x120))
(assert (= x171 (=> (and (= x164 (x250 (_ bv64 256) x74 x192)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x133) (= (bvadd x279 (_ bv32 256)) x143) (= x56 (x206 (_ bv128 256))) (= (not (bvugt x56 (_ bv1 256))) x241) (= x192 (bvadd (_ bv1 256) x179)) (= (x183 x164) x112) (= x279 (x140 (_ bv160 256))) (not (bvult x106 x301)) (= (bvudiv x133 (_ bv1000000000000000000 256)) x300) (= x133 (bvmul x301 x83)) (x156 x83 x301) (bvuge x133 (_ bv0 256)) (= (bvadd x106 (bvneg x112)) x301) (= x83 (x47 x143))) (and x241 (=> (= x300 x148) x187)))))
(assert (= (and (not x11) x73) x293))
(assert (= x81 (x298 (x250 (_ bv64 256) x81 (_ bv69 256)))))
(assert (=> (bvule x270 (_ bv10000 256)) (= (x157 x270) (_ bv0 256))))
(assert (= (_ bv0 256) (x157 (_ bv4294967295 256))))
(assert (= (=> (and (or x153 x72) (= x166 (bvadd x246 (bvneg x28))) (= x182 (bvmul x166 x219)) (= x230 (bvudiv x129 x109)) (= (= x253 (_ bv0 256)) x72) (= x129 (bvmul (_ bv1000000000000000000 256) x253)) (x156 x219 x166) (bvuge x109 (_ bv1 256)) (bvule x182 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (not (bvult x246 x166)) (bvuge x182 (_ bv0 256)) (= x268 x106) (= (= x39 (_ bv1000000000000000000 256)) x153) (= x268 (bvadd x230 x137)) (not (bvugt x230 (bvadd x137 x230))) (= (bvudiv x129 x253) x39) (= x253 x182)) x171) x15))
(assert (= x85 (x126 (x250 (_ bv64 256) x239 x85))))
(assert (= (x250 (_ bv64 256) x74 (_ bv0 256)) (x157 (x250 (_ bv64 256) x74 (_ bv0 256)))))
(assert (= x152 (and x125 (not x136))))
(assert (=> (bvule x239 (_ bv10000 256)) (= (x157 x239) (_ bv0 256))))
(assert (=> (bvule x188 (_ bv10000 256)) (= (x157 x188) (_ bv0 256))))
(assert (= (x157 (x250 (_ bv64 256) x190 (_ bv2 256))) (x250 (_ bv64 256) x190 (_ bv2 256))))
(assert (bvult (_ bv10000 256) (x250 (_ bv64 256) x62 (_ bv60 256))))
(assert (x160 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x239 (x298 (x250 (_ bv64 256) x239 x85))))
(assert (= (_ bv2 256) (x126 (x250 (_ bv64 256) x190 (_ bv2 256)))))
(assert (x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x149 (or x79 x262)))
(assert (= (_ bv0 256) (x157 (_ bv404098525 256))))
(assert (not (x160 (x250 (_ bv64 256) x74 (_ bv0 256)))))
(assert (= (and x136 x125) x68))
(assert (x160 (_ bv1289409798 256)))
(assert (= x243 (=> (= (ite x302 x302 (not (bvult x87 x231))) x102) (and (=> (and x102 (= x186 x50)) x249) (=> (and (not x102) (and (= (bvugt x245 x231) x290) (or (and (= x43 x231) x290) (and (not x290) (= x43 x245))))) x16)))))
(assert (bvugt (x250 (_ bv64 256) x239 (_ bv61 256)) (_ bv10000 256)))
(assert (= (x38 (x250 (_ bv64 256) x74 (_ bv61 256))) (_ bv64 256)))
(assert (= (x157 (x250 (_ bv64 256) x62 (_ bv60 256))) (x250 (_ bv64 256) x62 (_ bv60 256))))
(assert (= x2 (or x5 x232)))
(assert (= x69 (=> (and (and (= x239 x256) (and (= x245 x46) (and (= x202 x93) (= x42 (x250 (_ bv64 256) x239 (_ bv0 256))) (= (x141 x142) x66) (= x142 x52) (= (x215 x42) x257) (= x150 x239) (bvule x257 (_ bv20282409603651670423947251286015 256)) (= (x181 (_ bv128 256)) x59) (= (x95 x154) x61) (= x91 (bvugt x59 (_ bv0 256))) (bvule (_ bv1 256) x61) (= x66 x198) (= x202 (x118 x154)) (= (_ bv128 256) x107) (= (_ bv2378104546 256) x167)))) (and (bvule x189 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x122 (bvule (_ bv0 256) x46) (not (= x154 x108)) (bvuge (_ bv4294967295 256) x194) (bvule x52 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x248 x108)) (bvule (_ bv0 256) x189) (bvuge x292 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x154) (bvuge x108 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x261) (bvuge x52 (_ bv0 256)) (= x116 (_ bv0 256)) (bvule (_ bv0 256) x45) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x46) (bvule x248 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x266 (_ bv0 256)) (= (bvugt (x95 x108) (_ bv0 256)) x122) (= (_ bv36 256) x237) (not (= x248 x154)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x57) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x10) (bvule (_ bv0 256) x261) x123 (bvule x209 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x145 (bvult (_ bv0 256) (x95 x248))) (= (bvult (_ bv0 256) (x95 x154)) x123) (bvuge x194 (_ bv0 256)) (= x292 x256) x145 (bvule x286 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x10 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x108) (bvuge x57 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x266) (bvule (_ bv0 256) x286) (bvuge x209 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x292) (bvuge x154 (_ bv1 256)) (bvule x45 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x248 (_ bv1 256)))) (and (=> (and (and (and (= x276 (bvadd (_ bv64 256) x86)) (= x113 (x250 (_ bv64 256) x255 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x80) (= x299 (x76 x276)) (= x255 (bvand x200 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x80 (_ bv0 256)) (= x80 (_ bv0 256)) (= x299 (_ bv0 256))) x11) (= x67 (bvadd (_ bv1 256) x113)) (= x87 (x135 x113)) (bvuge (_ bv340282366920938463463374607431768211455 256) x87) (= x86 (x40 (_ bv160 256))) (= x50 (x240 x67)) (= x80 (x263 x113)) (= (x54 x130) x200) (= (x40 (_ bv160 256)) x130)) (or (and x11 (= x11 x302)) (and (not x11) (= x302 (= x245 x87))))) x91) x243) (=> (and (= x19 (_ bv0 256)) (not x91)) x99)))))
(assert (= (and x102 x173) x88))
(assert (=> (bvuge (_ bv10000 256) x248) (= (x157 x248) (_ bv0 256))))
(assert (= (x157 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (or x35 x212) x63))
(assert (= (or x20 x203) x125))
(assert (not x69))
(assert (= (x126 (x250 (_ bv64 256) x81 (_ bv69 256))) (_ bv69 256)))
(assert (= (x298 (x250 (_ bv64 256) x255 (_ bv60 256))) x255))
(assert (x160 (_ bv1889567281 256)))
(assert (not (x160 (x250 (_ bv64 256) x188 (_ bv0 256)))))
(assert (= (x126 (x250 (_ bv64 256) x62 (_ bv60 256))) (_ bv60 256)))
(assert (= (_ bv60 256) (x126 (x250 (_ bv64 256) x255 (_ bv60 256)))))
(assert (x160 (_ bv20282409603651670423947251286015 256)))
(assert (bvult (_ bv10000 256) (x250 (_ bv64 256) x81 (_ bv69 256))))
(assert (x160 (_ bv2873126886 256)))
(assert (not (x160 (x250 (_ bv64 256) x62 (_ bv60 256)))))
(assert (= (x157 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x38 (x250 (_ bv64 256) x74 (_ bv0 256)))))
(assert (= (x126 (x250 (_ bv64 256) x239 (_ bv61 256))) (_ bv61 256)))
(assert (= (x298 (x250 (_ bv64 256) x239 (_ bv0 256))) x239))
(assert (x160 (_ bv4294967295 256)))
(assert (bvugt (x250 (_ bv64 256) x74 (_ bv0 256)) (_ bv10000 256)))
(assert (= x16 (=> (and (= x31 (= (_ bv0 256) x111)) (= (bvadd (bvneg x87) x43) x210) (= (bvudiv x223 x111) x277) (x156 x80 x210) (= (bvmul (_ bv1000000000000000000 256) x111) x223) (bvule x92 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (not (bvugt x210 x43)) (= (bvmul x210 x80) x92) (= (= (_ bv1000000000000000000 256) x277) x295) (= x186 x121) (bvuge x299 (_ bv1 256)) (= x121 (bvadd x264 x50)) (or x31 x295) (= x111 x92) (bvuge x92 (_ bv0 256)) (= (bvudiv x223 x299) x264) (not (bvugt x264 (bvadd x50 x264)))) x249)))
(assert (= x79 (and x68 x97)))
(assert (not (x160 (x250 (_ bv64 256) x239 x85))))
(assert (= (x157 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (=> (bvule x81 (_ bv10000 256)) (= (x157 x81) (_ bv0 256))))
(assert (= (=> (and (= x283 (x183 x82)) (x156 x305 x124) (= (bvudiv x252 (_ bv1000000000000000000 256)) x234) (= (x250 (_ bv64 256) x239 x85) x82) (= (not (bvugt x100 (_ bv1 256))) x98) (= x252 (bvmul x124 x305)) (= x100 (x181 (_ bv128 256))) (bvule x252 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x305 (x196 x134)) (= x134 (bvadd x259 (_ bv32 256))) (= (x40 (_ bv160 256)) x259) (= (bvadd (_ bv1 256) x67) x85) (bvuge x252 (_ bv0 256)) (= x124 (bvadd x186 (bvneg x283))) (not (bvult x186 x124))) (and x98 (=> (= x19 x234) x99))) x249))
(assert (= (x157 (bvadd x179 (_ bv1 256))) (x157 x179)))
(assert (= x297 (and (not x102) x173)))
(assert (x160 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not (x160 (x250 (_ bv64 256) x74 x192))))
(assert (not (x160 (x250 (_ bv64 256) x255 (_ bv60 256)))))
(assert (bvult (_ bv10000 256) (x250 (_ bv64 256) x74 (_ bv61 256))))
(assert (x160 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (x160 (_ bv340282366920938463463374607431768211455 256)))
(assert (bvugt (x250 (_ bv64 256) x239 x85) (_ bv10000 256)))
(assert (= (x157 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (not (x160 (x250 (_ bv64 256) x74 (_ bv61 256)))))
(assert (= (x126 (x250 (_ bv64 256) x74 (_ bv61 256))) (_ bv61 256)))
(assert (= x188 (x298 (x250 (_ bv64 256) x188 (_ bv0 256)))))
(assert (= (or x88 x2) x20))
(assert (= (x157 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (x157 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x37) (= (x157 x37) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x74) (= (_ bv0 256) (x157 x74))))
(assert (=> (bvuge (_ bv10000 256) x154) (= (x157 x154) (_ bv0 256))))
(assert (= (x250 (_ bv64 256) x81 (_ bv69 256)) (x157 (x250 (_ bv64 256) x81 (_ bv69 256)))))
(assert (bvult (_ bv10000 256) (x250 (_ bv64 256) x255 (_ bv60 256))))
(assert (bvugt (x250 (_ bv64 256) x188 (_ bv0 256)) (_ bv10000 256)))
(assert (x160 (_ bv2378104546 256)))
(assert (= (x126 (x250 (_ bv64 256) x74 (_ bv0 256))) (_ bv0 256)))
(assert (= (x250 (_ bv64 256) x74 x192) (x157 (x250 (_ bv64 256) x74 x192))))
(assert (=> (bvule x108 (_ bv10000 256)) (= (x157 x108) (_ bv0 256))))
(assert (= (x157 x34) (x157 (bvadd (_ bv1 256) x34))))
(assert (= (x38 (x250 (_ bv64 256) x81 (_ bv69 256))) (_ bv64 256)))
(assert (= (x250 (_ bv64 256) x239 x85) (x157 (x250 (_ bv64 256) x239 x85))))
(assert (= x144 (and x149 (not x195))))
(assert (=> (bvuge (_ bv10000 256) x142) (= (x157 x142) (_ bv0 256))))
(assert (= (_ bv0 256) (x157 (_ bv1289409798 256))))
(assert (= x5 (and x290 x297)))
(assert (= (x38 (x250 (_ bv64 256) x62 (_ bv60 256))) (_ bv64 256)))
(assert (= (and x297 (not x290)) x232))
(assert (=> (bvuge (_ bv10000 256) x190) (= (x157 x190) (_ bv0 256))))
(assert (= (x250 (_ bv64 256) x239 (_ bv0 256)) (x157 (x250 (_ bv64 256) x239 (_ bv0 256)))))
(assert (= (x157 x67) (x157 (bvadd (_ bv1 256) x67))))
(assert (= (=> (and (and (and (= x159 x188) (= (_ bv4 256) x236) (= (_ bv36 256) x197) (= (x95 x154) x287) (bvuge x287 (_ bv1 256)) (= (_ bv404098525 256) x193) (bvuge (_ bv20282409603651670423947251286015 256) x227) (= (x250 (_ bv64 256) x188 (_ bv0 256)) x222) (bvule (_ bv1 256) x101) (= x158 (bvuge x201 x227)) x158 (= x75 (_ bv1889567281 256)) (= x227 (x215 x222)) (= x101 (x95 x154)) (= x8 x188)) (and (and (and (bvule (_ bv1 256) x226) (= x280 (x250 (_ bv64 256) x190 (_ bv2 256))) x32 (= x154 x190) (= (x185 x280) x90) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x21) (= (bvule x3 x90) x32) (= (_ bv1889567281 256) x211) (= x110 x55) (bvuge x21 (_ bv68 256)) (bvule x110 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x251 x81) (= x190 x14) (= x81 (x29 (_ bv4 256))) (= (x29 (_ bv36 256)) x110) (= (x95 x108) x226)) (and (= x281 x52) (and (and (bvule (_ bv1 256) x220) (= (x95 x154) x220) (= x292 x272) (= (x60 x154) x228) (= x55 x138) (= (_ bv2873126886 256) x7) (= x242 x228) (= x178 x251) (= (x4 x270) x26) (= (_ bv36 256) x64) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x289) (= x127 (x250 (_ bv64 256) x81 (_ bv69 256))) (= x229 x26) (= x289 (x296 x127)) (= x281 x289) (= x270 x52)) (and (and (and (= x258 (x250 (_ bv64 256) x74 (_ bv0 256))) (= x94 x58) (bvule (_ bv1 256) x41) (= (x95 x154) x41) (= x115 (_ bv2378104546 256)) (= x12 x74) (= x162 (x267 x154)) (= x70 (x215 x258)) (= x52 x37) (= x136 (bvult (_ bv0 256) x51)) (= x94 (x168 x37)) (= x191 (_ bv128 256)) (= x162 x119) (= (x206 (_ bv128 256)) x51) (bvuge (_ bv20282409603651670423947251286015 256) x70)) (= x46 x36)) (= x272 x74))))) (and (= x161 (_ bv1289409798 256)) (= x216 x201) (bvule x285 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x216 x169) (= x1 (x95 x154)) (= (_ bv36 256) x151) (bvuge x285 (_ bv1 256)) (= x132 x216) (= (bvudiv x147 (_ bv1000000000000000000 256)) x169) (bvuge x1 (_ bv1 256)) (= (bvmul x216 (_ bv1000000000000000000 256)) x147) (= (bvudiv x147 x285) x3)))) (and (= x214 (_ bv4 256)) (= (_ bv404098525 256) x224) (= (_ bv36 256) x30) (= x292 x159) (= (x95 x154) x208) (= x175 x176) (= x303 (x244 x114)) (= x175 (bvadd x303 x19)) (= x114 (x250 (_ bv64 256) x239 (_ bv61 256))) (not (bvugt x303 (bvadd x19 x303))) (bvule (_ bv1 256) x208) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x201))) (and (=> (and x136 (and (and (= x97 (ite (= x219 (_ bv0 256)) (= (_ bv0 256) x219) (= x109 (_ bv0 256)))) (= x254 (x140 (_ bv160 256))) (= x137 (x240 x179)) (= (x165 x254) x117) (= (bvadd (_ bv64 256) x225) x304) (= (x263 x34) x219) (bvule x219 (_ bv340282366920938463463374607431768211455 256)) (= x34 (x250 (_ bv64 256) x62 (_ bv60 256))) (bvule x28 (_ bv340282366920938463463374607431768211455 256)) (= x109 (x205 x304)) (= x62 (bvand x117 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x28 (x135 x34)) (= (x140 (_ bv160 256)) x225) (= (bvadd (_ bv1 256) x34) x179)) (or (and (= x146 (= x28 x36)) (not x97)) (and x97 (= x97 x146))))) x104) (=> (and (not x136) (= x148 (_ bv0 256))) x187))) x99))
(assert (= (and x68 (not x97)) x262))
(assert (not (x160 (x250 (_ bv64 256) x81 (_ bv69 256)))))
(assert (= (x250 (_ bv64 256) x239 (_ bv61 256)) (x157 (x250 (_ bv64 256) x239 (_ bv61 256)))))
(assert (bvugt (x250 (_ bv64 256) x239 (_ bv0 256)) (_ bv10000 256)))
(assert (= (_ bv64 256) (x38 (x250 (_ bv64 256) x190 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x250 (_ bv64 256) x74 x192)))
(assert (= true x282))
(assert (= (and x195 x149) x139))
(assert (= (x126 (x250 (_ bv64 256) x188 (_ bv0 256))) (_ bv0 256)))
(assert (x160 (_ bv404098525 256)))
(assert (= (or x293 x278) x173))
(assert (= (_ bv0 256) (x157 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (bvult (_ bv10000 256) (x250 (_ bv64 256) x190 (_ bv2 256))))
(assert (not (x160 (x250 (_ bv64 256) x190 (_ bv2 256)))))
(assert (= x74 (x298 (x250 (_ bv64 256) x74 x192))))
(assert (=> (bvuge (_ bv10000 256) x255) (= (x157 x255) (_ bv0 256))))
(assert (= (x250 (_ bv64 256) x74 (_ bv61 256)) (x157 (x250 (_ bv64 256) x74 (_ bv61 256)))))
(assert (= (x298 (x250 (_ bv64 256) x190 (_ bv2 256))) x190))
(assert (= x284 (or x120 x152)))
(assert (= (_ bv64 256) (x38 (x250 (_ bv64 256) x239 (_ bv61 256)))))
(assert (= x239 (x298 (x250 (_ bv64 256) x239 (_ bv61 256)))))
(assert (not (x160 (x250 (_ bv64 256) x239 (_ bv0 256)))))
(assert (= (x38 (x250 (_ bv64 256) x188 (_ bv0 256))) (_ bv64 256)))
(check-sat)
(exit)
