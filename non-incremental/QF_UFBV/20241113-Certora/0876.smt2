(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x280 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x101 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x301 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x162 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x294 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x186 () Bool)
(declare-fun x274 () Bool)
(declare-fun x303 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x323 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x221 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x253 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x27 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x49 () Bool)
(declare-fun x247 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x38 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x125 () Bool)
(declare-fun x176 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x234 () Bool)
(declare-fun x233 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x197 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x6 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x324 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x322 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x124 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x149 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x213 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x261 () Bool)
(declare-fun x212 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x290 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x181 () Bool)
(declare-fun x66 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x255 () Bool)
(declare-fun x246 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x190 () Bool)
(declare-fun x102 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x96 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x205 ((_ BitVec 256)) Bool)
(declare-fun x203 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x148 () Bool)
(declare-fun x293 () Bool)
(declare-fun x263 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x242 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x309 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x87 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x161 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x172 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x206 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x308 () Bool)
(declare-fun x160 () Bool)
(declare-fun x316 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x304 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x258 () Bool)
(declare-fun x276 () Bool)
(declare-fun x307 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x302 () Bool)
(declare-fun x244 () Bool)
(declare-fun x230 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x73 () Bool)
(declare-fun x183 () Bool)
(declare-fun x168 () Bool)
(declare-fun x13 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x94 () Bool)
(declare-fun x317 () (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x260 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x121 () Bool)
(declare-fun x171 () Bool)
(declare-fun x211 () Bool)
(declare-fun x138 () Bool)
(declare-fun x70 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x300 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x130 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x98 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x310 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x313 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x311 () Bool)
(declare-fun x83 () Bool)
(declare-fun x5 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x326 () (_ BitVec 256))
(declare-fun x296 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x72 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x321 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(define-fun x45 ((x185 (_ BitVec 256)) (x43 (_ BitVec 256))) Bool (= x185 (bvudiv (bvmul x43 x185) x43)))
(define-fun x85 ((x185 (_ BitVec 256)) (x43 (_ BitVec 256))) Bool (= x185 (bvsdiv (bvmul x185 x43) x43)))
(define-fun x56 ((x185 (_ BitVec 256)) (x43 (_ BitVec 256))) Bool (= x185 (bvsdiv (bvmul x43 x185) x43)))
(define-fun x67 ((x250 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x74 ((x250 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x33 ((x250 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x65 ((x250 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x47 ((x250 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x214 ((x250 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x278 ((x250 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x52 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 x151) x2 (x303 x250)))
(define-fun x279 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 x325) x169 (x52 x250)))
(define-fun x88 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 (_ bv128 256)) x313 (x47 x250)))
(define-fun x164 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite x183 (ite x299 (x47 x250) (x88 x250)) (x47 x250)))
(define-fun x180 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 (_ bv128 256)) x237 (x164 x250)))
(define-fun x195 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite x294 (x164 x250) (x180 x250)))
(define-fun x16 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x250) x22 (x195 x250)))
(define-fun x34 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x250) x147 (x16 x250)))
(define-fun x264 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite x122 (x195 x250) (x34 x250)))
(define-fun x312 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x250) x17 (x67 x250)))
(define-fun x282 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x250) x91 (x312 x250)))
(define-fun x93 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x250) x89 (x282 x250)))
(define-fun x15 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 (_ bv128 256)) (_ bv100 256) (x74 x250)))
(define-fun x62 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x250) x104 (x93 x250)))
(define-fun x249 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 (_ bv324 256)) x321 (x264 x250)))
(define-fun x286 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv356 256) x250) x315 (x249 x250)))
(define-fun x71 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 (_ bv388 256)) x31 (x286 x250)))
(define-fun x262 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 (_ bv324 256)) (_ bv32 256) (x214 x250)))
(define-fun x226 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x250) (_ bv1 256) (x233 x250)))
(define-fun x136 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x250 (_ bv356 256)) (bvult x250 (_ bv388 256))) (x226 (bvadd (bvneg (_ bv356 256)) x250)) (x278 x250)))
(define-fun x126 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 (_ bv420 256)) x198 (x71 x250)))
(define-fun x41 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite x19 (x71 x250) (ite x138 (x286 x250) (ite x182 (x249 x250) (ite x120 (x264 x250) (x126 x250))))))
(define-fun x266 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x250 x158) (_ bv0 256) (x41 x250)))
(define-fun x117 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x325 x250) x77 (x279 x250)))
(define-fun x100 ((x250 (_ BitVec 256))) (_ BitVec 256) (ite (= x305 x250) x256 (x27 x250)))
(assert (bvugt (x172 (_ bv64 256) x325 x132) (_ bv10000 256)))
(assert (= x325 (x6 (x172 (_ bv64 256) x325 (_ bv60 256)))))
(assert (= (and x30 x63) x231))
(assert (not (x205 (x172 (_ bv64 256) x22 x239))))
(assert (= (x172 (_ bv64 256) x17 (_ bv2 256)) (x96 (x172 (_ bv64 256) x17 (_ bv2 256)))))
(assert (= (and x141 x298) x304))
(assert (= x241 (=> (and (= (bvudiv x28 x248) x137) (bvuge x248 (_ bv1 256)) (bvule (_ bv0 256) x68) (= x68 (bvmul x10 x53)) (= x95 (bvudiv x28 x192)) (= x101 (= x95 (_ bv1000000000000000000 256))) (not (bvugt x137 (bvadd x277 x137))) (or x101 x309) (= x68 x192) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x68) (x45 x53 x10) (= (bvmul (_ bv1000000000000000000 256) x192) x28) (= x57 (bvadd x137 x277)) (not (bvult x271 x10)) (= x10 (bvadd x271 (bvneg x76))) (= x57 x313) (= (= x192 (_ bv0 256)) x309)) x178)))
(assert (= (_ bv62 256) (x72 (x172 (_ bv64 256) x292 (_ bv62 256)))))
(assert (= (and (not x140) x231) x261))
(assert (= (x38 (x172 (_ bv64 256) x17 (_ bv2 256))) (_ bv64 256)))
(assert (= (_ bv62 256) (x72 (x172 (_ bv64 256) x188 (_ bv62 256)))))
(assert (= (and x244 (not x102)) x232))
(assert (= (_ bv60 256) (x72 (x172 (_ bv64 256) x325 (_ bv60 256)))))
(assert (= (x38 (x172 (_ bv64 256) x9 (_ bv62 256))) (_ bv64 256)))
(assert (= (=> (= (ite x181 x181 (not (bvugt x144 x76))) x141) (and (=> (and x141 (= x277 x313)) x178) (=> (and (and (= x176 (bvugt x260 x144)) (or (and (= x144 x271) x176) (and (not x176) (= x271 x260)))) (not x141)) x241))) x156))
(assert (= x188 (x6 (x172 (_ bv64 256) x188 (_ bv62 256)))))
(assert (= (and (not x121) x130) x119))
(assert (not (x205 (x172 (_ bv64 256) x9 (_ bv62 256)))))
(assert (= (_ bv62 256) (x72 (x172 (_ bv64 256) x9 (_ bv62 256)))))
(assert (= (x38 (x172 (_ bv64 256) x91 (_ bv2 256))) (_ bv64 256)))
(assert (= (x96 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= x294 (and x288 x69)))
(assert (=> (bvule x9 (_ bv10000 256)) (= (_ bv0 256) (x96 x9))))
(assert (= (_ bv2 256) (x72 (x172 (_ bv64 256) x91 (_ bv2 256)))))
(assert (= (_ bv61 256) (x72 (x172 (_ bv64 256) x22 (_ bv61 256)))))
(assert (= (and x42 x73) x128))
(assert (= (=> (= x313 x237) x246) x170))
(assert (not (x205 (x172 (_ bv64 256) x22 (_ bv61 256)))))
(assert (not (x205 (x172 (_ bv64 256) x188 (_ bv62 256)))))
(assert (=> (bvule x22 (_ bv10000 256)) (= (_ bv0 256) (x96 x22))))
(assert (= (x96 (_ bv1145441982 256)) (_ bv0 256)))
(assert (x205 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (=> (and (or (not x83) x83) (and (not (bvugt x173 (bvadd x173 x147))) (= x7 (bvadd x173 x147)) (= x83 (= (_ bv0 256) x147)) (= (x172 (_ bv64 256) x22 (_ bv61 256)) x229) (= x173 (x98 x229)))) x49) x13))
(assert (= x122 (and x94 x83)))
(assert (x205 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (_ bv64 256) (x38 (x172 (_ bv64 256) x292 (_ bv62 256)))))
(assert (= (and x121 x130) x157))
(assert (= (_ bv64 256) (x38 (x172 (_ bv64 256) x22 (_ bv61 256)))))
(assert (= x130 (and x69 (not x288))))
(assert (= x42 (and x82 x186)))
(assert (= (_ bv3 256) (x72 (x172 (_ bv64 256) x17 (_ bv3 256)))))
(assert (= x22 (x6 (x172 (_ bv64 256) x22 x239))))
(assert (not (x205 (x172 (_ bv64 256) x325 (_ bv60 256)))))
(assert (= (_ bv0 256) (x96 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (x72 (x172 (_ bv64 256) x22 (_ bv0 256))) (_ bv0 256)))
(assert (= x311 (and x94 (not x83))))
(assert (= (x96 (bvadd x92 (_ bv1 256))) (x96 x92)))
(assert (bvugt (x172 (_ bv64 256) x17 (_ bv2 256)) (_ bv10000 256)))
(assert (x205 (_ bv340282366920938463463374607431768211455 256)))
(assert (bvult (_ bv10000 256) (x172 (_ bv64 256) x188 (_ bv62 256))))
(assert (bvult (_ bv10000 256) (x172 (_ bv64 256) x142 (_ bv62 256))))
(assert (not (x205 (x172 (_ bv64 256) x17 (_ bv2 256)))))
(assert (= (=> (= x147 x1) x13) x115))
(assert (bvult (_ bv10000 256) (x172 (_ bv64 256) x325 (_ bv60 256))))
(assert (= x212 (or (and (not x5) x221) x103)))
(assert (x205 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv0 256) (x96 (_ bv2593764592 256))))
(assert (not (x205 (x172 (_ bv64 256) x325 x132))))
(assert (= (x96 (x172 (_ bv64 256) x22 (_ bv0 256))) (x172 (_ bv64 256) x22 (_ bv0 256))))
(assert (= (x96 (bvadd x92 (_ bv2 256))) (x96 x92)))
(assert (= x293 (=> (and (and (= (bvult (_ bv0 256) x143) x5) (= (x262 (_ bv324 256)) x143) (= x79 (_ bv324 256)) (= x116 (_ bv324 256)) (= x29 (_ bv324 256))) (or (and x5 (and (= (x136 (_ bv356 256)) x150) (= (_ bv1 256) x150) (= (x262 (_ bv324 256)) x64) (bvule x64 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge x64 (_ bv32 256)))) (not x5))) x66)))
(assert (= x138 (and (not x186) x82)))
(assert (= (x96 (_ bv1099511627775 256)) (_ bv0 256)))
(assert (= (x38 (x172 (_ bv64 256) x22 x239)) (_ bv64 256)))
(assert (= (x96 (_ bv2432040568 256)) (_ bv0 256)))
(assert (not x87))
(assert (= (x6 (x172 (_ bv64 256) x91 (_ bv2 256))) x91))
(assert (= (x72 (x172 (_ bv64 256) x17 (_ bv2 256))) (_ bv2 256)))
(assert (= (and x270 x255) x215))
(assert (x205 (_ bv1099511627775 256)))
(assert (not (x205 (x172 (_ bv64 256) x22 (_ bv0 256)))))
(assert (= x17 (x6 (x172 (_ bv64 256) x17 (_ bv2 256)))))
(assert (= (x6 (x172 (_ bv64 256) x9 (_ bv62 256))) x9))
(assert (= (x96 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x96 (_ bv20282409603651670423947251286015 256))))
(assert (= (and (not x176) x210) x146))
(assert (=> (bvuge (_ bv10000 256) x91) (= (x96 x91) (_ bv0 256))))
(assert (= x66 (=> (and (and (and (= (x280 x252) x80) (= (x172 (_ bv64 256) x142 (_ bv62 256)) x252) (bvule (_ bv1 256) x59) (= (_ bv1145441982 256) x145) (= x300 (or x3 (not x218))) (bvule x80 (_ bv1099511627775 256)) (= x263 x142) (= x3 (bvult (_ bv0 256) x80)) (= (x149 x325) x59) (= x142 x20)) (and (= (x149 x325) x127) (= (x172 (_ bv64 256) x292 (_ bv62 256)) x290) (= x292 x208) (= (bvugt x153 (_ bv0 256)) x218) (bvuge x127 (_ bv1 256)) (bvule x153 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x292 x44) (= x209 (_ bv2432040568 256)) (= x20 x225) (= x222 (_ bv36 256)) (= (x247 x290) x153))) (and (= x225 x44) (= x289 (_ bv36 256)))) x300)))
(assert (= x120 (and (not x270) x255)))
(assert (= x211 (or x179 x146)))
(assert (= (=> (and (= x102 (= x313 x277)) (or (not x102) x102)) x170) x178))
(assert (x205 (_ bv1000000000000000000 256)))
(assert (= (x6 (x172 (_ bv64 256) x17 (_ bv3 256))) x17))
(assert (= (_ bv0 256) (x96 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x96 (x172 (_ bv64 256) x22 (_ bv61 256))) (x172 (_ bv64 256) x22 (_ bv61 256))))
(assert (= (and x140 x231) x60))
(assert (= (x172 (_ bv64 256) x325 x132) (x96 (x172 (_ bv64 256) x325 x132))))
(assert (=> (bvuge (_ bv10000 256) x151) (= (x96 x151) (_ bv0 256))))
(assert (= (_ bv0 256) (x96 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (=> (bvuge (_ bv10000 256) x17) (= (_ bv0 256) (x96 x17))))
(assert (= (x172 (_ bv64 256) x9 (_ bv62 256)) (x96 (x172 (_ bv64 256) x9 (_ bv62 256)))))
(assert (= (and x210 x176) x179))
(assert (not (x205 (x172 (_ bv64 256) x91 (_ bv2 256)))))
(assert (= x19 (and x42 (not x73))))
(assert (= (x96 (_ bv599290589 256)) (_ bv0 256)))
(assert (= (or x304 x211) x244))
(assert (= (=> (and (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x166) (bvule x54 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x51 (_ bv0 256)) (not (= x240 x325)) (bvuge x166 (_ bv0 256)) (bvuge x194 (_ bv0 256)) (bvule (_ bv0 256) x105) (bvule x225 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x105) (bvule x259 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv4294967295 256) x317) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x106) (bvule x99 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x112 (_ bv36 256)) (bvuge x113 (_ bv0 256)) (bvule (_ bv0 256) x118) (bvule x228 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x54 (_ bv0 256)) (bvule x217 (_ bv4294967295 256)) (bvuge x325 (_ bv1 256)) x296 (bvule x325 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x225 x107) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x240) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x235) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x194) (bvuge x40 (_ bv0 256)) (= (bvugt (x149 x325) (_ bv0 256)) x18) (bvule x118 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x235) x18 (bvuge x225 (_ bv0 256)) (bvule (_ bv0 256) x86) (bvule (_ bv0 256) x306) (bvule x306 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x240 (_ bv1 256)) (bvuge x106 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x165) (= (bvult (_ bv0 256) (x149 x240)) x191) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x251) x191 (bvule x113 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x51) (bvuge x200 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x86) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x40) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x129) (bvuge x259 (_ bv0 256)) (bvule x200 (_ bv4294967295 256)) (bvule (_ bv0 256) x165) (bvule (_ bv0 256) x251) (bvule (_ bv0 256) x129) (= x296 (= x317 x217)) (bvuge x317 (_ bv1 256)) (bvule (_ bv1 256) x217) (bvuge x99 (_ bv68 256)) (= x4 (_ bv0 256)) (bvule (_ bv0 256) x228)) (and (and (and (and (and (= (x149 x325) x55) (bvuge (_ bv340282366920938463463374607431768211455 256) x76) (= (x172 (_ bv64 256) x22 (_ bv0 256)) x267) (= x301 (x310 x32)) (= x277 (x213 x39)) (= x109 x227) (bvule x281 (_ bv20282409603651670423947251286015 256)) (= x151 x166) (bvuge x55 (_ bv1 256)) (= x169 x134) (= x239 (bvadd (_ bv2 256) x92)) (= (x70 x267) x281) (= x238 (_ bv2593764592 256)) (= x108 (_ bv0 256)) (= (bvult (_ bv0 256) x193) x63) (= (x303 x151) x2) (= x268 x135) (= (x172 (_ bv64 256) x325 (_ bv60 256)) x92) (= (x253 x92) x76) (= x36 x2) (= (bvadd (_ bv1 256) x92) x39) (= x193 (bvadd (bvneg x76) x260)) (= x32 (x172 (_ bv64 256) x22 x239)) (= x134 (x52 x325))) (= x217 x260)) (= x22 x166)) (and (= x123 (x280 x50)) (= x131 (x197 (_ bv36 256))) (= x285 (_ bv1145441982 256)) x162 (= x91 x268) (= x50 (x172 (_ bv64 256) x9 (_ bv62 256))) (bvule (_ bv1 256) x291) (= x91 (x197 (_ bv4 256))) (= x9 x283) (bvule x91 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x149 x325) x291) (bvuge x131 (_ bv1 256)) (bvule x123 (_ bv1099511627775 256)) (= x109 x131) (= x245 x9) (= x167 (bvult (_ bv0 256) x123)) (= x162 (or (not x190) x167)))) (and (= x190 (bvugt x273 (_ bv0 256))) (bvule (_ bv1 256) x319) (= x322 (_ bv2432040568 256)) (= x75 (_ bv36 256)) (= x254 x188) (= x273 (x247 x189)) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x273) (= x189 (x172 (_ bv64 256) x188 (_ bv62 256))) (= x245 x225) (= x319 (x149 x325)) (= x188 x107)))) (and (=> (and (and (or (and (not x140) (= x181 (= x260 x76))) (and (= x181 x140) x140)) (and (bvule x53 (_ bv340282366920938463463374607431768211455 256)) (= (ite (= (_ bv0 256) x53) (= (_ bv0 256) x53) (= x248 (_ bv0 256))) x140) (= x53 (x124 x92)))) x63) x156) (=> (and (not x63) (= x237 x277)) x246))) x87))
(assert (= (x72 (x172 (_ bv64 256) x142 (_ bv62 256))) (_ bv62 256)))
(assert (= x299 (and x102 x244)))
(assert (=> (bvuge (_ bv10000 256) x292) (= (_ bv0 256) (x96 x292))))
(assert (= (_ bv0 256) (x96 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (= (x172 (_ bv64 256) x142 (_ bv62 256)) (x96 (x172 (_ bv64 256) x142 (_ bv62 256)))))
(assert (= x171 (and x224 x90)))
(assert (x205 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (bvugt (x172 (_ bv64 256) x9 (_ bv62 256)) (_ bv10000 256)))
(assert (= (x96 (x172 (_ bv64 256) x17 (_ bv3 256))) (x172 (_ bv64 256) x17 (_ bv3 256))))
(assert (x205 (_ bv20282409603651670423947251286015 256)))
(assert (= (or x232 x299) x183))
(assert (= x292 (x6 (x172 (_ bv64 256) x292 (_ bv62 256)))))
(assert (= (and (not x141) x298) x210))
(assert (= (_ bv64 256) (x38 (x172 (_ bv64 256) x188 (_ bv62 256)))))
(assert (= (x38 (x172 (_ bv64 256) x22 (_ bv0 256))) (_ bv64 256)))
(assert (= (or x120 x19 x128 x138 x182) x90))
(assert (bvult (_ bv10000 256) (x172 (_ bv64 256) x17 (_ bv3 256))))
(assert (x205 (_ bv2593764592 256)))
(assert (= x168 (and (not x63) x30)))
(assert (bvult (_ bv10000 256) (x172 (_ bv64 256) x22 (_ bv61 256))))
(assert (=> (bvuge (_ bv10000 256) x142) (= (x96 x142) (_ bv0 256))))
(assert (x205 (_ bv4294967295 256)))
(assert (= (and x215 (not x324)) x182))
(assert (not (x205 (x172 (_ bv64 256) x142 (_ bv62 256)))))
(assert (= (x96 (x172 (_ bv64 256) x188 (_ bv62 256))) (x172 (_ bv64 256) x188 (_ bv62 256))))
(assert (= x22 (x6 (x172 (_ bv64 256) x22 (_ bv0 256)))))
(assert (= (or x60 x261) x298))
(assert (x205 (_ bv1145441982 256)))
(assert (x205 (_ bv2432040568 256)))
(assert (= (_ bv64 256) (x38 (x172 (_ bv64 256) x325 x132))))
(assert (= x142 (x6 (x172 (_ bv64 256) x142 (_ bv62 256)))))
(assert (bvugt (x172 (_ bv64 256) x91 (_ bv2 256)) (_ bv10000 256)))
(assert (= (_ bv64 256) (x38 (x172 (_ bv64 256) x17 (_ bv3 256)))))
(assert (= (x6 (x172 (_ bv64 256) x325 x132)) x325))
(assert (x205 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (and x324 x215) x82))
(assert (= x246 (=> (= x288 (= x301 x237)) (and (=> (and (= (_ bv0 256) x147) x288) x13) (=> (and (and (or (and (and (bvule (_ bv0 256) x110) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x110) (not (bvult x237 x314)) (= x110 (bvmul x314 x281)) (= x1 x219) (x45 x281 x314) (= (bvudiv x110 (_ bv1000000000000000000 256)) x219) (= x314 (bvadd (bvneg x301) x237))) (not x121)) (and x121 (= x1 (_ bv0 256)))) (= (= (_ bv0 256) x281) x121)) (not x288)) x115)))))
(assert (= (x96 (x172 (_ bv64 256) x91 (_ bv2 256))) (x172 (_ bv64 256) x91 (_ bv2 256))))
(assert (=> (bvule x325 (_ bv10000 256)) (= (_ bv0 256) (x96 x325))))
(assert (= x255 (or x122 x311)))
(assert (not (x205 (x172 (_ bv64 256) x17 (_ bv3 256)))))
(assert (= (or x183 x168) x69))
(assert (=> (bvule x188 (_ bv10000 256)) (= (_ bv0 256) (x96 x188))))
(assert (= (_ bv0 256) (x96 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (=> (and (= x177 (bvand x152 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))) (= (_ bv128 256) x46) (= x12 (_ bv0 256)) (= (_ bv260 256) x326) (bvule (_ bv1 256) x89) (= x202 (x15 (_ bv128 256))) (not (bvult x7 x114)) (= x17 (bvand x163 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x89 (ite (bvult x7 x131) x7 x131)) (= (bvadd x7 (bvneg x89)) x114) (= x270 (bvugt x202 (_ bv0 256))) (= (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x177) x104) (= x152 (x93 (_ bv160 256)))) (and (=> (and (and (= x321 (x62 (_ bv160 256))) (= (bvugt x202 (_ bv32 256)) x324)) x270) (and (=> (and x324 (and (= (bvugt x202 (_ bv64 256)) x186) (= x315 (x62 (_ bv192 256))))) (and (=> (not x186) x203) (=> (and x186 (and (= x31 (x62 (_ bv224 256))) (= (bvult (_ bv96 256) x202) x73))) (and (=> (not x73) x203) (=> x73 x23))))) (=> (not x324) x203))) (=> (not x270) x203))) x49))
(assert (= (x96 (x172 (_ bv64 256) x325 (_ bv60 256))) (x172 (_ bv64 256) x325 (_ bv60 256))))
(assert (= true x30))
(assert (= (_ bv0 256) (x96 (_ bv1000000000000000000 256))))
(assert (= (x96 (x172 (_ bv64 256) x22 x239)) (x172 (_ bv64 256) x22 x239)))
(assert (x205 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (not (x205 (x172 (_ bv64 256) x292 (_ bv62 256)))))
(assert (= (x96 (x172 (_ bv64 256) x292 (_ bv62 256))) (x172 (_ bv64 256) x292 (_ bv62 256))))
(assert (= x23 (=> (and (= x198 (x62 (_ bv256 256))) (= (not (bvult (_ bv128 256) x202)) x159)) (and x159 x203))))
(assert (= (or x171 (and (not x224) x90)) x221))
(assert (= (_ bv64 256) (x38 (x172 (_ bv64 256) x325 (_ bv60 256)))))
(assert (bvult (_ bv10000 256) (x172 (_ bv64 256) x22 x239)))
(assert (= (_ bv64 256) (x38 (x172 (_ bv64 256) x142 (_ bv62 256)))))
(assert (= x203 (=> (and (or (not x224) (and x224 (and (= (x149 x240) x35) (bvuge x35 (_ bv1 256)) (= x223 true)))) (and (not (bvugt x256 x21)) (= x78 (x172 (_ bv64 256) x325 x132)) (= (x172 (_ bv64 256) x17 (_ bv3 256)) x132) (not (bvult x84 x207)) (= x24 x14) (= x26 x287) (= x318 (_ bv1 256)) (= x155 (bvadd x89 x243)) (= x158 (bvadd x202 (_ bv324 256))) (= (_ bv324 256) x154) (= x287 x135) (= (bvadd x158 (bvneg (_ bv324 256))) x175) (= (x27 x37) x21) (not (bvult x155 x243)) (= (_ bv100 256) x175) (= x58 (x262 (_ bv324 256))) (bvule (_ bv1 256) x284) (= x187 (x172 (_ bv64 256) x91 (_ bv2 256))) (= x25 x201) (= x24 (x117 x240)) (= (x206 x78) x84) (= x207 (bvadd (bvneg x89) x84)) (bvuge x84 (_ bv1 256)) (= (x172 (_ bv64 256) x17 (_ bv2 256)) x37) (= x48 x272) (= x89 x48) (not (bvult x84 x89)) (not (bvult x21 x89)) (= x216 (_ bv599290589 256)) (= x243 (x100 x187)) (not (bvult x155 x243)) (= x17 x201) (= (= (_ bv0 256) x58) x224) (bvuge x21 (_ bv1 256)) (= x77 x11) (= x256 (bvadd x21 (bvneg x89))) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x8) (= x77 (x279 x325)) (= x199 (_ bv100 256)) (= (x172 (_ bv64 256) x17 (_ bv2 256)) x305) (= x320 (_ bv324 256)) (= x284 (x149 x240)))) x293)))
(assert (= x132 (x72 (x172 (_ bv64 256) x325 x132))))
(assert (=> (bvuge (_ bv10000 256) x240) (= (x96 x240) (_ bv0 256))))
(assert (= x239 (x72 (x172 (_ bv64 256) x22 x239))))
(assert (= x22 (x6 (x172 (_ bv64 256) x22 (_ bv61 256)))))
(assert (x205 (_ bv599290589 256)))
(assert (= (and x5 x221) x103))
(assert (bvugt (x172 (_ bv64 256) x292 (_ bv62 256)) (_ bv10000 256)))
(assert (= (or x294 x258) x94))
(assert (bvult (_ bv10000 256) (x172 (_ bv64 256) x22 (_ bv0 256))))
(assert (= x258 (or x157 x119)))
(assert (= (_ bv0 256) (x96 (_ bv4294967295 256))))
(check-sat)
(exit)
