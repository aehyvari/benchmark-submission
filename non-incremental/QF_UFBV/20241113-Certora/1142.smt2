(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x108 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x58 () Bool)
(declare-fun x109 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x22 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x82 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x95 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x256 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x117 () Bool)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x156 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x222 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x9 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x188 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x159 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x23 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x84 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x110 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x261 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x31 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x248 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x144 () Bool)
(declare-fun x226 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x39 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x88 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x6 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x97 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x229 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x150 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x274 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x202 () Bool)
(declare-fun x236 () Bool)
(declare-fun x241 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x277 () Bool)
(declare-fun x168 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x3 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x99 ((_ BitVec 256)) Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x271 () Bool)
(declare-fun x87 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x265 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x131 () Bool)
(declare-fun x225 () (_ BitVec 256))
(declare-fun x74 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x183 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x29 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x28 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x272 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x273 () Bool)
(declare-fun x46 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x257 () Bool)
(declare-fun x160 () Bool)
(declare-fun x201 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x215 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x221 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x211 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x224 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x237 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(define-fun x48 ((x125 (_ BitVec 256)) (x278 (_ BitVec 256))) Bool (= x125 (bvudiv (bvmul x278 x125) x278)))
(define-fun x138 ((x125 (_ BitVec 256)) (x278 (_ BitVec 256))) Bool (= x125 (bvsdiv (bvmul x125 x278) x278)))
(define-fun x194 ((x125 (_ BitVec 256)) (x278 (_ BitVec 256))) Bool (= x125 (bvsdiv (bvmul x278 x125) x278)))
(define-fun x62 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x112 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x16 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x167 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x269 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x137 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x21 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x247 ((x81 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x245 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv60 256)) x30 (x29 x81)))
(define-fun x35 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv61 256)) x141 (x245 x81)))
(define-fun x96 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv62 256)) x32 (x35 x81)))
(define-fun x174 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 x59) x190 (x156 x81)))
(define-fun x33 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv128 256)) (_ bv91785737963608337276871606668839837770944578529357047469168075875540594065408 256) (x62 x81)))
(define-fun x123 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x81) x101 (x33 x81)))
(define-fun x199 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv164 256)) (ite true (_ bv1 256) (_ bv0 256)) (x123 x81)))
(define-fun x120 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv128 256)) (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256) (x112 x81)))
(define-fun x185 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv132 256) x81) x101 (x120 x81)))
(define-fun x40 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv0 256)) x205 (x222 x81)))
(define-fun x72 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x81) x205 (x185 x81)))
(define-fun x231 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv192 256)) (_ bv77053863734975077137548456399560439977311721439096602559221323163398253314048 256) (x72 x81)))
(define-fun x184 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvugt (_ bv224 256) x81) (bvule (_ bv192 256) x81)) (x23 (bvadd (bvneg (_ bv192 256)) x81)) (x231 x81)))
(define-fun x176 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (= x81 (_ bv192 256)) (_ bv32448526587742821705420922584724485868042762744405677678137571372057917128704 256) (x184 x81)))
(define-fun x230 ((x81 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv192 256) x81) (bvugt (_ bv224 256) x81)) (x74 (bvadd (bvneg (_ bv192 256)) x81)) (x176 x81)))
(define-fun x5 ((x235 (_ BitVec 256))) Bool (or (= (x215 (x108 x235)) (bvadd x235 (_ bv1 256))) (not (and (bvuge x235 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x235))) (not (and (bvule (_ bv0 256) x235) (bvugt x187 x235)))))
(define-fun x127 ((x129 (_ BitVec 256))) Bool (or (= (_ bv0 256) (x215 x129)) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x129) (bvule (_ bv0 256) x129))) (and (and (= x129 (x108 (bvadd (bvneg (_ bv1 256)) (x215 x129)))) (bvuge (x215 x129) (_ bv1 256))) (bvule (x215 x129) x187))))
(define-fun x78 ((x243 (_ BitVec 256)) (x180 (_ BitVec 256))) Bool (or (or (not (and (bvule (_ bv0 256) x180) (bvule x180 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (not (and (bvult x180 (x97 x243)) (bvuge x180 (_ bv0 256)))) (= (x265 x243 (x183 x243 x180)) (bvadd (_ bv1 256) x180))) (not (and (bvuge x243 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x243)))))
(define-fun x173 ((x135 (_ BitVec 256)) (x260 (_ BitVec 256))) Bool (or (or (= (x265 x135 x260) (_ bv0 256)) (not (and (bvule x260 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x260))) (and (and (bvuge (x265 x135 x260) (_ bv1 256)) (= (x183 x135 (bvadd (x265 x135 x260) (bvneg (_ bv1 256)))) x260)) (bvule (x265 x135 x260) (x97 x135)))) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x135) (bvuge x135 (_ bv0 256))))))
(define-fun x38 ((x49 (_ BitVec 256)) (x175 (_ BitVec 256))) Bool (or (or (not (and (bvuge x175 (_ bv0 256)) (bvule x175 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (not (and (bvult x175 (x221 x49)) (bvule (_ bv0 256) x175))) (= (x188 x49 (x82 x49 x175)) (bvadd x175 (_ bv1 256)))) (not (and (bvule (_ bv0 256) x49) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x49)))))
(define-fun x41 ((x10 (_ BitVec 256)) (x77 (_ BitVec 256))) Bool (or (or (= (_ bv0 256) (x188 x10 x77)) (not (and (bvule (_ bv0 256) x77) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x77))) (and (bvuge (x221 x10) (x188 x10 x77)) (and (= x77 (x82 x10 (bvadd (bvneg (_ bv1 256)) (x188 x10 x77)))) (bvuge (x188 x10 x77) (_ bv1 256))))) (not (and (bvule x10 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x10)))))
(define-fun x34 ((x94 (_ BitVec 256)) (x233 (_ BitVec 256))) Bool (or (or (not (and (bvule x233 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x233))) (not (or (not (= (x188 x94 x233) (_ bv0 256))) (not (= (_ bv0 256) (x265 x94 x233))))) (not (= (x215 x233) (_ bv0 256)))) (not (and (bvuge x94 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x94)))))
(define-fun x263 ((x212 (_ BitVec 256))) Bool (or (bvugt (_ bv340282366920938463463374607431768211455 256) (x97 x212)) (not (and (bvule x212 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x212 (_ bv0 256))))))
(define-fun x98 ((x104 (_ BitVec 256))) Bool (or (not (and (bvule (_ bv0 256) x104) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x104))) (bvugt (_ bv340282366920938463463374607431768211455 256) (x221 x104))))
(define-fun x209 () Bool (and (x5 (bvadd (bvneg (_ bv1 256)) (x215 x101))) (x5 (bvadd (x215 x279) (bvneg (_ bv1 256))))))
(define-fun x264 () Bool x209)
(define-fun x227 () Bool (and (x127 x101) (x127 x279)))
(define-fun x63 () Bool x227)
(define-fun x240 () Bool (x78 x252 (bvadd (bvneg (_ bv1 256)) (x265 x252 x279))))
(define-fun x238 () Bool x240)
(define-fun x192 () Bool (x173 x252 x279))
(define-fun x26 () Bool x192)
(define-fun x258 () Bool (x38 x252 (bvadd (x188 x252 x279) (bvneg (_ bv1 256)))))
(define-fun x71 () Bool x258)
(define-fun x27 () Bool (x41 x252 x279))
(define-fun x115 () Bool x27)
(define-fun x7 () Bool (x34 x252 x279))
(define-fun x20 () Bool (x34 x252 x279))
(define-fun x15 () Bool (and x20 x7))
(define-fun x4 () Bool (x263 x252))
(define-fun x89 () Bool x4)
(define-fun x166 () Bool (x98 x252))
(define-fun x191 () Bool x166)
(assert (=> (bvule x128 (_ bv10000 256)) (= (x22 x128) (_ bv0 256))))
(assert (= x202 (and x271 x178)))
(assert (=> (bvule x101 (_ bv10000 256)) (= (x22 x101) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x113) (= (_ bv0 256) (x22 x113))))
(assert (= (_ bv0 256) (x22 (_ bv2834622966 256))))
(assert (bvugt (x9 (_ bv64 256) x101 (_ bv54 256)) (_ bv10000 256)))
(assert x89)
(assert (= (=> (and (= x47 x11) (= (_ bv256 256) x42) (= x11 (bvudiv x55 x270))) x126) x80))
(assert (x99 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (bvult (_ bv10000 256) (x9 (_ bv64 256) x101 (_ bv57 256))))
(assert (= x101 (x87 (x9 (_ bv64 256) x101 (_ bv57 256)))))
(assert (=> (bvule x86 (_ bv10000 256)) (= (x22 x86) (_ bv0 256))))
(assert (= (or x75 (and (not x203) x122)) x64))
(assert (= (and x203 x122) x2))
(assert (= (and x69 x92) x117))
(assert (not (x99 (x9 (_ bv64 256) x101 (_ bv53 256)))))
(assert (=> (bvule x141 (_ bv10000 256)) (= (x22 x141) (_ bv0 256))))
(assert (=> (bvule x30 (_ bv10000 256)) (= (_ bv0 256) (x22 x30))))
(assert (= (and x65 x202) x91))
(assert (x99 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x22 (x9 (_ bv64 256) x101 (_ bv57 256))) (x9 (_ bv64 256) x101 (_ bv57 256))))
(assert (=> (bvule x195 (_ bv10000 256)) (= (x22 x195) (_ bv0 256))))
(assert (= x122 (and x211 x95)))
(assert (= (and x2 x46) x155))
(assert (= x232 (=> (and (and (bvuge x50 (_ bv1 256)) (bvule (_ bv100 256) x179) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x85) (bvuge x246 (_ bv0 256)) (bvule x219 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x132 (_ bv0 256)) (bvule x162 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x140 x28 (bvuge x141 (_ bv1 256)) (not (= x128 x145)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x225) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x136) (not (= x124 x145)) (not (= x32 x30)) (bvule (_ bv1 256) x30) (not (= x86 x79)) (= x101 (x224 (_ bv4 256))) (bvule x128 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x128 x152) (bvule x132 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x128 x79)) (= (bvugt (x150 x30) (_ bv0 256)) x88) (not (= x145 x85)) (not (= x128 x86)) (not (= x145 x30)) (= x26 x273) (bvule (_ bv1 256) x68) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x152) (bvule (_ bv1 256) x145) (= x15 x144) (= x115 x177) (bvule (_ bv0 256) x255) (bvule (_ bv1 256) x152) (= x101 x198) (= x39 x63) (= (bvugt (x150 x86) (_ bv0 256)) x257) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x32) (bvule x101 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x85 x141)) x216 (not (= x32 x141)) (bvule (_ bv1 256) x136) (bvule x30 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x19) x257 (= (bvugt (x150 x79) (_ bv0 256)) x216) (bvule (_ bv1 256) x79) (bvule (_ bv0 256) x181) (not (= x145 x79)) (= x249 (_ bv0 256)) (not (= x79 x85)) x144 (= x241 (bvugt (x150 x32) (_ bv0 256))) (bvule (_ bv0 256) x266) (bvule (_ bv0 256) x214) x177 (bvule (_ bv1 256) x113) x163 (not (= x128 x141)) (bvuge x86 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x246) (= x264 x163) (not (= x124 x32)) (= x201 x238) (not (= x124 x79)) (= x151 (bvugt (x150 x141) (_ bv0 256))) (bvuge x32 (_ bv1 256)) (= (bvult (_ bv0 256) (x150 x145)) x114) (= x85 x68) (not (= x30 x141)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x86) (bvule x19 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x86 x124)) (not (= x86 x145)) (bvule x50 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x224 (_ bv36 256)) x119) (not (= x145 x141)) x110 x201 (bvuge (_ bv4294967295 256) x266) (bvule (_ bv0 256) x162) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x141) (bvule x113 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x149 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x124) (= x86 x136) x131 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x149) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x119) (= x113 x79) (not (= x32 x85)) (not (= x128 x85)) (not (= x124 x128)) (not (= x124 x85)) (not (= x79 x141)) x114 (bvule (_ bv1 256) x85) (= x131 (bvugt (x150 x85) (_ bv0 256))) (not (= x79 x32)) (= x28 (bvult (_ bv0 256) (x150 x128))) (not (= x85 x30)) (not (= x30 x124)) (= x71 x110) (not (= x86 x141)) (not (= x141 x124)) (= x140 (bvugt (x150 x124) (_ bv0 256))) (bvule (_ bv1 256) x128) (bvule x145 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x179 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge x124 (_ bv1 256)) (not (= x32 x128)) (bvule (_ bv0 256) x219) (not (= x145 x32)) (not (= x86 x32)) x88 x241 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x181) (not (= x86 x85)) x273 (not (= x30 x128)) x151 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x68) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x255) x39 (bvule (_ bv0 256) x225) (= x50 x79) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x79) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x214) (not (= x30 x86)) (not (= x30 x79))) (and (= x225 x37) (and (= x198 x207) (= x280 (bvand x43 (_ bv255 256))) (= (x150 x79) x8) (= (_ bv68 256) x223) (= (= (_ bv0 256) x61) x211) (= x195 (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x103)) (= (_ bv1 256) x189) (= x254 (_ bv1 256)) (= x190 x111) (= x193 x105) (= x228 (_ bv52 256)) (= x161 (_ bv2834622966 256)) (= x250 (x9 (_ bv64 256) x101 (_ bv54 256))) (= x132 x59) (bvuge x51 (_ bv1 256)) (= x106 (bvadd x250 (_ bv4 256))) (= x103 (x96 (_ bv60 256))) (= (_ bv3404522238 256) x116) x31 (bvule (_ bv1 256) x204) (= x229 true) (= x280 (_ bv0 256)) (= x43 (bvudiv x100 (_ bv65536 256))) (bvule x61 (_ bv255 256)) (= x100 (x96 x106)) (= x105 x207) (bvule x12 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv128 256) x146) (bvuge x8 (_ bv1 256)) (= x171 (x174 x79)) (= (x150 x30) x51) (= (x150 x195) x57) (= (x96 x200) x204) (= x160 true) (= x143 (_ bv52 256)) (= x12 (x215 x101)) (bvule (_ bv1 256) x12) (= x171 x251) (= (x9 (_ bv64 256) x101 (_ bv53 256)) x200) (= x190 (x156 x59)) (bvuge x57 (_ bv1 256)) (= x130 (_ bv91785737963608337276871606668839837770944578529357047469168075875540594065408 256)) (= (= x12 x204) x31)))) (and (=> (not x211) x121) (=> (and (and (= (ite x226 (_ bv1 256) (_ bv0 256)) x205) (= x218 (x9 (_ bv64 256) x101 (_ bv53 256))) (= (x9 (_ bv64 256) x101 (_ bv57 256)) x244) (= x206 x24) (= (x168 x154) x153) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x197) (= x102 (_ bv52 256)) (= x193 x24) (bvuge x197 (_ bv0 256)) (bvuge x70 (_ bv1 256)) (= x44 (bvadd x37 (bvneg x153))) (= x154 (bvadd (_ bv2 256) x244)) (= x14 (_ bv128 256)) (= x52 (x96 x218)) (= x118 (= x52 x197)) (= (_ bv52 256) x172) (= (ite (bvult (_ bv0 256) x44) (bvult (_ bv0 256) x60) (bvugt x44 (_ bv0 256))) x203) (= (_ bv36 256) x53) (bvuge x17 (_ bv1 256)) (= x17 (x72 (_ bv128 256))) (= x197 (x215 x101)) (= (x150 x79) x267) (= x226 (not (= x52 (_ bv0 256)))) (= x226 x248) (= (x150 x113) x70) (not (bvugt x153 x37)) (= (x9 (_ bv64 256) x101 (_ bv54 256)) x1) (= x60 (x237 x1)) (= x90 (_ bv128 256)) x118 (bvuge x267 (_ bv1 256)) (= x242 (_ bv1143531618 256)) (= x170 (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256))) x211) (and (=> (not x203) x58) (=> (and x203 (and (or (and (= x210 (_ bv0 256)) x46) (and (not x46) (and (= x234 x210) (x48 x213 (_ bv1000000000000000000 256)) (= (bvmul (_ bv1000000000000000000 256) x213) x234)))) (and (= x66 (_ bv192 256)) (bvule x73 (_ bv4294967295 256)) (= x262 (x150 x101)) (bvuge x73 (_ bv32 256)) (bvuge (_ bv4294967295 256) x220) (= (x230 (_ bv192 256)) x213) (= x83 (_ bv192 256)) (bvule (_ bv32 256) x220) (= (x184 (_ bv192 256)) x18) (= (= x213 (_ bv0 256)) x46) (bvuge x262 (_ bv1 256)) (bvuge x18 (_ bv1 256)) (= (x150 x101) x147) (= x259 (_ bv1000000000000000000 256)) (bvule (_ bv1 256) x147)))) x159)))))))
(assert (= (=> (and (and (= (= (_ bv0 256) x60) x92) (= x270 (bvudiv x210 x18)) (= (_ bv192 256) x165)) (or (and (= (_ bv0 256) x139) x92) (and (and (x48 x60 x44) (= (bvmul x44 x60) x54) (= x54 x139)) (not x92)))) x256) x159))
(assert (= (or x13 x64) x253))
(assert (= (_ bv0 256) (x22 (_ bv4294967295 256))))
(assert (= (=> (= (bvugt x270 (_ bv0 256)) x178) (and (=> (and (and (and (= x65 (= x139 (_ bv0 256))) (= x274 (_ bv1000000000000000000 256))) (or (and (and (= x55 x45) (= x45 (bvmul x139 (_ bv1000000000000000000 256))) (x48 x139 (_ bv1000000000000000000 256))) (not x65)) (and x65 (= (_ bv0 256) x55)))) x178) x80) (=> (and (not x178) (= (_ bv0 256) x47)) x126))) x256))
(assert (= (x22 (_ bv91785737963608337276871606668839837770944578529357047469168075875540594065408 256)) (_ bv0 256)))
(assert (= (x6 (x9 (_ bv64 256) x101 (_ bv57 256))) (_ bv57 256)))
(assert (= (_ bv64 256) (x272 (x9 (_ bv64 256) x101 (_ bv57 256)))))
(assert (=> (bvuge (_ bv10000 256) x59) (= (x22 x59) (_ bv0 256))))
(assert (not (x99 (x9 (_ bv64 256) x101 (_ bv57 256)))))
(assert (= (x22 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (not (x99 (x9 (_ bv64 256) x101 (_ bv54 256)))))
(assert (x99 (_ bv1000000000000000000 256)))
(assert (not x232))
(assert (bvugt (x9 (_ bv64 256) x101 (_ bv53 256)) (_ bv10000 256)))
(assert (= (x272 (x9 (_ bv64 256) x101 (_ bv54 256))) (_ bv64 256)))
(assert (= (and (not x65) x202) x25))
(assert (= (x22 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x99 (_ bv77053863734975077137548456399560439977311721439096602559221323163398253314048 256)))
(assert (= x58 x121))
(assert (= true x95))
(assert (= x67 (and x69 (not x92))))
(assert (x99 (_ bv1143531618 256)))
(assert (= (=> (= x182 (or (or (not (= (x215 x279) (_ bv0 256))) (not (or (not (= (_ bv0 256) (x188 x252 x279))) (not (= (x265 x252 x279) (_ bv0 256))))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x279) (bvule (_ bv0 256) x279)))) (not (and (bvule x252 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x252))))) x182) x121))
(assert (= (x22 (bvadd x250 (_ bv4 256))) (x22 x250)))
(assert (= (_ bv0 256) (x22 (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256))))
(assert (= (or x117 x67) x271))
(assert (x99 (_ bv2834622966 256)))
(assert (= (_ bv64 256) (x272 (x9 (_ bv64 256) x101 (_ bv53 256)))))
(assert (x99 (_ bv340282366920938463463374607431768211455 256)))
(assert (x99 (_ bv3404522238 256)))
(assert (x99 (_ bv91785737963608337276871606668839837770944578529357047469168075875540594065408 256)))
(assert (= (x22 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (x22 x244) (x22 (bvadd x244 (_ bv2 256)))))
(assert (= (x22 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (_ bv53 256) (x6 (x9 (_ bv64 256) x101 (_ bv53 256)))))
(assert (= x75 (or x107 x158)))
(assert (=> (bvuge (_ bv10000 256) x79) (= (_ bv0 256) (x22 x79))))
(assert (x99 (_ bv65536 256)))
(assert (= (or x91 x25) x158))
(assert (x99 (_ bv32448526587742821705420922584724485868042762744405677678137571372057917128704 256)))
(assert (= (x22 (_ bv1143531618 256)) (_ bv0 256)))
(assert (= x84 (and x2 (not x46))))
(assert (x99 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (bvult x187 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x22 (_ bv3404522238 256)) (_ bv0 256)))
(assert (= (and x271 (not x178)) x107))
(assert (= (x22 (_ bv32448526587742821705420922584724485868042762744405677678137571372057917128704 256)) (_ bv0 256)))
(assert x191)
(assert (= (x9 (_ bv64 256) x101 (_ bv53 256)) (x22 (x9 (_ bv64 256) x101 (_ bv53 256)))))
(assert (= x13 (and (not x211) x95)))
(assert (= (_ bv54 256) (x6 (x9 (_ bv64 256) x101 (_ bv54 256)))))
(assert (=> (bvule x32 (_ bv10000 256)) (= (_ bv0 256) (x22 x32))))
(assert (= x69 (or x155 x84)))
(assert (= x101 (x87 (x9 (_ bv64 256) x101 (_ bv54 256)))))
(assert (= (x22 (_ bv65536 256)) (_ bv0 256)))
(assert (=> (bvule x145 (_ bv10000 256)) (= (_ bv0 256) (x22 x145))))
(assert (x99 (_ bv30829551433480478574130759533689969061986713706407496519962685853927355711488 256)))
(assert (= x101 (x87 (x9 (_ bv64 256) x101 (_ bv53 256)))))
(assert (= (x9 (_ bv64 256) x101 (_ bv54 256)) (x22 (x9 (_ bv64 256) x101 (_ bv54 256)))))
(assert (= (_ bv0 256) (x22 (_ bv77053863734975077137548456399560439977311721439096602559221323163398253314048 256))))
(assert (x99 (_ bv4294967295 256)))
(assert (= (x22 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (=> (and (not (bvult x186 x36)) (= (bvadd x36 x47) x186) (= (x109 x244) x36)) x58) x126))
(assert (=> (bvule x85 (_ bv10000 256)) (= (x22 x85) (_ bv0 256))))
(assert (=> (bvule x124 (_ bv10000 256)) (= (_ bv0 256) (x22 x124))))
(check-sat)
(exit)
