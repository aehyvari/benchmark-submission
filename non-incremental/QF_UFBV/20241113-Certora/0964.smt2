(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x131 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x135 () Bool)
(declare-fun x297 () Bool)
(declare-fun x82 () Bool)
(declare-fun x53 () Bool)
(declare-fun x341 () Bool)
(declare-fun x203 () Bool)
(declare-fun x210 () Bool)
(declare-fun x351 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x326 () Bool)
(declare-fun x285 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x231 () Bool)
(declare-fun x136 () Bool)
(declare-fun x282 () Bool)
(declare-fun x83 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x364 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x195 () Bool)
(declare-fun x330 () Bool)
(declare-fun x206 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x190 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x40 () Bool)
(declare-fun x238 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x372 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x97 () Bool)
(declare-fun x115 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x243 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x343 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x350 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x335 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x311 () Bool)
(declare-fun x85 () Bool)
(declare-fun x12 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x16 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x52 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x342 () (_ BitVec 256))
(declare-fun x267 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x331 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x200 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x375 () Bool)
(declare-fun x308 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x354 ((_ BitVec 256)) Bool)
(declare-fun x334 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x47 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x218 () Bool)
(declare-fun x327 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x216 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x304 () Bool)
(declare-fun x315 () Bool)
(declare-fun x212 () Bool)
(declare-fun x318 () Bool)
(declare-fun x378 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x387 () Bool)
(declare-fun x157 () Bool)
(declare-fun x367 () Bool)
(declare-fun x313 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x255 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x366 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x383 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x244 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x325 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x99 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x50 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x333 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x345 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x358 () Bool)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x382 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x324 () Bool)
(declare-fun x114 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x373 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x322 () Bool)
(declare-fun x8 () Bool)
(declare-fun x232 () Bool)
(declare-fun x172 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x80 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x316 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x28 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x275 () Bool)
(declare-fun x107 () Bool)
(declare-fun x233 () Bool)
(declare-fun x320 () Bool)
(declare-fun x356 () (_ BitVec 256))
(declare-fun x340 () Bool)
(declare-fun x299 () Bool)
(declare-fun x235 () Bool)
(declare-fun x124 () Bool)
(declare-fun x29 () Bool)
(declare-fun x273 () Bool)
(declare-fun x300 () (_ BitVec 256))
(declare-fun x384 () Bool)
(declare-fun x98 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x385 () Bool)
(declare-fun x312 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x355 () Bool)
(declare-fun x360 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x25 () Bool)
(declare-fun x361 () Bool)
(declare-fun x174 () Bool)
(declare-fun x319 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x96 () Bool)
(declare-fun x134 () Bool)
(declare-fun x279 () Bool)
(declare-fun x45 () Bool)
(declare-fun x306 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x309 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x6 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x277 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x371 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x208 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x127 () (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x328 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x376 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x339 () Bool)
(declare-fun x120 () Bool)
(declare-fun x153 () Bool)
(declare-fun x374 () Bool)
(declare-fun x67 () Bool)
(declare-fun x286 () (_ BitVec 256))
(declare-fun x152 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x55 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x249 () Bool)
(declare-fun x167 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x338 () Bool)
(declare-fun x103 () Bool)
(declare-fun x156 () Bool)
(declare-fun x182 () Bool)
(declare-fun x314 () (_ BitVec 256))
(declare-fun x349 () (_ BitVec 256))
(declare-fun x57 () Bool)
(declare-fun x276 () Bool)
(declare-fun x323 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x369 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x26 () Bool)
(declare-fun x359 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x18 () Bool)
(declare-fun x140 () Bool)
(declare-fun x10 () Bool)
(declare-fun x129 () Bool)
(declare-fun x347 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x219 () Bool)
(declare-fun x221 () Bool)
(declare-fun x332 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x377 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x344 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x234 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x337 () Bool)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x381 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x274 () Bool)
(declare-fun x4 () Bool)
(declare-fun x352 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x207 () Bool)
(declare-fun x194 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x380 () Bool)
(declare-fun x148 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x370 () Bool)
(declare-fun x137 () (_ BitVec 256))
(declare-fun x336 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x329 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x368 () Bool)
(declare-fun x293 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x230 () Bool)
(declare-fun x357 () Bool)
(declare-fun x88 () Bool)
(declare-fun x252 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x386 () Bool)
(declare-fun x265 () Bool)
(declare-fun x379 () (_ BitVec 256))
(declare-fun x362 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x154 () Bool)
(define-fun x128 ((x346 (_ BitVec 256)) (x37 (_ BitVec 256))) Bool (= x346 (bvudiv (bvmul x37 x346) x37)))
(define-fun x132 ((x346 (_ BitVec 256)) (x37 (_ BitVec 256))) Bool (= x346 (bvsdiv (bvmul x346 x37) x37)))
(define-fun x348 ((x346 (_ BitVec 256)) (x37 (_ BitVec 256))) Bool (= x346 (bvsdiv (bvmul x37 x346) x37)))
(define-fun x66 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x71 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x175 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x260 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x23 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x122 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x187 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x256 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x178 ((x35 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x183 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x162) x186 (x99 x35)))
(define-fun x113 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x246) x269 (x309 x35)))
(define-fun x48 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite x221 (x309 x35) (ite x318 (x309 x35) (ite x6 (x309 x35) (x113 x35)))))
(define-fun x74 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x246) x93 (x360 x35)))
(define-fun x180 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x246) x291 (x74 x35)))
(define-fun x188 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite x221 (x360 x35) (ite x318 (x360 x35) (ite x6 (x360 x35) (x180 x35)))))
(define-fun x321 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x246 x35) x224 (x80 x35)))
(define-fun x161 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite x221 (x80 x35) (ite x318 (x80 x35) (ite x6 (x80 x35) (x321 x35)))))
(define-fun x33 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x246) x197 (x114 x35)))
(define-fun x211 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x246 x35) x46 (x33 x35)))
(define-fun x147 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite x221 (x114 x35) (ite x318 (x114 x35) (ite x6 (x114 x35) (x211 x35)))))
(define-fun x102 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x307) x170 (x147 x35)))
(define-fun x363 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x307 x35) x91 (x102 x35)))
(define-fun x27 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite x265 (x147 x35) (ite x157 (x147 x35) (ite x106 (x147 x35) (x363 x35)))))
(define-fun x181 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x35 x307) x117 (x188 x35)))
(define-fun x90 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x307 x35) x288 (x181 x35)))
(define-fun x217 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite x265 (x188 x35) (ite x157 (x188 x35) (ite x106 (x188 x35) (x90 x35)))))
(define-fun x184 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x307 x35) x125 (x161 x35)))
(define-fun x84 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite x265 (x161 x35) (ite x157 (x161 x35) (ite x106 (x161 x35) (x184 x35)))))
(define-fun x353 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x43 x35) x296 (x27 x35)))
(define-fun x225 ((x35 (_ BitVec 256))) (_ BitVec 256) (ite (= x43 x35) x251 (x217 x35)))
(assert (= x328 (or x156 x295)))
(assert (= (x323 (_ bv64 256) x73 (_ bv72 256)) (x343 (x323 (_ bv64 256) x73 (_ bv72 256)))))
(assert (bvult (_ bv10000 256) (x323 (_ bv64 256) x73 (_ bv72 256))))
(assert (= (or x255 x150) x341))
(assert (=> (bvuge (_ bv10000 256) x305) (= (x343 x305) (_ bv0 256))))
(assert (= (and x319 x274) x57))
(assert (= x50 (or x194 x329)))
(assert (not (x354 (x323 (_ bv64 256) x73 (_ bv72 256)))))
(assert (= (x343 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (x190 (x323 (_ bv64 256) x73 (_ bv71 256))) (_ bv71 256)))
(assert (= (_ bv0 256) (x343 (_ bv10000000000 256))))
(assert (= (x285 (x323 (_ bv64 256) x116 (_ bv60 256))) x116))
(assert (= (=> (= x227 x270) x207) x279))
(assert (= (or x75 x290) x59))
(assert (bvugt (x323 (_ bv64 256) x62 x60) (_ bv10000 256)))
(assert (= (and x268 x223) x370))
(assert (= x305 (x285 (x323 (_ bv64 256) x305 (_ bv0 256)))))
(assert (= (x343 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (or x277 x234) x89))
(assert (= (x343 (_ bv4722366482869645213695 256)) (_ bv0 256)))
(assert (= (x200 (x323 (_ bv64 256) x49 (_ bv60 256))) (_ bv64 256)))
(assert (= x45 (=> (and (bvuge (_ bv20282409603651670423947251286015 256) x164) (bvuge (_ bv4722366482869645213695 256) x19) (= (x225 x43) x362) (= (x323 (_ bv64 256) x73 (_ bv0 256)) x43) (= x19 (x353 x43)) (= (x84 x43) x164) (bvule x362 (_ bv4722366482869645213695 256))) x20)))
(assert (= (or x325 x203) x219))
(assert (= (x343 x109) (x343 (bvadd (_ bv1 256) x109))))
(assert (= (and x124 x330) x304))
(assert (= (x190 (x323 (_ bv64 256) x215 (_ bv60 256))) (_ bv60 256)))
(assert (= (x343 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= x266 (and (not x352) x322)))
(assert (= x138 (and x81 x253)))
(assert (= x182 (and x140 x266)))
(assert (= (and x1 x367) x171))
(assert (= (and x355 x34) x6))
(assert (= (_ bv0 256) (x343 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (_ bv64 256) (x200 (x323 (_ bv64 256) x73 (_ bv71 256)))))
(assert (= x79 (or x88 x107)))
(assert (= (or x185 x50) x290))
(assert (= (and (not x29) x383) x255))
(assert (= x106 (and x324 x25)))
(assert (=> (bvule x270 (_ bv10000 256)) (= (_ bv0 256) (x343 x270))))
(assert (= x271 (x190 (x323 (_ bv64 256) x14 x271))))
(assert (bvult (_ bv10000 256) (x323 (_ bv64 256) x119 (_ bv60 256))))
(assert (x354 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x190 (x323 (_ bv64 256) x116 (_ bv60 256))) (_ bv60 256)))
(assert (= x107 (and x359 (not x38))))
(assert (= x366 (and (not x85) x338)))
(assert (= (and x324 (not x25)) x97))
(assert (= (=> (and (and (= x143 x24) (= x22 (_ bv68 256)) (= x264 x201)) (and (and (and (= (x243 x108) x13) (= x49 x198) (= x316 (_ bv36 256)) (bvule (_ bv1 256) x364) (= (bvadd (_ bv2 256) x58) x60) (= (x55 x142) x364) (= (_ bv1817583341 256) x176) (= x58 (x323 (_ bv64 256) x49 (_ bv60 256))) (= x24 x241) (= x5 x62) (= x201 x62) (= x108 (x323 (_ bv64 256) x62 x60))) (and (= x155 (x323 (_ bv64 256) x215 (_ bv60 256))) (= x298 x215) (= x69 (x16 x289)) (= x241 x215) (= (x55 x142) x149) (= x36 (_ bv2727740892 256)) (= (bvadd (_ bv1 256) x155) x289) (bvule (_ bv1 256) x149) (= x376 (bvuge x69 x13)))) (= x143 x49))) x376) x28))
(assert (= (x343 (x323 (_ bv64 256) x73 (_ bv71 256))) (x323 (_ bv64 256) x73 (_ bv71 256))))
(assert (not (x354 (x323 (_ bv64 256) x116 (_ bv60 256)))))
(assert (= (x323 (_ bv64 256) x305 (_ bv0 256)) (x343 (x323 (_ bv64 256) x305 (_ bv0 256)))))
(assert (= (=> (= x177 x100) x231) x21))
(assert (= (_ bv60 256) (x190 (x323 (_ bv64 256) x49 (_ bv60 256)))))
(assert (= x383 (and x138 (not x292))))
(assert (= (and x81 (not x253)) x228))
(assert (= (x343 x303) (x343 (bvadd (_ bv2 256) x303))))
(assert (= (x190 (x323 (_ bv64 256) x73 (_ bv0 256))) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x280) (= (x343 x280) (_ bv0 256))))
(assert (= (x200 (x323 (_ bv64 256) x215 (_ bv60 256))) (_ bv64 256)))
(assert (= (and x141 x315) x325))
(assert (= (x343 (x323 (_ bv64 256) x119 (_ bv60 256))) (x323 (_ bv64 256) x119 (_ bv60 256))))
(assert (x354 (_ bv20282409603651670423947251286015 256)))
(assert (= x20 x28))
(assert (= x39 (or x157 x106 x208)))
(assert (x354 (_ bv4722366482869645213695 256)))
(assert (= (and x53 (not x332)) x83))
(assert (= (=> (= x240 x379) x311) x172))
(assert (= (or x182 x47) x230))
(assert (= (x323 (_ bv64 256) x49 (_ bv60 256)) (x343 (x323 (_ bv64 256) x49 (_ bv60 256)))))
(assert (not x239))
(assert (= (x190 (x323 (_ bv64 256) x73 (_ bv72 256))) (_ bv72 256)))
(assert (= (and (not x268) x223) x330))
(assert (= x2 (and x322 x352)))
(assert (= (and x317 x228) x277))
(assert (= x231 (=> (= x177 x272) x45)))
(assert (= x191 (=> (= x331 x342) x196)))
(assert (= x295 (and x370 x153)))
(assert (= (and x79 x333) x185))
(assert (= x31 (or x385 x221)))
(assert (bvugt (x323 (_ bv64 256) x270 (_ bv0 256)) (_ bv10000 256)))
(assert (=> (bvule x62 (_ bv10000 256)) (= (x343 x62) (_ bv0 256))))
(assert (= (or x57 x247) x234))
(assert (= (and (not x317) x228) x319))
(assert (= (=> (and (and (= (ite (= x73 x305) (_ bv0 256) x305) x77) (= x38 (= x30 (_ bv0 256)))) (or (not x38) x38)) x248) x372))
(assert (= (and x31 x332) x324))
(assert (= (x200 (x323 (_ bv64 256) x73 (_ bv0 256))) (_ bv64 256)))
(assert (= x73 (x285 (x323 (_ bv64 256) x73 (_ bv0 256)))))
(assert (= (and x375 x104) x297))
(assert (= true x223))
(assert (= x88 (and x38 x359)))
(assert (= (=> (= x100 x245) x21) x249))
(assert (= x49 (x285 (x323 (_ bv64 256) x49 (_ bv60 256)))))
(assert (= (and x366 x236) x313))
(assert (= x195 (or x341 x273)))
(assert (= (and (not x315) x141) x120))
(assert (not (x354 (x323 (_ bv64 256) x215 (_ bv60 256)))))
(assert (x354 (_ bv3700653596 256)))
(assert (= (and x297 (not x218)) x221))
(assert (=> (bvule x14 (_ bv10000 256)) (= (x343 x14) (_ bv0 256))))
(assert (x354 (_ bv2727740892 256)))
(assert (= (x200 (x323 (_ bv64 256) x119 (_ bv60 256))) (_ bv64 256)))
(assert (= (x190 (x323 (_ bv64 256) x305 (_ bv0 256))) (_ bv0 256)))
(assert (= x322 (and (not x252) x83)))
(assert (= (x343 (x323 (_ bv64 256) x270 (_ bv0 256))) (x323 (_ bv64 256) x270 (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x215) (= (_ bv0 256) (x343 x215))))
(assert (= (=> (= x101 x68) x267) x87))
(assert (= x104 (or x328 x70)))
(assert (=> (bvuge (_ bv10000 256) x73) (= (x343 x73) (_ bv0 256))))
(assert (= (and (not x209) x97) x367))
(assert (= x10 (=> (and (bvule x224 (_ bv20282409603651670423947251286015 256)) (= (x323 (_ bv64 256) x270 (_ bv0 256)) x246) (= (x74 x246) x291) (= (x80 x246) x224) (bvule x46 (_ bv4722366482869645213695 256)) (bvuge (_ bv4722366482869645213695 256) x291) (= (x33 x246) x46) (= x331 (_ bv768 256))) x191)))
(assert (= (and x85 x338) x318))
(assert (x354 (_ bv1817583341 256)))
(assert (bvult (_ bv10000 256) (x323 (_ bv64 256) x73 (_ bv0 256))))
(assert (= (and (not x375) x104) x75))
(assert (bvult (_ bv10000 256) (x323 (_ bv64 256) x305 (_ bv0 256))))
(assert (= (and (not x1) x367) x98))
(assert (= (x285 (x323 (_ bv64 256) x215 (_ bv60 256))) x215))
(assert (= x150 (and x383 x29)))
(assert (= (x200 (x323 (_ bv64 256) x73 (_ bv72 256))) (_ bv64 256)))
(assert (= (or x276 x219) x194))
(assert (= (x200 (x323 (_ bv64 256) x270 (_ bv0 256))) (_ bv64 256)))
(assert (= (x343 (_ bv2727740892 256)) (_ bv0 256)))
(assert (= x247 (and (not x274) x319)))
(assert (=> (bvule x142 (_ bv10000 256)) (= (_ bv0 256) (x343 x142))))
(assert (= (and x266 (not x140)) x47))
(assert (bvugt (x323 (_ bv64 256) x49 (_ bv60 256)) (_ bv10000 256)))
(assert (= (x285 (x323 (_ bv64 256) x270 (_ bv0 256))) x270))
(assert (= x372 x103))
(assert (= (x190 (x323 (_ bv64 256) x270 (_ bv0 256))) (_ bv0 256)))
(assert (= (or x6 x67 x318) x385))
(assert (= (_ bv64 256) (x200 (x323 (_ bv64 256) x116 (_ bv60 256)))))
(assert (=> (bvule x162 (_ bv10000 256)) (= (x343 x162) (_ bv0 256))))
(assert (= (or x386 x313) x67))
(assert (x354 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (or x98 x171) x208))
(assert (= x62 (x285 (x323 (_ bv64 256) x62 x60))))
(assert (x354 (_ bv10000000000 256)))
(assert (= (x323 (_ bv64 256) x116 (_ bv60 256)) (x343 (x323 (_ bv64 256) x116 (_ bv60 256)))))
(assert (= x76 (and (not x384) x120)))
(assert (= (and x34 (not x355)) x338))
(assert (= (x343 (x323 (_ bv64 256) x73 (_ bv0 256))) (x323 (_ bv64 256) x73 (_ bv0 256))))
(assert (not (x354 (x323 (_ bv64 256) x305 (_ bv0 256)))))
(assert (bvugt (x323 (_ bv64 256) x116 (_ bv60 256)) (_ bv10000 256)))
(assert (= x267 (=> (= x177 x101) x231)))
(assert (x354 (_ bv4294967295 256)))
(assert (= x81 (and x332 x53)))
(assert (= (or x89 x195) x329))
(assert (= (_ bv60 256) (x190 (x323 (_ bv64 256) x119 (_ bv60 256)))))
(assert (bvult (_ bv10000 256) (x323 (_ bv64 256) x14 x271)))
(assert (= x60 (x190 (x323 (_ bv64 256) x62 x60))))
(assert (= x70 (or x304 x167)))
(assert (bvugt (x323 (_ bv64 256) x215 (_ bv60 256)) (_ bv10000 256)))
(assert (=> (bvuge (_ bv10000 256) x119) (= (x343 x119) (_ bv0 256))))
(assert (= x273 (and x138 x292)))
(assert (= x387 (and x384 x120)))
(assert (= x141 (and x252 x83)))
(assert (= (=> (= x270 x294) x207) x232))
(assert (= x239 (=> (and (and (= x254 x119) (and (and (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x137) (= x344 (_ bv2727740892 256)) (= x56 x30) (= x308 x137) (bvuge x259 (_ bv1 256)) (= x30 (x152 (_ bv36 256))) (bvuge (_ bv1 256) x30) (= (bvuge x293 x44) x17) x17 (= x137 (x152 (_ bv4 256))) (= x109 (x323 (_ bv64 256) x116 (_ bv60 256))) (= x127 (bvadd x109 (_ bv1 256))) (= x259 (x55 x142)) (= x116 x121) (= x347 x116) (= x293 (x16 x127))) (and (= x118 x73) (and (bvuge (_ bv20282409603651670423947251286015 256) x169) (= (= x30 (_ bv0 256)) x268) (= x111 (_ bv3700653596 256)) (= (_ bv352 256) x123) (= (x114 x166) x296) (= (x99 x162) x186) (= x166 (x323 (_ bv64 256) x73 (_ bv0 256))) (= x308 x165) (= (x309 x166) x3) (bvuge (_ bv4722366482869645213695 256) x296) (= (x55 x142) x237) (= x327 x186) (bvuge (_ bv4722366482869645213695 256) x251) (= x145 (x183 x142)) (= x305 (ite (= x137 x73) (_ bv0 256) x137)) (= (x360 x166) x251) (= x61 x145) (bvuge (_ bv3 256) x3) (= x169 (x80 x166)) (= x54 x56) (= x162 x118) (bvuge x237 (_ bv1 256))))) (and (= x14 x286) (= (x323 (_ bv64 256) x119 (_ bv60 256)) x303) (= (x55 x142) x287) (= x168 (_ bv36 256)) (= x121 x24) (= x283 (_ bv1817583341 256)) (= x95 x14) (= (x323 (_ bv64 256) x14 x271) x78) (= x271 (bvadd (_ bv2 256) x303)) (bvuge x287 (_ bv1 256)) (= x44 (x243 x78)) (= x334 x119)))) (and (bvule x264 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x160) (bvule x160 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x131) (bvule (_ bv0 256) x284) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x377) (bvuge x351 (_ bv68 256)) (= x4 (bvult (_ bv0 256) (x55 x280))) (not (= x280 x142)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x64) (= x24 x254) (bvuge x9 (_ bv0 256)) x242 (bvule (_ bv0 256) x377) (bvule x179 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x163) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x24) (bvuge x202 (_ bv0 256)) (bvule (_ bv0 256) x118) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x202) (= x264 x95) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x118) (bvule x142 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x280) (bvule x9 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x262 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x262 (_ bv0 256)) (bvule (_ bv0 256) x131) (= (bvugt (x55 x142) (_ bv0 256)) x242) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x280) (bvule x351 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) x4 (bvule (_ bv0 256) x24) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x163) (bvule (_ bv0 256) x264) (bvuge x142 (_ bv1 256)) (bvuge x64 (_ bv0 256)) (= x378 (_ bv0 256)) (= x159 (_ bv68 256)) (bvule x284 (_ bv4294967295 256)) (bvuge x179 (_ bv0 256)))) (and (=> (and (not x268) (and (or (and (= (_ bv0 256) x294) x124) (and (and (= x301 x294) (= (x323 (_ bv64 256) x73 (_ bv72 256)) x94) (= x301 (x244 x94)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x301)) (not x124))) (= x124 (bvugt (_ bv2 256) x3)))) x232) (=> (and (and (and (= (= x356 (_ bv0 256)) x153) (= x356 (bvand (_ bv1 256) x3))) (or (and x153 (= x227 (_ bv0 256))) (and (and (= x144 (x323 (_ bv64 256) x73 (_ bv71 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x65) (= x65 x227) (= x65 (x52 x144))) (not x153)))) x268) x279)))))
(assert (= (=> (= x379 x42) x299) x311))
(assert (= (and x79 (not x333)) x53))
(assert (= (or x76 x387) x203))
(assert (= x299 (=> (= x272 x42) x45)))
(assert (not (x354 (x323 (_ bv64 256) x270 (_ bv0 256)))))
(assert (= x386 (and (not x236) x366)))
(assert (= x157 (and x97 x209)))
(assert (= (x200 (x323 (_ bv64 256) x305 (_ bv0 256))) (_ bv64 256)))
(assert (= (x343 x58) (x343 (bvadd x58 (_ bv2 256)))))
(assert (= x207 (=> (and (= (bvadd x305 (bvneg x270)) x250) (= (bvugt x250 (_ bv0 256)) x375)) (and (=> (not x375) x28) (=> (and x375 (and (= (not (= x270 (_ bv0 256))) x218) (bvule x41 (_ bv20282409603651670423947251286015 256)) (= x41 (x80 x173)) (= x173 (x323 (_ bv64 256) x73 (_ bv0 256))) (= x332 (not (= (_ bv0 256) x305))))) (and (=> (and (and (= x238 (_ bv0 256)) (= (= (_ bv0 256) x270) x355)) x218) (and (=> (and (= x331 (_ bv448 256)) x355) x191) (=> (and (= (= (_ bv0 256) x41) x85) (not x355)) (and (=> (and x85 (= x331 (_ bv448 256))) x191) (=> (and (and (and (= x112 (_ bv0 256)) (= (x309 x63) x269) (= (_ bv0 256) x369) (bvuge (_ bv20282409603651670423947251286015 256) x349) (= x7 (x360 x63)) (= (x114 x63) x281) (bvuge (_ bv4722366482869645213695 256) x281) (= x236 (= x30 (_ bv0 256))) (bvule x269 (_ bv3 256)) (= (x323 (_ bv64 256) x270 (_ bv0 256)) x63) (= x92 (bvudiv x41 (_ bv10000000000 256))) (bvuge (_ bv4722366482869645213695 256) x7) (= (x80 x63) x349) (= (_ bv672 256) x300)) (or (and (and (= x32 (bvadd x281 (bvneg x92))) (= x93 x7) (= x197 x32) (bvule x32 (_ bv4722366482869645213695 256))) (not x236)) (and (and (= x335 (bvadd (bvneg x92) x7)) (= x335 x93) (bvuge (_ bv4722366482869645213695 256) x335) (= x197 x281)) x236))) (not x85)) x10))))) (=> (and (not x218) (= (_ bv448 256) x342)) x196)))))))
(assert (not (x354 (x323 (_ bv64 256) x73 (_ bv71 256)))))
(assert (= (or x230 x2) x276))
(assert (= (x343 (x323 (_ bv64 256) x62 x60)) (x323 (_ bv64 256) x62 x60)))
(assert (= x265 (and x31 (not x332))))
(assert (x354 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (=> (= (= x332 x218) x333) (and (=> (not x333) (and (=> (and x332 (= x253 (= x30 (_ bv0 256)))) (and (=> (and x253 (= (= x3 (_ bv0 256)) x292)) (and (=> (and (and (or (and (= x68 (_ bv3 256)) x29) (and (= x68 x3) (not x29))) (= (= (_ bv2 256) x3) x29)) (not x292)) x87) (=> (and x292 (= (_ bv1 256) x101)) x267))) (=> (and (not x253) (= x317 (= x3 (_ bv0 256)))) (and (=> (and (and (or (and (= (_ bv3 256) x245) x274) (and (not x274) (= x3 x245))) (= (= x3 (_ bv1 256)) x274)) (not x317)) x249) (=> (and (= x100 (_ bv2 256)) x317) x21))))) (=> (and (not x332) (= x252 (= (_ bv0 256) x30))) (and (=> (and x252 (= (= x3 (_ bv1 256)) x315)) (and (=> (and (= (_ bv0 256) x379) x315) x311) (=> (and (and (= (= x3 (_ bv3 256)) x384) (or (and (= (_ bv2 256) x240) x384) (and (= x3 x240) (not x384)))) (not x315)) x172))) (=> (and (not x252) (= (= (_ bv2 256) x3) x352)) (and (=> (and (and (= x140 (= (_ bv3 256) x3)) (or (and x140 (= (_ bv1 256) x373)) (and (= x3 x373) (not x140)))) (not x352)) x72) (=> (and x352 (= (_ bv0 256) x11)) x213))))))) (=> x333 x20))) x248))
(assert (= x72 (=> (= x373 x11) x213)))
(assert (= (x285 (x323 (_ bv64 256) x73 (_ bv72 256))) x73))
(assert (= (_ bv64 256) (x200 (x323 (_ bv64 256) x14 x271))))
(assert (= x14 (x285 (x323 (_ bv64 256) x14 x271))))
(assert (= (x343 (_ bv3700653596 256)) (_ bv0 256)))
(assert (= x34 (and x297 x218)))
(assert (= (and (not x124) x330) x167))
(assert (not (x354 (x323 (_ bv64 256) x119 (_ bv60 256)))))
(assert (= (x343 (bvadd (_ bv1 256) x155)) (x343 x155)))
(assert (= (=> (and (= (x181 x307) x288) (bvule x125 (_ bv20282409603651670423947251286015 256)) (= x307 (x323 (_ bv64 256) x305 (_ bv0 256))) (bvuge (_ bv4722366482869645213695 256) x288) (bvule x91 (_ bv4722366482869645213695 256)) (= (x161 x307) x125) (= (x102 x307) x91)) x103) x12))
(assert (bvult (_ bv10000 256) (x323 (_ bv64 256) x73 (_ bv71 256))))
(assert (= (and (not x153) x370) x156))
(assert (not (x354 (x323 (_ bv64 256) x62 x60))))
(assert (= (x200 (x323 (_ bv64 256) x62 x60)) (_ bv64 256)))
(assert (= x119 (x285 (x323 (_ bv64 256) x119 (_ bv60 256)))))
(assert (= (or x39 x265) x359))
(assert (= (x343 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (not (x354 (x323 (_ bv64 256) x73 (_ bv0 256)))))
(assert (= x196 (and (=> (not x332) x372) (=> (and x332 (and (= x306 (_ bv0 256)) (= x25 (= x305 (_ bv0 256))))) (and (=> (and (and (= x209 (= (_ bv0 256) x204)) (= x204 (bvadd (_ bv0 256) (bvneg x41)))) (not x25)) (and (=> (and (and (and (bvuge (_ bv4722366482869645213695 256) x312) (= x312 (x188 x382)) (= (= x30 (_ bv0 256)) x1) (bvule x133 (_ bv20282409603651670423947251286015 256)) (= x130 (x48 x382)) (bvule x381 (_ bv4722366482869645213695 256)) (bvule x130 (_ bv3 256)) (= (x161 x382) x133) (= x139 (_ bv0 256)) (= (bvudiv x41 (_ bv10000000000 256)) x350) (= x51 (bvadd x342 (_ bv96 256))) (= (bvadd (_ bv128 256) x51) x193) (= x382 (x323 (_ bv64 256) x305 (_ bv0 256))) (= x105 (_ bv0 256)) (= (x147 x382) x381)) (or (and (and (= x117 x365) (= x365 (bvadd x312 x350)) (= x170 x381) (bvuge (_ bv4722366482869645213695 256) x365)) x1) (and (and (bvule x302 (_ bv4722366482869645213695 256)) (= x170 x302) (= x117 x312) (= (bvadd x381 x350) x302)) (not x1)))) (not x209)) x12) (=> x209 x103))) (=> x25 x103))))))
(assert (= (x323 (_ bv64 256) x14 x271) (x343 (x323 (_ bv64 256) x14 x271))))
(assert (= (x343 (x323 (_ bv64 256) x215 (_ bv60 256))) (x323 (_ bv64 256) x215 (_ bv60 256))))
(assert (=> (bvuge (_ bv10000 256) x116) (= (x343 x116) (_ bv0 256))))
(assert (= (x343 (_ bv1817583341 256)) (_ bv0 256)))
(assert (not (x354 (x323 (_ bv64 256) x14 x271))))
(assert (= x213 (=> (= x42 x11) x299)))
(assert (=> (bvule x49 (_ bv10000 256)) (= (_ bv0 256) (x343 x49))))
(assert (= x73 (x285 (x323 (_ bv64 256) x73 (_ bv71 256)))))
(assert (not (x354 (x323 (_ bv64 256) x49 (_ bv60 256)))))
(check-sat)
(exit)
