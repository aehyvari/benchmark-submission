(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x69 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x192 () Bool)
(declare-fun x296 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x204 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x122 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x268 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x267 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x224 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x4 () Bool)
(declare-fun x276 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x71 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x289 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x42 () Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x21 () Bool)
(declare-fun x104 () Bool)
(declare-fun x102 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x265 () Bool)
(declare-fun x260 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x291 () Bool)
(declare-fun x286 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x214 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x54 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x99 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x246 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x206 () Bool)
(declare-fun x193 () Bool)
(declare-fun x35 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x216 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x76 () Bool)
(declare-fun x34 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x83 () Bool)
(declare-fun x251 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x244 () Bool)
(declare-fun x37 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x173 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x58 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x100 ((_ BitVec 256)) Bool)
(declare-fun x20 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x67 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x207 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x96 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x73 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x152 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x36 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x282 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x107 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x200 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x8 () (_ BitVec 256))
(define-fun x135 ((x55 (_ BitVec 256)) (x40 (_ BitVec 256))) Bool (= x55 (bvudiv (bvmul x40 x55) x40)))
(define-fun x97 ((x55 (_ BitVec 256)) (x40 (_ BitVec 256))) Bool (= x55 (bvsdiv (bvmul x55 x40) x40)))
(define-fun x30 ((x55 (_ BitVec 256)) (x40 (_ BitVec 256))) Bool (= x55 (bvsdiv (bvmul x40 x55) x40)))
(define-fun x126 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x15 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x88 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x86 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x203 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x205 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x123 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x227 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x263 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x84 ((x252 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x271 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 x128) x148 (x216 x252)))
(define-fun x3 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 x288) x262 (x271 x252)))
(define-fun x159 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv128 256)) (_ bv1 256) (x126 x252)))
(define-fun x121 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv192 256)) (_ bv0 256) (x88 x252)))
(define-fun x184 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv224 256)) (_ bv0 256) (x203 x252)))
(define-fun x132 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x252) (_ bv0 256) (x123 x252)))
(define-fun x94 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv160 256)) (_ bv192 256) (x263 x252)))
(define-fun x91 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x252) x288 (x121 x252)))
(define-fun x26 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv320 256)) x266 (x184 x252)))
(define-fun x23 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv352 256)) x80 (x132 x252)))
(define-fun x111 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x252) (_ bv288 256) (x94 x252)))
(define-fun x47 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x281 x252) x139 (x3 x252)))
(define-fun x19 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 x288) x53 (x47 x252)))
(define-fun x87 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x208 x252) x254 (x19 x252)))
(define-fun x115 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x252) (_ bv1 256) (x15 x252)))
(define-fun x33 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv192 256)) (_ bv0 256) (x86 x252)))
(define-fun x209 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv224 256)) (_ bv0 256) (x205 x252)))
(define-fun x274 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv256 256)) (_ bv0 256) (x227 x252)))
(define-fun x239 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x252) (_ bv192 256) (x84 x252)))
(define-fun x63 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= x252 (_ bv288 256)) x288 (x33 x252)))
(define-fun x283 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x252) x118 (x209 x252)))
(define-fun x92 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x252) x80 (x274 x252)))
(define-fun x130 ((x252 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x252) (_ bv288 256) (x239 x252)))
(assert (= (x122 (x267 (_ bv64 256) x293 (_ bv60 256))) (_ bv60 256)))
(assert (= (x122 (x267 (_ bv64 256) x277 (_ bv2 256))) (_ bv2 256)))
(assert (x100 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (=> (bvule x277 (_ bv10000 256)) (= (x99 x277) (_ bv0 256))))
(assert (= x54 (=> (and (= x215 (bvudiv x229 x38)) (= x229 (bvmul x38 (_ bv1000000000000000000 256))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x125) (not (bvugt x51 (bvadd x212 x51))) (or x223 x225) (not (bvugt x124 x18)) (= x125 (bvmul x124 x218)) (= (bvadd x212 x51) x98) (x135 x218 x124) (= x98 x230) (= x225 (= (_ bv1000000000000000000 256) x215)) (bvuge x85 (_ bv1 256)) (bvuge x125 (_ bv0 256)) (= x51 (bvudiv x229 x85)) (= x223 (= x38 (_ bv0 256))) (= x124 (bvadd x18 (bvneg x202))) (= x38 x125)) x189)))
(assert (= (and x287 x1) x71))
(assert (= x293 (x207 (x267 (_ bv64 256) x293 (_ bv60 256)))))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x293 (_ bv60 256)))))
(assert (x100 (_ bv4294967295 256)))
(assert (= (x99 (x267 (_ bv64 256) x250 (_ bv0 256))) (x267 (_ bv64 256) x250 (_ bv0 256))))
(assert (= (x122 (x267 (_ bv64 256) x294 x8)) x8))
(assert (not (x100 (x267 (_ bv64 256) x250 (_ bv0 256)))))
(assert (bvugt (x267 (_ bv64 256) x294 (_ bv0 256)) (_ bv10000 256)))
(assert (= x294 (x207 (x267 (_ bv64 256) x294 (_ bv61 256)))))
(assert (=> (bvule x105 (_ bv10000 256)) (= (_ bv0 256) (x99 x105))))
(assert (= (x207 (x267 (_ bv64 256) x277 (_ bv2 256))) x277))
(assert (= (x122 (x267 (_ bv64 256) x294 (_ bv0 256))) (_ bv0 256)))
(assert (bvugt (x267 (_ bv64 256) x293 (_ bv60 256)) (_ bv10000 256)))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= (x267 (_ bv64 256) x28 (_ bv60 256)) (x99 (x267 (_ bv64 256) x28 (_ bv60 256)))))
(assert (= (and x166 (not x59)) x24))
(assert (= (and x70 x234) x42))
(assert (x100 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x267 (_ bv64 256) x250 (_ bv61 256)) (x99 (x267 (_ bv64 256) x250 (_ bv61 256)))))
(assert (= x246 (=> (and (= x52 (bvadd x256 (_ bv32 256))) (= x8 (bvadd x191 (_ bv1 256))) (x135 x57 x77) (= (x130 (_ bv160 256)) x256) (= x77 (bvadd (bvneg x14) x228)) (bvuge x226 (_ bv0 256)) (= x14 (x36 x160)) (= (x267 (_ bv64 256) x294 x8) x160) (= x255 (bvudiv x226 (_ bv1000000000000000000 256))) (= (x283 x52) x57) (= (not (bvugt x81 (_ bv1 256))) x290) (= x226 (bvmul x57 x77)) (= (x115 (_ bv128 256)) x81) (not (bvugt x77 x228)) (bvule x226 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))) (and (=> (= x176 x255) x251) x290))))
(assert (x100 (_ bv404098525 256)))
(assert (x100 (_ bv2167012380 256)))
(assert (= (_ bv0 256) (x99 (_ bv404098525 256))))
(assert (= x102 (and x193 x284)))
(assert (=> (bvuge (_ bv10000 256) x208) (= (x99 x208) (_ bv0 256))))
(assert (bvugt (x267 (_ bv64 256) x250 (_ bv61 256)) (_ bv10000 256)))
(assert (= x250 (x207 (x267 (_ bv64 256) x250 x74))))
(assert (bvugt (x267 (_ bv64 256) x28 (_ bv60 256)) (_ bv10000 256)))
(assert (= x104 (or x34 x96)))
(assert (= (x99 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (x267 (_ bv64 256) x293 (_ bv60 256)) (x99 (x267 (_ bv64 256) x293 (_ bv60 256)))))
(assert (= (x99 x249) (x99 (bvadd x249 (_ bv1 256)))))
(assert (= (x99 (bvadd (_ bv1 256) x280)) (x99 x280)))
(assert (= (x267 (_ bv64 256) x294 (_ bv0 256)) (x99 (x267 (_ bv64 256) x294 (_ bv0 256)))))
(assert (=> (bvule x150 (_ bv10000 256)) (= (_ bv0 256) (x99 x150))))
(assert (bvult (_ bv10000 256) (x267 (_ bv64 256) x294 x8)))
(assert (= (x99 (bvadd x141 (_ bv1 256))) (x99 x141)))
(assert (= (_ bv0 256) (x99 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (= x189 (=> (and (= x114 (x36 x213)) (= x235 (x159 (_ bv128 256))) (= (bvmul x133 x127) x62) (= (bvadd x230 (bvneg x114)) x127) (= (x26 x182) x133) (= (x267 (_ bv64 256) x250 x74) x213) (= (bvudiv x62 (_ bv1000000000000000000 256)) x181) (x135 x133 x127) (not (bvult x230 x127)) (bvuge x62 (_ bv0 256)) (= (bvadd (_ bv32 256) x297) x182) (bvule x62 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x297 (x111 (_ bv160 256))) (= (bvadd x141 (_ bv1 256)) x74) (= (not (bvult (_ bv1 256) x235)) x220)) (and (=> (= x181 x136) x93) x220))))
(assert (= (x99 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= x119 (and (not x37) x104)))
(assert (bvult (_ bv10000 256) (x267 (_ bv64 256) x294 (_ bv61 256))))
(assert (not (x100 (x267 (_ bv64 256) x28 (_ bv60 256)))))
(assert (= x175 (and (not x214) x270)))
(assert (x100 (_ bv1889567281 256)))
(assert (= (x207 (x267 (_ bv64 256) x294 x8)) x294))
(assert (x100 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x99 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (x267 (_ bv64 256) x294 x8) (x99 (x267 (_ bv64 256) x294 x8))))
(assert (= x289 (or x79 x71)))
(assert (= x28 (x207 (x267 (_ bv64 256) x28 (_ bv60 256)))))
(assert (= x193 (or x272 x24)))
(assert (=> (bvule x294 (_ bv10000 256)) (= (x99 x294) (_ bv0 256))))
(assert (not (x100 (x267 (_ bv64 256) x294 (_ bv61 256)))))
(assert (= (or x192 x5) x234))
(assert (= (x99 (x267 (_ bv64 256) x294 (_ bv61 256))) (x267 (_ bv64 256) x294 (_ bv61 256))))
(assert (= (and x214 x270) x145))
(assert (= (x58 (x267 (_ bv64 256) x250 (_ bv61 256))) (_ bv64 256)))
(assert (= (x99 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (=> (bvule x28 (_ bv10000 256)) (= (x99 x28) (_ bv0 256))))
(assert (not (x100 (x267 (_ bv64 256) x277 (_ bv2 256)))))
(assert (= (x99 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (not (x100 (x267 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x294 (_ bv0 256)))))
(assert (= true x16))
(assert (= x270 (and (not x70) x234)))
(assert (=> (bvule x281 (_ bv10000 256)) (= (_ bv0 256) (x99 x281))))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x294 x8))))
(assert (= (x267 (_ bv64 256) x250 x74) (x99 (x267 (_ bv64 256) x250 x74))))
(assert (= x250 (x207 (x267 (_ bv64 256) x250 (_ bv61 256)))))
(assert (= (=> (= x284 (ite x113 x113 (not (bvugt x164 x202)))) (and (=> (and x284 (= x230 x212)) x189) (=> (and (not x284) (and (or (and (not x1) (= x183 x18)) (and x1 (= x18 x164))) (= (bvult x164 x183) x1))) x54))) x106))
(assert (not x83))
(assert (= (and x158 x16) x166))
(assert (=> (bvule x250 (_ bv10000 256)) (= (_ bv0 256) (x99 x250))))
(assert (= (and x59 x166) x272))
(assert (= (or x145 x175) x76))
(assert (x100 (_ bv1289409798 256)))
(assert (x100 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x122 (x267 (_ bv64 256) x28 (_ bv60 256))) (_ bv60 256)))
(assert (= (x207 (x267 (_ bv64 256) x250 (_ bv0 256))) x250))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x250 x74))))
(assert (= (x58 (x267 (_ bv64 256) x250 (_ bv0 256))) (_ bv64 256)))
(assert (bvugt (x267 (_ bv64 256) x277 (_ bv2 256)) (_ bv10000 256)))
(assert (not (x100 (x267 (_ bv64 256) x250 (_ bv61 256)))))
(assert (= (x99 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x99 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (x99 x191) (x99 (bvadd x191 (_ bv1 256)))))
(assert (not (x100 (x267 (_ bv64 256) x250 x74))))
(assert (= x83 (=> (and (and (= x250 x194) (and (= x183 x129) (and (= x27 x262) (= x242 (x267 (_ bv64 256) x250 (_ bv0 256))) (= (x216 x128) x148) (= x128 x50) (= (x69 x242) x266) (= x103 x250) (bvule x266 (_ bv20282409603651670423947251286015 256)) (= (x159 (_ bv128 256)) x9) (= (x173 x288) x211) (= x158 (bvugt x9 (_ bv0 256))) (bvule (_ bv1 256) x211) (= x148 x17) (= x27 (x271 x288)) (= (_ bv128 256) x162) (= (_ bv2378104546 256) x142)))) (and (bvule x49 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x11 (bvule (_ bv0 256) x129) (not (= x288 x150)) (bvuge (_ bv4294967295 256) x233) (bvule x50 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x65 x150)) (bvule (_ bv0 256) x49) (bvuge x10 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x288) (bvuge x150 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x240) (bvuge x50 (_ bv0 256)) (= x243 (_ bv0 256)) (bvule (_ bv0 256) x154) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x129) (bvule x65 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x31 (_ bv0 256)) (= (bvugt (x173 x150) (_ bv0 256)) x11) (= (_ bv36 256) x197) (not (= x65 x288)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x108) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x195) (bvule (_ bv0 256) x240) x241 (bvule x201 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x196 (bvult (_ bv0 256) (x173 x65))) (= (bvult (_ bv0 256) (x173 x288)) x241) (bvuge x233 (_ bv0 256)) (= x10 x194) x196 (bvule x12 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x195 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x150) (bvuge x108 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x31) (bvule (_ bv0 256) x12) (bvuge x201 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x10) (bvuge x288 (_ bv1 256)) (bvule x154 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x65 (_ bv1 256)))) (and (=> (and (and (and (= x110 (bvadd (_ bv64 256) x147)) (= x249 (x267 (_ bv64 256) x293 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x218) (= x85 (x23 x110)) (= x293 (bvand x219 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x218 (_ bv0 256)) (= x218 (_ bv0 256)) (= x85 (_ bv0 256))) x59) (= x141 (bvadd (_ bv1 256) x249)) (= x202 (x268 x249)) (bvuge (_ bv340282366920938463463374607431768211455 256) x202) (= x147 (x111 (_ bv160 256))) (= x212 (x107 x141)) (= x218 (x204 x249)) (= (x91 x46) x219) (= (x111 (_ bv160 256)) x46)) (or (and x59 (= x59 x113)) (and (not x59) (= x113 (= x183 x202))))) x158) x106) (=> (and (= x136 (_ bv0 256)) (not x158)) x93)))))
(assert (= (and x174 x190) x192))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x28 (_ bv60 256)))))
(assert (bvugt (x267 (_ bv64 256) x105 (_ bv0 256)) (_ bv10000 256)))
(assert (not (x100 (x267 (_ bv64 256) x293 (_ bv60 256)))))
(assert (x100 (_ bv2378104546 256)))
(assert (= x20 (=> (= (ite x206 x206 (not (bvult x210 x164))) x70) (and (=> (and x70 (= x228 x138)) x246) (=> (and (not x70) (and (= (bvugt x137 x164) x214) (or (and (= x116 x164) x214) (and (not x214) (= x116 x137))))) x244)))))
(assert (x100 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (or x289 x102) x34))
(assert (= x5 (and (not x190) x174)))
(assert (=> (bvuge (_ bv10000 256) x288) (= (_ bv0 256) (x99 x288))))
(assert (= (and (not x284) x193) x287))
(assert (= (x122 (x267 (_ bv64 256) x105 (_ bv0 256))) (_ bv0 256)))
(assert (= x105 (x207 (x267 (_ bv64 256) x105 (_ bv0 256)))))
(assert (= x244 (=> (and (not (bvugt x68 (bvadd x68 x138))) (= x6 (bvadd x68 x138)) (= (bvudiv x172 x248) x149) (= (bvadd x116 (bvneg x210)) x180) (not (bvult x116 x180)) (bvule (_ bv0 256) x170) (= x172 (bvmul x248 (_ bv1000000000000000000 256))) (= x170 x248) (bvuge x275 (_ bv1 256)) (x135 x163 x180) (= x6 x228) (= (= (_ bv1000000000000000000 256) x149) x265) (= (bvmul x163 x180) x170) (or x265 x236) (bvule x170 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (= (_ bv0 256) x248) x236) (= (bvudiv x172 x275) x68)) x246)))
(assert (= (=> (and (= (bvuge x2 x178) x13) (= x2 x72) (= (bvadd x176 x186) x72) (= (x267 (_ bv64 256) x294 (_ bv61 256)) x261) (= (x224 x261) x186) (not (bvugt x186 (bvadd x186 x176)))) x13) x251))
(assert (= x294 (x207 (x267 (_ bv64 256) x294 (_ bv0 256)))))
(assert (= x93 (=> (and (and (= x131 (_ bv4 256)) (= (_ bv404098525 256) x146) (= (_ bv36 256) x143) (= x10 x282) (= (x173 x288) x169) (= x35 x178) (= x247 (x224 x78)) (= x35 (bvadd x247 x136)) (= x78 (x267 (_ bv64 256) x250 (_ bv61 256))) (not (bvugt x247 (bvadd x136 x247))) (bvule (_ bv1 256) x169) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x80)) (and (and (and (and (= x277 x168) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x101) (= (x73 x217) x151) (bvuge x101 (_ bv4 256)) x45 (= x288 x277) (= (_ bv1889567281 256) x66) (= (bvule x231 x151) x45) (= x217 (x267 (_ bv64 256) x277 (_ bv2 256))) (= (x173 x150) x264) (bvule (_ bv1 256) x264)) (and (and (bvuge x95 (_ bv1 256)) (= x43 (x47 x288)) (= (_ bv36 256) x167) (= (_ bv6 256) x7) (= x177 x139) (bvuge (_ bv5 256) x253) (= (x173 x288) x95) (= x43 x53) (= (_ bv2167012380 256) x89) (= (x3 x281) x139) (= x281 x50) (= x156 x10) (= x198 (_ bv6 256))) (and (= x156 x294) (and (= x137 x129) (and (= (x115 (_ bv128 256)) x60) (= x254 x187) (= x273 (x87 x288)) (bvule (_ bv1 256) x200) (= x90 x294) (= (x19 x208) x254) (= (x173 x288) x200) (= x161 (x267 (_ bv64 256) x294 (_ bv0 256))) (= x44 (_ bv128 256)) (= (bvult (_ bv0 256) x60) x37) (= x208 x50) (bvuge (_ bv20282409603651670423947251286015 256) x118) (= (_ bv2378104546 256) x292) (= x118 (x69 x161)) (= x75 x273)))))) (and (= x260 (_ bv1289409798 256)) (= x32 x80) (bvule x179 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x32 x134) (= x157 (x173 x288)) (= (_ bv36 256) x258) (bvuge x179 (_ bv1 256)) (= x22 x32) (= (bvudiv x257 (_ bv1000000000000000000 256)) x134) (bvuge x157 (_ bv1 256)) (= (bvmul x32 (_ bv1000000000000000000 256)) x257) (= (bvudiv x257 x179) x231))) (and (= x282 x105) (= (_ bv4 256) x140) (= (_ bv36 256) x117) (= (x173 x288) x237) (bvuge x237 (_ bv1 256)) (= (_ bv404098525 256) x188) (bvuge (_ bv20282409603651670423947251286015 256) x82) (= (x267 (_ bv64 256) x105 (_ bv0 256)) x39) (bvule (_ bv1 256) x199) (= x120 (bvuge x80 x82)) x120 (= x153 (_ bv1889567281 256)) (= x82 (x69 x39)) (= x199 (x173 x288)) (= x25 x105)))) (and (=> (and (= (_ bv0 256) x176) (not x37)) x251) (=> (and x37 (and (and (= (x130 (_ bv160 256)) x295) (bvuge (_ bv340282366920938463463374607431768211455 256) x210) (= (x267 (_ bv64 256) x28 (_ bv60 256)) x280) (= (bvadd (_ bv64 256) x295) x185) (= x275 (x92 x185)) (= (x204 x280) x163) (= x112 (x130 (_ bv160 256))) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x259) x28) (= (x107 x191) x138) (= (ite (= x163 (_ bv0 256)) (= (_ bv0 256) x163) (= (_ bv0 256) x275)) x190) (= (bvadd x280 (_ bv1 256)) x191) (= x210 (x268 x280)) (= x259 (x63 x112)) (bvule x163 (_ bv340282366920938463463374607431768211455 256))) (or (and (= x206 x190) x190) (and (= x206 (= x210 x137)) (not x190))))) x20)))))
(assert (= (x99 (_ bv2378104546 256)) (_ bv0 256)))
(assert (= (x99 (_ bv2167012380 256)) (_ bv0 256)))
(assert (= (x122 (x267 (_ bv64 256) x250 (_ bv61 256))) (_ bv61 256)))
(assert (x100 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (and x287 (not x1)) x79))
(assert (= (x99 (x267 (_ bv64 256) x105 (_ bv0 256))) (x267 (_ bv64 256) x105 (_ bv0 256))))
(assert (x100 (_ bv20282409603651670423947251286015 256)))
(assert (=> (bvule x293 (_ bv10000 256)) (= (x99 x293) (_ bv0 256))))
(assert (not (x100 (x267 (_ bv64 256) x294 x8))))
(assert (= (_ bv0 256) (x122 (x267 (_ bv64 256) x250 (_ bv0 256)))))
(assert (= (_ bv0 256) (x99 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (bvult (_ bv10000 256) (x267 (_ bv64 256) x250 x74)))
(assert (= x174 (and x37 x104)))
(assert (=> (bvule x65 (_ bv10000 256)) (= (x99 x65) (_ bv0 256))))
(assert (= (x267 (_ bv64 256) x277 (_ bv2 256)) (x99 (x267 (_ bv64 256) x277 (_ bv2 256)))))
(assert (= x96 (and (not x158) x16)))
(assert (= (x99 (_ bv1289409798 256)) (_ bv0 256)))
(assert (= (x122 (x267 (_ bv64 256) x294 (_ bv61 256))) (_ bv61 256)))
(assert (=> (bvule x128 (_ bv10000 256)) (= (x99 x128) (_ bv0 256))))
(assert (x100 (_ bv1000000000000000000 256)))
(assert (bvugt (x267 (_ bv64 256) x250 (_ bv0 256)) (_ bv10000 256)))
(assert (= (or x76 x42) x144))
(assert (not (x100 (x267 (_ bv64 256) x294 (_ bv0 256)))))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x277 (_ bv2 256)))))
(assert (= x74 (x122 (x267 (_ bv64 256) x250 x74))))
(assert (= (_ bv64 256) (x58 (x267 (_ bv64 256) x294 (_ bv61 256)))))
(assert (= (or x119 x144) x285))
(assert (= (x99 (_ bv1000000000000000000 256)) (_ bv0 256)))
(check-sat)
(exit)
