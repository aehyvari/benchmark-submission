(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x44 ((_ BitVec 256)) Bool)
(declare-fun x37 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x84 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x2 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x97 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x67 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x3 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x41 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x26 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x6 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x102 () (_ BitVec 256))
(define-fun x46 ((x69 (_ BitVec 256)) (x11 (_ BitVec 256))) Bool (= x69 (bvudiv (bvmul x11 x69) x11)))
(define-fun x4 ((x69 (_ BitVec 256)) (x11 (_ BitVec 256))) Bool (= x69 (bvsdiv (bvmul x69 x11) x11)))
(define-fun x61 ((x69 (_ BitVec 256)) (x11 (_ BitVec 256))) Bool (= x69 (bvsdiv (bvmul x11 x69) x11)))
(define-fun x50 ((x60 (_ BitVec 256))) (_ BitVec 256) (ite (= x60 x48) x43 (x84 x60)))
(define-fun x17 ((x60 (_ BitVec 256))) (_ BitVec 256) (ite (= x60 x47) x63 (x67 x60)))
(define-fun x75 ((x60 (_ BitVec 256))) (_ BitVec 256) (ite (= x60 x23) x53 (x17 x60)))
(assert (= x59 (=> (and (and (and (and (= x56 x1) (and (and (and (= (x6 x36) x12) (= x82 (bvule x54 x8)) (= x8 (x75 x65)) (= x65 (x37 (_ bv64 256) x93 (_ bv2 256))) (= x93 x91) (= x18 (_ bv1889567281 256)) (= x93 x9) (bvule (_ bv1 256) x12)) (and (= x66 x100) (= x57 (bvmul (_ bv1000000000000000000 256) x100)) (bvule (_ bv1 256) x94) (= x21 (_ bv36 256)) (= (x6 x9) x94) (= x40 x100) (= (bvudiv x57 x7) x54) (= x72 (_ bv1289409798 256)) (= x100 x85) (= x40 (bvudiv x57 (_ bv1000000000000000000 256))))) (and (= (bvadd x32 x90) x53) (not (bvult x95 x63)) (= (x50 x36) x81) (not (bvult x95 x90)) (= (_ bv4 256) x10) (= x24 (x37 (_ bv64 256) x1 (_ bv2 256))) (= x25 (x37 (_ bv64 256) x45 (_ bv2 256))) (= x15 (_ bv36 256)) (= x96 x19) (= x81 x38) (= x32 (x17 x25)) (= x92 x101) (= x43 x89) (= (bvadd x95 (bvneg x90)) x63) (= x102 (_ bv404098525 256)) (= (x6 x36) x26) (= x95 (x67 x24)) (not (bvult (bvadd x32 x90) x32)) (not (bvult (bvadd x90 x32) x32)) (bvule (_ bv1 256) x51) (bvuge x26 (_ bv1 256)) (= x47 (x37 (_ bv64 256) x1 (_ bv2 256))) (= x48 x56) (= (_ bv2835717307 256) x62) (= x23 (x37 (_ bv64 256) x45 (_ bv2 256))) (= x43 (x84 x48)) (= x51 (x6 x9))))) (and (= (_ bv1889567281 256) x64) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x45) (= (x41 (_ bv4 256)) x45) x34 (= x45 x92) (= x35 x9) (= (bvule x70 x52) x34) (= (x37 (_ bv64 256) x35 (_ bv2 256)) x42) (= (x41 (_ bv36 256)) x90) (= x35 x5) (= x33 (x6 x36)) (= x96 x90) (= x52 (x67 x42)) (bvuge x33 (_ bv1 256)))) (and (bvule x7 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x86 (bvudiv x58 (_ bv1000000000000000000 256))) (= (_ bv36 256) x88) (= x70 (bvudiv x58 x7)) (= (x6 x9) x99) (= (bvmul x29 (_ bv1000000000000000000 256)) x58) (= (_ bv1289409798 256) x68) (= x29 x66) (= x29 x86) (bvule (_ bv1 256) x99) (= x87 x29) (bvule (_ bv1 256) x7))) (and (bvule x77 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x74) x16 (= x16 (bvugt (x6 x9) (_ bv0 256))) (bvuge x28 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x36) x76 (= (bvugt (x6 x36) (_ bv0 256)) x13) (= x20 (_ bv36 256)) (= x76 (bvult (_ bv0 256) (x6 x22))) (bvule x98 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x56 (_ bv0 256)) (bvuge x22 (_ bv1 256)) (bvule x49 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x66 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (bvule x73 (_ bv4294967295 256)) (bvule (_ bv1 256) x80) (= (_ bv4 256) x79) (bvule x9 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x73) (bvuge x30 (_ bv0 256)) (bvuge x27 (_ bv0 256)) (bvuge x39 (_ bv0 256)) (not (= x22 x9)) (bvuge x71 (_ bv0 256)) (bvule x22 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x36 x9)) (bvule x27 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x77) (= x80 (x6 x9)) (bvule (_ bv1 256) x9) (bvule (_ bv1 256) x36) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x39) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x83) x13 (= x78 (_ bv0 256)) (bvule x30 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x74) (not (= x36 x22)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x28) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x56) (= (_ bv404098525 256) x14) (bvule (_ bv0 256) x98) (bvuge x83 (_ bv68 256)) (bvule x71 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x49))) x82)))
(assert (x44 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= (_ bv0 256) (x97 (_ bv115792089237316195423570985008687907853269984665640564039457 256))))
(assert (=> (bvule x93 (_ bv10000 256)) (= (_ bv0 256) (x97 x93))))
(assert (= (_ bv0 256) (x97 (_ bv404098525 256))))
(assert (x44 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (bvult (_ bv10000 256) (x37 (_ bv64 256) x93 (_ bv2 256))))
(assert (= (_ bv0 256) (x97 (_ bv1889567281 256))))
(assert (= (x97 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x3 (x37 (_ bv64 256) x35 (_ bv2 256))) (_ bv2 256)))
(assert (x44 (_ bv1000000000000000000 256)))
(assert (= (x3 (x37 (_ bv64 256) x45 (_ bv2 256))) (_ bv2 256)))
(assert (= (x97 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x37 (_ bv64 256) x35 (_ bv2 256)) (x97 (x37 (_ bv64 256) x35 (_ bv2 256)))))
(assert (= (x31 (x37 (_ bv64 256) x1 (_ bv2 256))) (_ bv64 256)))
(assert (= (_ bv64 256) (x31 (x37 (_ bv64 256) x45 (_ bv2 256)))))
(assert (= x45 (x2 (x37 (_ bv64 256) x45 (_ bv2 256)))))
(assert (= x93 (x2 (x37 (_ bv64 256) x93 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x35) (= (_ bv0 256) (x97 x35))))
(assert (= (_ bv64 256) (x31 (x37 (_ bv64 256) x35 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x37 (_ bv64 256) x35 (_ bv2 256))))
(assert (bvult (_ bv10000 256) (x37 (_ bv64 256) x1 (_ bv2 256))))
(assert (x44 (_ bv1889567281 256)))
(assert (x44 (_ bv4294967295 256)))
(assert (=> (bvule x48 (_ bv10000 256)) (= (x97 x48) (_ bv0 256))))
(assert (= (x97 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x97 (_ bv1289409798 256))))
(assert (bvugt (x37 (_ bv64 256) x45 (_ bv2 256)) (_ bv10000 256)))
(assert (not (x44 (x37 (_ bv64 256) x93 (_ bv2 256)))))
(assert (= (_ bv0 256) (x97 (_ bv2835717307 256))))
(assert (x44 (_ bv1289409798 256)))
(assert (=> (bvuge (_ bv10000 256) x22) (= (_ bv0 256) (x97 x22))))
(assert (= (_ bv2 256) (x3 (x37 (_ bv64 256) x93 (_ bv2 256)))))
(assert (x44 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (=> (bvule x9 (_ bv10000 256)) (= (x97 x9) (_ bv0 256))))
(assert (= (x37 (_ bv64 256) x45 (_ bv2 256)) (x97 (x37 (_ bv64 256) x45 (_ bv2 256)))))
(assert (= (x97 (x37 (_ bv64 256) x93 (_ bv2 256))) (x37 (_ bv64 256) x93 (_ bv2 256))))
(assert (x44 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (not x59))
(assert (x44 (_ bv404098525 256)))
(assert (=> (bvule x45 (_ bv10000 256)) (= (_ bv0 256) (x97 x45))))
(assert (= (x2 (x37 (_ bv64 256) x35 (_ bv2 256))) x35))
(assert (not (x44 (x37 (_ bv64 256) x45 (_ bv2 256)))))
(assert (= (x97 (_ bv4294967295 256)) (_ bv0 256)))
(assert (=> (bvule x36 (_ bv10000 256)) (= (_ bv0 256) (x97 x36))))
(assert (x44 (_ bv2835717307 256)))
(assert (= (x37 (_ bv64 256) x1 (_ bv2 256)) (x97 (x37 (_ bv64 256) x1 (_ bv2 256)))))
(assert (= x1 (x2 (x37 (_ bv64 256) x1 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x1) (= (_ bv0 256) (x97 x1))))
(assert (not (x44 (x37 (_ bv64 256) x35 (_ bv2 256)))))
(assert (= (x31 (x37 (_ bv64 256) x93 (_ bv2 256))) (_ bv64 256)))
(assert (= (x97 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= true x55))
(assert (x44 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (_ bv2 256) (x3 (x37 (_ bv64 256) x1 (_ bv2 256)))))
(assert (= (_ bv0 256) (x97 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (not (x44 (x37 (_ bv64 256) x1 (_ bv2 256)))))
(check-sat)
(exit)
