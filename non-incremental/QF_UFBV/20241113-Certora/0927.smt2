(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x70 () Bool)
(declare-fun x183 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x341 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x82 () Bool)
(declare-fun x172 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x121 () Bool)
(declare-fun x244 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x159 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x227 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x265 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x344 () Bool)
(declare-fun x92 () (_ BitVec 256))
(declare-fun x206 () Bool)
(declare-fun x333 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x99 () Bool)
(declare-fun x264 () Bool)
(declare-fun x214 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x347 () Bool)
(declare-fun x203 () Bool)
(declare-fun x93 () Bool)
(declare-fun x151 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x64 () Bool)
(declare-fun x325 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x266 () Bool)
(declare-fun x112 () Bool)
(declare-fun x52 () Bool)
(declare-fun x288 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x279 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x87 () Bool)
(declare-fun x293 () Bool)
(declare-fun x152 () Bool)
(declare-fun x41 () Bool)
(declare-fun x150 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x95 () Bool)
(declare-fun x79 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x301 () Bool)
(declare-fun x86 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x335 () Bool)
(declare-fun x224 () Bool)
(declare-fun x295 () Bool)
(declare-fun x246 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x331 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x81 () Bool)
(declare-fun x297 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x226 () Bool)
(declare-fun x323 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x329 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x349 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x251 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x260 () Bool)
(declare-fun x71 ((_ BitVec 256)) Bool)
(declare-fun x111 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x252 () Bool)
(declare-fun x215 () Bool)
(declare-fun x137 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x324 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x287 () Bool)
(declare-fun x174 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x182 () Bool)
(declare-fun x146 () Bool)
(declare-fun x120 () Bool)
(declare-fun x108 () Bool)
(declare-fun x268 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x314 () Bool)
(declare-fun x310 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x299 () Bool)
(declare-fun x340 () (_ BitVec 256))
(declare-fun x309 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x2 () Bool)
(declare-fun x336 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x334 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x237 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x162 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x321 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x255 () Bool)
(declare-fun x33 () Bool)
(declare-fun x166 () Bool)
(declare-fun x342 () (_ BitVec 256))
(declare-fun x327 () Bool)
(declare-fun x11 () Bool)
(declare-fun x180 () Bool)
(declare-fun x98 () Bool)
(declare-fun x139 () Bool)
(declare-fun x140 () Bool)
(declare-fun x313 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x186 () Bool)
(declare-fun x320 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x13 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x193 () Bool)
(declare-fun x231 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x339 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x31 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x300 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x317 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x353 () Bool)
(declare-fun x248 () Bool)
(declare-fun x338 () Bool)
(declare-fun x46 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x66 () Bool)
(declare-fun x254 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x311 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x118 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x332 () (_ BitVec 256))
(declare-fun x259 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x197 () Bool)
(declare-fun x189 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x19 () Bool)
(declare-fun x256 () Bool)
(declare-fun x292 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x345 () (_ BitVec 256))
(declare-fun x308 () Bool)
(declare-fun x343 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x322 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x230 () Bool)
(declare-fun x85 () Bool)
(declare-fun x83 () Bool)
(declare-fun x36 () Bool)
(declare-fun x38 () Bool)
(declare-fun x27 () Bool)
(declare-fun x47 () Bool)
(declare-fun x96 () Bool)
(declare-fun x351 () Bool)
(declare-fun x35 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x350 () Bool)
(declare-fun x181 () Bool)
(declare-fun x161 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x195 () Bool)
(declare-fun x209 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x348 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x346 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x30 () Bool)
(declare-fun x328 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x241 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x326 () (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x17 () Bool)
(declare-fun x261 () Bool)
(declare-fun x94 () Bool)
(declare-fun x294 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x304 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x91 () Bool)
(declare-fun x236 () Bool)
(declare-fun x50 () Bool)
(declare-fun x211 () Bool)
(declare-fun x60 () Bool)
(declare-fun x225 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x32 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x319 () Bool)
(declare-fun x238 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x263 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x208 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x113 () Bool)
(declare-fun x245 () Bool)
(declare-fun x102 () Bool)
(declare-fun x168 () Bool)
(declare-fun x240 () Bool)
(define-fun x305 ((x280 (_ BitVec 256)) (x282 (_ BitVec 256))) Bool (= x280 (bvudiv (bvmul x282 x280) x282)))
(define-fun x178 ((x280 (_ BitVec 256)) (x282 (_ BitVec 256))) Bool (= x280 (bvsdiv (bvmul x280 x282) x282)))
(define-fun x117 ((x280 (_ BitVec 256)) (x282 (_ BitVec 256))) Bool (= x280 (bvsdiv (bvmul x282 x280) x282)))
(define-fun x131 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x163 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x250 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x267 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x315 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x134 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x169 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x176 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x3 ((x306 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x352 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x69) x331 (x237 x306)))
(define-fun x272 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x24) x228 (x227 x306)))
(define-fun x253 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x15 (x227 x306) (ite x119 (x227 x306) (ite x113 (x227 x306) (x272 x306)))))
(define-fun x285 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x164) x55 (x253 x306)))
(define-fun x316 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x127 (x253 x306) (ite x84 (x253 x306) (ite x350 (x253 x306) (x285 x306)))))
(define-fun x26 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x133 x306) x10 (x316 x306)))
(define-fun x233 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x224 (ite x180 (x316 x306) (x26 x306)) (x227 x306)))
(define-fun x54 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x24 x306) x124 (x244 x306)))
(define-fun x153 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x15 (x244 x306) (ite x119 (x244 x306) (ite x113 (x244 x306) (x54 x306)))))
(define-fun x318 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x24 x306) x333 (x214 x306)))
(define-fun x44 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x24) x342 (x318 x306)))
(define-fun x136 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x15 (x214 x306) (ite x119 (x214 x306) (ite x113 (x214 x306) (x44 x306)))))
(define-fun x216 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x24 x306) x22 (x300 x306)))
(define-fun x289 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x24) x101 (x216 x306)))
(define-fun x258 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x15 (x300 x306) (ite x119 (x300 x306) (ite x113 (x300 x306) (x289 x306)))))
(define-fun x202 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x164) x273 (x258 x306)))
(define-fun x7 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x164) x303 (x202 x306)))
(define-fun x67 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x127 (x258 x306) (ite x84 (x258 x306) (ite x350 (x258 x306) (x7 x306)))))
(define-fun x149 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x164 x306) x213 (x136 x306)))
(define-fun x201 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x164) x270 (x149 x306)))
(define-fun x249 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite x127 (x136 x306) (ite x84 (x136 x306) (ite x350 (x136 x306) (x201 x306)))))
(define-fun x192 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x306 x133) x345 (x67 x306)))
(define-fun x330 ((x306 (_ BitVec 256))) (_ BitVec 256) (ite (= x133 x306) x269 (x249 x306)))
(assert (= (x241 (x336 (_ bv64 256) x4 (_ bv71 256))) (_ bv64 256)))
(assert (not (x71 (x336 (_ bv64 256) x322 (_ bv0 256)))))
(assert (= (x251 (x336 (_ bv64 256) x4 (_ bv71 256))) x4))
(assert (= (=> (and (bvuge (_ bv20282409603651670423947251286015 256) x55) (= x270 (x149 x164)) (= (x336 (_ bv64 256) x322 (_ bv0 256)) x164) (= x303 (x202 x164)) (bvuge (_ bv4722366482869645213695 256) x303) (bvule x270 (_ bv4722366482869645213695 256)) (= (x253 x164) x55)) x286) x103))
(assert (= (x118 (x336 (_ bv64 256) x271 (_ bv0 256))) (x336 (_ bv64 256) x271 (_ bv0 256))))
(assert (=> (bvule x179 (_ bv10000 256)) (= (x118 x179) (_ bv0 256))))
(assert (= (and (not x32) x90) x154))
(assert (=> (bvule x271 (_ bv10000 256)) (= (x118 x271) (_ bv0 256))))
(assert (= (and x188 (not x157)) x146))
(assert (= x108 (or x348 x146)))
(assert (x71 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= x91 (and (not x138) x152)))
(assert (= x99 (and (not x210) x11)))
(assert (bvugt (x336 (_ bv64 256) x271 (_ bv0 256)) (_ bv10000 256)))
(assert (= (or x87 x329) x142))
(assert (= (or x83 x60) x287))
(assert (= x238 (and x36 (not x263))))
(assert (= x292 (and x130 x344)))
(assert (= x329 (and x91 (not x308))))
(assert (= (and x292 x240) x140))
(assert (= (or x293 x47) x60))
(assert (= (or x84 x311 x350) x209))
(assert (= x33 (=> (and (bvule x101 (_ bv4722366482869645213695 256)) (= x177 (_ bv768 256)) (bvuge (_ bv4722366482869645213695 256) x342) (= x342 (x318 x24)) (= x101 (x216 x24)) (= x24 (x336 (_ bv64 256) x271 (_ bv0 256))) (bvule x228 (_ bv20282409603651670423947251286015 256)) (= x228 (x227 x24))) x96)))
(assert (= (x118 (_ bv10000000000 256)) (_ bv0 256)))
(assert (= x139 (and x208 x32)))
(assert (= x286 x290))
(assert (= (x118 (_ bv3700653596 256)) (_ bv0 256)))
(assert (not (x71 (x336 (_ bv64 256) x4 (_ bv71 256)))))
(assert (not (x71 (x336 (_ bv64 256) x4 (_ bv0 256)))))
(assert (= (and (not x240) x292) x66))
(assert (= (x336 (_ bv64 256) x4 (_ bv71 256)) (x118 (x336 (_ bv64 256) x4 (_ bv71 256)))))
(assert (= x112 (and x263 x36)))
(assert (= x159 x181))
(assert (= (or x15 x170) x208))
(assert (not (x71 (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (and (not x321) x53) x295))
(assert (= (x336 (_ bv64 256) x322 (_ bv0 256)) (x118 (x336 (_ bv64 256) x322 (_ bv0 256)))))
(assert (=> (bvule x69 (_ bv10000 256)) (= (_ bv0 256) (x118 x69))))
(assert (= (x265 (x336 (_ bv64 256) x4 (_ bv71 256))) (_ bv71 256)))
(assert (x71 (_ bv10000000000 256)))
(assert (= (and x319 x139) x350))
(assert (bvugt (x336 (_ bv64 256) x4 (_ bv0 256)) (_ bv10000 256)))
(assert (= (x265 (x336 (_ bv64 256) x4 (_ bv72 256))) (_ bv72 256)))
(assert (= (_ bv0 256) (x265 (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= x160 (and x327 (not x46))))
(assert (= (=> (and (= x173 (x330 x133)) (= (x336 (_ bv64 256) x4 (_ bv0 256)) x133) (= x10 (x316 x133)) (= x317 (x192 x133)) (bvule x317 (_ bv4722366482869645213695 256)) (bvuge (_ bv4722366482869645213695 256) x173) (bvule x10 (_ bv20282409603651670423947251286015 256))) x181) x17))
(assert (= x130 true))
(assert (= (and (not x150) x314) x206))
(assert (= (and x351 (not x156)) x11))
(assert (= x255 (=> (= x49 x20) x215)))
(assert (= (=> (and (and (and (= x220 (x294 (_ bv4 256))) (= x341 (x294 (_ bv36 256))) (bvule x341 (_ bv1 256)) (= (x246 x179) x89) (= x92 (_ bv0 256)) (= x349 (_ bv1889567281 256)) (bvuge x89 (_ bv1 256)) (= x220 x296) (= (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256)) x229) (bvule x220 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x227 x229) x92) (= x100 x341) (= x63 (_ bv0 256)) (= (_ bv0 256) x340)) (and (= x105 x4) (and (= (= x341 (_ bv0 256)) x344) (= x331 (x237 x69)) (= x302 (x246 x179)) (= (x214 x155) x269) (= x235 (x244 x155)) (bvuge (_ bv20282409603651670423947251286015 256) x57) (= x155 (x336 (_ bv64 256) x4 (_ bv0 256))) (= x257 x100) (= x322 (ite (= x4 x220) (_ bv0 256) x220)) (= x48 x296) (bvule x269 (_ bv4722366482869645213695 256)) (= x115 (x352 x179)) (= x58 x115) (= x167 (_ bv3700653596 256)) (= x69 x105) (bvule x345 (_ bv4722366482869645213695 256)) (bvule (_ bv1 256) x302) (bvule x235 (_ bv3 256)) (= x196 (_ bv352 256)) (= x331 x8) (= x57 (x227 x155)) (= x345 (x300 x155))))) (and (bvule x223 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x42) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x291) (bvule (_ bv0 256) x73) (= (bvugt (x246 x179) (_ bv0 256)) x337) x337 (bvule (_ bv68 256) x45) (bvuge x223 (_ bv0 256)) (= (_ bv0 256) x323) (bvuge x207 (_ bv0 256)) (bvule (_ bv0 256) x88) (bvule (_ bv1 256) x56) (= (bvugt (x246 x56) (_ bv0 256)) x259) (bvule x45 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge x179 (_ bv1 256)) (bvule (_ bv0 256) x105) (bvule x105 (_ bv1461501637330902918203684832716283019655932542975 256)) x259 (bvule x309 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x207 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x73) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x179) (bvule (_ bv0 256) x309) (bvule (_ bv0 256) x276) (bvule x56 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x291) (bvuge x313 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x313) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x88) (not (= x56 x179)) (bvule x278 (_ bv4294967295 256)) (bvuge x42 (_ bv0 256)) (bvuge x278 (_ bv0 256)) (= x283 (_ bv36 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x276))) (and (=> (and (and (or (and (= x110 (_ bv0 256)) x240) (and (not x240) (and (= x147 x110) (= (x304 x12) x147) (= (x336 (_ bv64 256) x4 (_ bv71 256)) x12) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x147)))) (and (= x332 (bvand x235 (_ bv1 256))) (= (= x332 (_ bv0 256)) x240))) x344) x37) (=> (and (and (or (and (= (_ bv0 256) x128) x157) (and (and (bvule x205 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x205 x128) (= (x336 (_ bv64 256) x4 (_ bv72 256)) x221) (= x205 (x231 x221))) (not x157))) (= (bvult x235 (_ bv2 256)) x157)) (not x344)) x299))) x182))
(assert (= (or x301 x236) x311))
(assert (= (or x50 x254) x122))
(assert (= x70 (and x138 x152)))
(assert (= (x251 (x336 (_ bv64 256) x271 (_ bv0 256))) x271))
(assert (= (x251 (x336 (_ bv64 256) x322 (_ bv0 256))) x322))
(assert (= x161 (or x116 x65)))
(assert (= x339 (and x295 (not x121))))
(assert (= x4 (x251 (x336 (_ bv64 256) x4 (_ bv72 256)))))
(assert (= x13 (=> (= x135 x144) x218)))
(assert (= x38 (=> (= x225 x20) x215)))
(assert (= (x118 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= x254 (or x160 x261)))
(assert (= (or x140 x66) x141))
(assert (= (=> (and (= x150 (bvult (_ bv0 256) x343)) (= (bvadd x322 (bvneg x271)) x343)) (and (=> (and (and (= x32 (not (= (_ bv0 256) x322))) (= x123 (x227 x185)) (= x23 (not (= x271 (_ bv0 256)))) (= x185 (x336 (_ bv64 256) x4 (_ bv0 256))) (bvuge (_ bv20282409603651670423947251286015 256) x123)) x150) (and (=> (and (not x23) (= (_ bv448 256) x80)) x95) (=> (and (and (= x321 (= x271 (_ bv0 256))) (= (_ bv0 256) x175)) x23) (and (=> (and (= x121 (= (_ bv0 256) x123)) (not x321)) (and (=> (and (= (_ bv448 256) x177) x121) x96) (=> (and (and (or (and (not x211) (and (= (bvadd x219 (bvneg x346)) x106) (= x143 x333) (= x106 x22) (bvuge (_ bv4722366482869645213695 256) x106))) (and x211 (and (= x219 x22) (= x172 (bvadd (bvneg x346) x143)) (= x333 x172) (bvuge (_ bv4722366482869645213695 256) x172)))) (and (= (_ bv672 256) x28) (= x143 (x214 x40)) (= x124 (x244 x40)) (= x243 (x227 x40)) (= (x300 x40) x219) (= (x336 (_ bv64 256) x271 (_ bv0 256)) x40) (= x262 (_ bv0 256)) (bvuge (_ bv20282409603651670423947251286015 256) x243) (bvuge (_ bv3 256) x124) (= (bvudiv x123 (_ bv10000000000 256)) x346) (bvule x219 (_ bv4722366482869645213695 256)) (bvuge (_ bv4722366482869645213695 256) x143) (= (= (_ bv0 256) x341) x211) (= (_ bv0 256) x277))) (not x121)) x33))) (=> (and (= (_ bv448 256) x177) x321) x96))))) (=> (not x150) x159))) x232))
(assert (bvult (_ bv10000 256) (x336 (_ bv64 256) x322 (_ bv0 256))))
(assert (x71 (_ bv3700653596 256)))
(assert (= x90 (and x93 (not x165))))
(assert (= x199 (and x260 x151)))
(assert (= (_ bv0 256) (x251 (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (=> (= x125 x135) x17) x218))
(assert (= (and x157 x188) x348))
(assert (= (_ bv0 256) (x118 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= x94 (and (not x51) x52)))
(assert (= (and x52 x51) x203))
(assert (= x27 (=> (= x326 x49) x255)))
(assert (= (and x59 x25) x84))
(assert (= (or x195 x200) x47))
(assert (bvult (_ bv10000 256) (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256))))
(assert (= (and x210 x11) x6))
(assert (= (and x154 (not x98)) x151))
(assert (= (=> (= x325 x68) x353) x256))
(assert (= x327 (and x1 (not x168))))
(assert (= x314 (or x141 x108)))
(assert (= x159 (=> (and (and (bvuge (_ bv20282409603651670423947251286015 256) x107) (= x145 (_ bv0 256)) (= x137 (= (_ bv0 256) x107)) (= (_ bv1889567281 256) x190) (= x72 (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256))) (bvule (_ bv1 256) x194) (= x194 (x246 x179)) (= x107 (x233 x72))) (= x268 (_ bv36 256))) x137)))
(assert (= (x118 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= x293 (or x171 x199)))
(assert (= (_ bv0 256) (x265 (x336 (_ bv64 256) x322 (_ bv0 256)))))
(assert (= x34 (=> (= x144 x158) x13)))
(assert (= x200 (or x99 x6)))
(assert (= x4 (x251 (x336 (_ bv64 256) x4 (_ bv0 256)))))
(assert (not (x71 (x336 (_ bv64 256) x4 (_ bv72 256)))))
(assert (= (and x351 x156) x195))
(assert (=> (bvule x322 (_ bv10000 256)) (= (x118 x322) (_ bv0 256))))
(assert (= (x241 (x336 (_ bv64 256) x322 (_ bv0 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x118 (_ bv20282409603651670423947251286015 256))))
(assert (= (and x1 x168) x50))
(assert (= x166 (and x314 x150)))
(assert (= (and x186 x226) x236))
(assert (= (=> (= (= x32 x23) x165) (and (=> x165 x181) (=> (not x165) (and (=> (and (= x279 (= x341 (_ bv0 256))) x32) (and (=> (and (= (= (_ bv0 256) x235) x168) x279) (and (=> (and (not x168) (and (or (and (= (_ bv3 256) x158) x46) (and (= x158 x235) (not x46))) (= x46 (= (_ bv2 256) x235)))) x34) (=> (and x168 (= x144 (_ bv1 256))) x13))) (=> (and (not x279) (= x138 (= x235 (_ bv0 256)))) (and (=> (and (= x68 (_ bv2 256)) x138) x353) (=> (and (and (or (and (= x325 x235) (not x308)) (and x308 (= x325 (_ bv3 256)))) (= (= (_ bv1 256) x235) x308)) (not x138)) x256))))) (=> (and (= x98 (= x341 (_ bv0 256))) (not x32)) (and (=> (and (= x260 (= (_ bv2 256) x235)) (not x98)) (and (=> (and (and (= x263 (= x235 (_ bv3 256))) (or (and x263 (= x326 (_ bv1 256))) (and (= x326 x235) (not x263)))) (not x260)) x27) (=> (and (= x49 (_ bv0 256)) x260) x255))) (=> (and (= (= x235 (_ bv1 256)) x156) x98) (and (=> (and (not x156) (and (= (= (_ bv3 256) x235) x210) (or (and (= x235 x324) (not x210)) (and x210 (= (_ bv2 256) x324))))) x85) (=> (and x156 (= x225 (_ bv0 256))) x38))))))))) x198))
(assert (x71 (_ bv4722366482869645213695 256)))
(assert (= (and x312 x279) x1))
(assert (= (or x161 x119 x113) x170))
(assert (= x353 (=> (= x68 x135) x218)))
(assert (not (x71 (x336 (_ bv64 256) x271 (_ bv0 256)))))
(assert (= (_ bv64 256) (x241 (x336 (_ bv64 256) x4 (_ bv72 256)))))
(assert (= x224 (or x287 x180)))
(assert (= (and x308 x91) x87))
(assert (= x59 (and (not x319) x139)))
(assert (= (=> (= x225 x324) x38) x85))
(assert (= x113 (and x53 x321)))
(assert (= (x336 (_ bv64 256) x4 (_ bv0 256)) (x118 (x336 (_ bv64 256) x4 (_ bv0 256)))))
(assert (= (and x211 x339) x65))
(assert (= (x118 (_ bv4722366482869645213695 256)) (_ bv0 256)))
(assert (= (and (not x279) x312) x152))
(assert (= x171 (or x112 x238)))
(assert (x71 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (or x94 x203) x93))
(assert (= (and x46 x327) x261))
(assert (= (and x121 x295) x119))
(assert (= (or x127 x209) x52))
(assert (x71 (_ bv4294967295 256)))
(assert (=> (bvule x56 (_ bv10000 256)) (= (_ bv0 256) (x118 x56))))
(assert (x71 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x118 (x336 (_ bv64 256) x4 (_ bv72 256))) (x336 (_ bv64 256) x4 (_ bv72 256))))
(assert (=> (bvuge (_ bv10000 256) x4) (= (x118 x4) (_ bv0 256))))
(assert (= x53 (and x23 x166)))
(assert (= (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256)) (x118 (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256)))))
(assert (= (x118 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (and x59 (not x25)) x226))
(assert (= x96 (=> (= x80 x177) x95)))
(assert (= (=> (= x20 x125) x17) x215))
(assert (= (and x226 (not x186)) x301))
(assert (= x299 (=> (= x128 x271) x232)))
(assert (= (and x32 x90) x312))
(assert (= x75 (or x70 x142)))
(assert (= (x241 (x336 (_ bv64 256) (_ bv0 256) (_ bv0 256))) (_ bv64 256)))
(assert (= (and (=> (and (and (= x109 (_ bv0 256)) (= (= x322 (_ bv0 256)) x319)) x32) (and (=> x319 x286) (=> (and (not x319) (and (= (= (_ bv0 256) x222) x25) (= (bvadd (bvneg x123) (_ bv0 256)) x222))) (and (=> (and (not x25) (and (or (and x186 (and (= x187 x213) (= x273 x39) (bvuge (_ bv4722366482869645213695 256) x187) (= x187 (bvadd x5 x334)))) (and (not x186) (and (= x184 (bvadd x5 x39)) (= x334 x213) (bvule x184 (_ bv4722366482869645213695 256)) (= x273 x184)))) (and (= (x253 x35) x247) (bvuge (_ bv4722366482869645213695 256) x39) (= x5 (bvudiv x123 (_ bv10000000000 256))) (= (_ bv0 256) x274) (= (x153 x35) x18) (bvule x334 (_ bv4722366482869645213695 256)) (= (x136 x35) x334) (bvule x247 (_ bv20282409603651670423947251286015 256)) (= (x336 (_ bv64 256) x322 (_ bv0 256)) x35) (= (bvadd (_ bv128 256) x21) x297) (= x39 (x258 x35)) (= x21 (bvadd (_ bv96 256) x80)) (bvule x18 (_ bv3 256)) (= x239 (_ bv0 256)) (= x186 (= (_ bv0 256) x341))))) x103) (=> x25 x286))))) (=> (not x32) x290)) x95))
(assert (bvugt (x336 (_ bv64 256) x4 (_ bv71 256)) (_ bv10000 256)))
(assert (= x188 (and (not x344) x130)))
(assert (= (or x122 x75) x83))
(assert (= (and x151 (not x260)) x36))
(assert (= x180 (and x93 x165)))
(assert (bvugt (x336 (_ bv64 256) x4 (_ bv72 256)) (_ bv10000 256)))
(assert (= (and (not x32) x208) x127))
(assert (= (=> (= x271 x110) x232) x37))
(assert (= x116 (and (not x211) x339)))
(assert (= (x118 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x241 (x336 (_ bv64 256) x271 (_ bv0 256)))))
(assert (= (_ bv0 256) (x265 (x336 (_ bv64 256) x4 (_ bv0 256)))))
(assert (x71 (_ bv1889567281 256)))
(assert (= (=> (and (or x51 (not x51)) (and (= x51 (= (_ bv0 256) x341)) (= (ite (= x4 x322) (_ bv0 256) x322) x78))) x198) x290))
(assert (= (_ bv64 256) (x241 (x336 (_ bv64 256) x4 (_ bv0 256)))))
(assert (= x77 (or x206 x224)))
(assert (= (and x166 (not x23)) x15))
(assert (x71 (_ bv20282409603651670423947251286015 256)))
(assert (= (_ bv0 256) (x265 (x336 (_ bv64 256) x271 (_ bv0 256)))))
(assert (not x182))
(assert (= x351 (and x154 x98)))
(check-sat)
(exit)
