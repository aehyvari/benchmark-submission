(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x240 () Bool)
(declare-fun x200 () Bool)
(declare-fun x174 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x55 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x261 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x1 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x156 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x184 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x253 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x232 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x46 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x85 () Bool)
(declare-fun x45 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x155 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x182 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x285 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x251 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x255 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x254 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x13 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x226 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x244 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x50 ((_ BitVec 256)) Bool)
(declare-fun x72 () (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x234 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x66 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x110 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x207 () Bool)
(declare-fun x54 () Bool)
(declare-fun x188 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x257 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x179 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x129 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x124 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x180 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x268 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x68 () Bool)
(declare-fun x96 () Bool)
(declare-fun x35 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x283 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x237 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x212 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x183 () Bool)
(declare-fun x238 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x29 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x178 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x269 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x277 () Bool)
(declare-fun x259 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x17 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x284 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x2 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x189 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x153 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x127 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x211 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x193 () Bool)
(define-fun x48 ((x58 (_ BitVec 256)) (x217 (_ BitVec 256))) Bool (= x58 (bvudiv (bvmul x217 x58) x217)))
(define-fun x36 ((x58 (_ BitVec 256)) (x217 (_ BitVec 256))) Bool (= x58 (bvsdiv (bvmul x58 x217) x217)))
(define-fun x33 ((x58 (_ BitVec 256)) (x217 (_ BitVec 256))) Bool (= x58 (bvsdiv (bvmul x217 x58) x217)))
(define-fun x47 ((x227 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x113 ((x227 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x264 ((x227 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x206 ((x227 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x42 ((x227 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x146 ((x227 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x171 ((x227 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x247 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 x246) x63 (x237 x227)))
(define-fun x218 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 x75) x147 (x247 x227)))
(define-fun x177 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 (_ bv128 256)) x12 (x42 x227)))
(define-fun x274 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 x39) x90 (x212 x227)))
(define-fun x92 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 x38) x107 (x274 x227)))
(define-fun x8 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite x233 (ite x185 (x42 x227) (x177 x227)) (x42 x227)))
(define-fun x5 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x227) x104 (x8 x227)))
(define-fun x78 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite x60 (x8 x227) (x5 x227)))
(define-fun x132 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x227) x35 (x78 x227)))
(define-fun x94 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x227) x14 (x132 x227)))
(define-fun x87 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite x203 (x78 x227) (x94 x227)))
(define-fun x245 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x227) x186 (x47 x227)))
(define-fun x262 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 (_ bv196 256)) x125 (x245 x227)))
(define-fun x76 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x227) x188 (x262 x227)))
(define-fun x160 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 (_ bv128 256)) (_ bv100 256) (x113 x227)))
(define-fun x4 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x227) x265 (x76 x227)))
(define-fun x67 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 (_ bv324 256)) x134 (x87 x227)))
(define-fun x241 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 (_ bv356 256)) x282 (x67 x227)))
(define-fun x149 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x227) x163 (x241 x227)))
(define-fun x80 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv324 256) x227) (_ bv32 256) (x146 x227)))
(define-fun x40 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x227 (_ bv0 256)) (_ bv1 256) (x226 x227)))
(define-fun x82 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x227 (_ bv356 256)) (bvult x227 (_ bv388 256))) (x40 (bvadd (bvneg (_ bv356 256)) x227)) (x171 x227)))
(define-fun x18 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv420 256) x227) x152 (x149 x227)))
(define-fun x100 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite x239 (x149 x227) (ite x197 (x241 x227) (ite x258 (x67 x227) (ite x183 (x87 x227) (x18 x227))))))
(define-fun x74 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x11 x227) (_ bv0 256) (x100 x227)))
(define-fun x224 ((x227 (_ BitVec 256))) (_ BitVec 256) (ite (= x75 x227) x72 (x218 x227)))
(assert (= (x17 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (x50 (_ bv553353397 256)))
(assert (=> (bvule x125 (_ bv10000 256)) (= (x17 x125) (_ bv0 256))))
(assert (bvult (_ bv10000 256) (x182 (_ bv64 256) x35 x57)))
(assert (= (x17 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (x55 (x182 (_ bv64 256) x186 (_ bv3 256))) x186))
(assert (= (_ bv2 256) (x253 (x182 (_ bv64 256) x257 (_ bv2 256)))))
(assert (= x272 (=> (and (and (= x11 (bvadd (_ bv324 256) x196)) (= x133 x219) (= x6 (x212 x276)) (= x86 (_ bv324 256)) (= x144 (x182 (_ bv64 256) x75 x79)) (bvule (_ bv1 256) x123) (= (_ bv1 256) x167) (= x252 (x274 x69)) (= x38 (x182 (_ bv64 256) x125 (_ bv2 256))) (= (x182 (_ bv64 256) x125 (_ bv2 256)) x69) (= x204 (x224 x10)) (= x72 (x218 x75)) (bvule (_ bv1 256) x6) (not (bvult x62 x188)) (= (x153 x144) x62) (= x21 (_ bv100 256)) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x31) (= (x182 (_ bv64 256) x186 (_ bv2 256)) x276) (= (_ bv324 256) x266) (= (x80 (_ bv324 256)) x236) (bvule (_ bv1 256) x62) (not (bvult x6 x90)) (= x72 x283) (= x223 (= (_ bv0 256) x236)) (= x90 (bvadd (bvneg x188) x6)) (= x22 (_ bv100 256)) (not (bvugt x252 x107)) (= x128 x186) (= (bvadd x252 x188) x107) (not (bvult x6 x188)) (= (x182 (_ bv64 256) x186 (_ bv2 256)) x39) (= x123 (x110 x10)) (= (bvadd (bvneg (_ bv324 256)) x11) x21) (= x133 x202) (= (_ bv599290589 256) x127) (= x103 x188) (not (bvult x107 x252)) (not (bvugt x235 x62)) (= x111 x103) (= x79 (x182 (_ bv64 256) x186 (_ bv3 256))) (= x204 x19) (= x235 (bvadd x62 (bvneg x188)))) (or (not x223) (and x223 (and (= true x210) (= x34 (x110 x10)) (bvule (_ bv1 256) x34))))) x126)))
(assert (= (x17 (_ bv404098525 256)) (_ bv0 256)))
(assert (= x200 (=> (and (= x65 (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x83)) (= x159 (_ bv128 256)) (= (x76 (_ bv160 256)) x83) (not (bvult x242 x56)) (= x188 (ite (bvult x242 x249) x242 x249)) (= x49 (_ bv260 256)) (= x196 (x160 (_ bv128 256))) (= x211 (bvult (_ bv0 256) x196)) (= x43 (_ bv0 256)) (= (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x65) x265) (= (bvadd x242 (bvneg x188)) x56) (bvule (_ bv1 256) x188)) (and (=> (and x211 (and (= (x4 (_ bv160 256)) x134) (= x216 (bvugt x196 (_ bv32 256))))) (and (=> (not x216) x272) (=> (and x216 (and (= x259 (bvult (_ bv64 256) x196)) (= x282 (x4 (_ bv192 256))))) (and (=> (and x259 (and (= (bvult (_ bv96 256) x196) x66) (= (x4 (_ bv224 256)) x163))) (and (=> x66 x194) (=> (not x66) x272))) (=> (not x259) x272))))) (=> (not x211) x272)))))
(assert (= (or x203 x115) x220))
(assert (= (x1 (x182 (_ bv64 256) x35 x57)) (_ bv64 256)))
(assert (= (_ bv0 256) (x253 (x182 (_ bv64 256) x35 (_ bv0 256)))))
(assert (= (and (not x234) x95) x115))
(assert (not (x50 (x182 (_ bv64 256) x186 (_ bv3 256)))))
(assert (not x156))
(assert (= x71 (=> (and (or (not x234) x234) (and (= (x182 (_ bv64 256) x35 (_ bv61 256)) x275) (= x234 (= (_ bv0 256) x14)) (= (x261 x275) x225) (not (bvugt x225 (bvadd x225 x14))) (= (bvadd x225 x14) x242))) x200)))
(assert (= (or (and (not x244) x251) x176) x165))
(assert (bvult (_ bv10000 256) (x182 (_ bv64 256) x75 x79)))
(assert (= x2 (and x269 x59)))
(assert (= (_ bv69 256) (x253 (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (not (x50 (x182 (_ bv64 256) x35 x57))))
(assert (= (_ bv64 256) (x1 (x182 (_ bv64 256) x35 (_ bv61 256)))))
(assert (= true x269))
(assert (= (x1 (x182 (_ bv64 256) x186 (_ bv3 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x17 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x17 (x182 (_ bv64 256) x35 (_ bv61 256))) (x182 (_ bv64 256) x35 (_ bv61 256))))
(assert (= (_ bv60 256) (x253 (x182 (_ bv64 256) x75 (_ bv60 256)))))
(assert (= x176 (and x251 x244)))
(assert (= (_ bv0 256) (x17 (_ bv4294967295 256))))
(assert (bvult (_ bv10000 256) (x182 (_ bv64 256) x35 (_ bv61 256))))
(assert (= (x182 (_ bv64 256) x257 (_ bv2 256)) (x17 (x182 (_ bv64 256) x257 (_ bv2 256)))))
(assert (= (_ bv0 256) (x17 (_ bv20282409603651670423947251286015 256))))
(assert (=> (bvuge (_ bv10000 256) x35) (= (x17 x35) (_ bv0 256))))
(assert (= x263 (and x259 x268)))
(assert (x50 (_ bv1000000000000000000 256)))
(assert (x50 (_ bv1889567281 256)))
(assert (= x193 (or x239 x3 x197 x258 x183)))
(assert (= x3 (and x66 x263)))
(assert (= (=> (and (= x152 (x4 (_ bv256 256))) (= x46 (not (bvugt x196 (_ bv128 256))))) (and x272 x46)) x194))
(assert (x50 (_ bv4294967295 256)))
(assert (bvult (_ bv10000 256) (x182 (_ bv64 256) x75 (_ bv60 256))))
(assert (= (x17 (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256))))
(assert (= x130 (or x20 x233)))
(assert (=> (bvuge (_ bv10000 256) x186) (= (_ bv0 256) (x17 x186))))
(assert (= (x253 (x182 (_ bv64 256) x75 x79)) x79))
(assert (= (_ bv64 256) (x1 (x182 (_ bv64 256) x186 (_ bv2 256)))))
(assert (= (and x220 x211) x189))
(assert (=> (bvule x75 (_ bv10000 256)) (= (x17 x75) (_ bv0 256))))
(assert (x50 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (and (not x259) x268) x197))
(assert (= (_ bv64 256) (x1 (x182 (_ bv64 256) x35 (_ bv0 256)))))
(assert (= (_ bv64 256) (x1 (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (x50 (_ bv404098525 256)))
(assert (= (_ bv64 256) (x1 (x182 (_ bv64 256) x257 (_ bv2 256)))))
(assert (x50 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x55 (x182 (_ bv64 256) x75 x79)) x75))
(assert (= x232 (and x130 (not x26))))
(assert (= (=> (and (and (bvuge x195 (_ bv0 256)) (not (= x75 x10)) (bvuge (_ bv4294967295 256) x208) (= x254 (bvugt (x110 x75) (_ bv0 256))) (not (= x186 x75)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x75) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x10) (bvule (_ bv1 256) x10) x96 (bvule x250 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x110 x75) x101) (bvule x243 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x238 (_ bv0 256)) (= (bvult (_ bv0 256) (x110 x10)) x96) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x256) (bvule (_ bv1 256) x101) (bvule (_ bv1 256) x186) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x135) x228 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x143) (bvule (_ bv0 256) x135) (bvule (_ bv0 256) x116) (= x9 (_ bv36 256)) (bvule x195 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv0 256) x279) (not (= x10 x186)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x238) x254 (bvule (_ bv0 256) x143) (bvule (_ bv0 256) x243) (bvule (_ bv0 256) x208) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x186) (= (_ bv4 256) x131) (bvule (_ bv0 256) x138) (= (bvugt (x110 x186) (_ bv0 256)) x228) (bvuge x41 (_ bv0 256)) (bvule (_ bv100 256) x24) (bvuge x256 (_ bv0 256)) (bvuge x250 (_ bv0 256)) (bvuge x75 (_ bv1 256)) (bvule x25 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (= (_ bv404098525 256) x166) (bvule x116 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x24) (bvule x138 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x41 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (and (and (and (and (and (= x190 (x178 x284)) (= (bvadd x278 (_ bv2 256)) x57) (= x142 x102) (= x98 (x179 x215)) (= (bvugt x157 (_ bv0 256)) x59) (= x273 (x13 x278)) (= (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256)) x28) (= x246 x250) (bvule (_ bv1 256) x168) (= x147 x154) (= x73 x181) (= x117 (_ bv2 256)) (= x140 (_ bv553353397 256)) (= x284 (bvadd (_ bv1 256) x278)) (= x157 (bvadd x281 (bvneg x273))) (= x63 (x237 x246)) (= x81 x162) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x181) (= (x182 (_ bv64 256) x75 (_ bv60 256)) x278) (= x122 x63) (bvule x98 (_ bv20282409603651670423947251286015 256)) (= x93 (x182 (_ bv64 256) x35 x57)) (bvule x273 (_ bv340282366920938463463374607431768211455 256)) (= (x247 x75) x154) (= x181 (x124 x28)) (= (x110 x75) x168) (= x219 x151) (= (x182 (_ bv64 256) x35 (_ bv0 256)) x215) (= (x45 x93) x187) (= (_ bv0 256) x231)) (= x281 x41)) (= x73 x250)) (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x125) (bvule (_ bv1 256) x150) (= x99 (x212 x174)) (= (x285 (_ bv36 256)) x125) (= x150 (x110 x10)) (= (x285 (_ bv4 256)) x35) x199 (= x23 x75) (bvule (_ bv1 256) x249) (= x249 x142) (= x260 (_ bv1889567281 256)) (= (x285 (_ bv68 256)) x249) (bvule x35 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x64 x23) (= x151 x125) (= x35 x81) (= (bvuge x99 x37) x199) (= x174 (x182 (_ bv64 256) x23 (_ bv2 256))))) (and (= (bvudiv x44 (_ bv1000000000000000000 256)) x136) (= (_ bv1289409798 256) x16) (bvule (_ bv1 256) x112) (= (bvudiv x44 x198) x37) (= x136 x88) (= (bvmul (_ bv1000000000000000000 256) x88) x44) (= x112 (x110 x75)) (bvuge x198 (_ bv1 256)) (= x114 (_ bv36 256)) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x198) (= x27 x88) (= x88 x25)))) (and (=> (and (= x190 x104) (not x59)) x84) (=> (and x59 (and (or (not x105) x105) (= x105 (= x190 x12)))) x180))) x156))
(assert (= (=> (and (and (= x89 (_ bv4 256)) (= (_ bv36 256) x201) (= (_ bv404098525 256) x271) (= (x110 x75) x172) (bvuge x172 (_ bv1 256))) (and (and (= (_ bv36 256) x61) (= (bvudiv x205 (_ bv1000000000000000000 256)) x32) (= (x110 x75) x173) (= x77 x51) (= x121 (_ bv1289409798 256)) (bvuge x173 (_ bv1 256)) (= x51 x32) (= x51 x25) (= x205 (bvmul (_ bv1000000000000000000 256) x51)) (= x30 (bvudiv x205 x198))) (and (= (x92 x108) x109) (= x257 x75) (= x97 (_ bv1889567281 256)) (bvule (_ bv1 256) x139) (= x129 (bvule x30 x109)) (= (x110 x10) x139) (= (x182 (_ bv64 256) x257 (_ bv2 256)) x108) (= x257 x120)))) x129) x277))
(assert (= (or x169 x185) x233))
(assert (= (x17 (x182 (_ bv64 256) x125 (_ bv2 256))) (x182 (_ bv64 256) x125 (_ bv2 256))))
(assert (= (_ bv61 256) (x253 (x182 (_ bv64 256) x35 (_ bv61 256)))))
(assert (= (x1 (x182 (_ bv64 256) x23 (_ bv2 256))) (_ bv64 256)))
(assert (= (x253 (x182 (_ bv64 256) x23 (_ bv2 256))) (_ bv2 256)))
(assert (= (x253 (x182 (_ bv64 256) x125 (_ bv2 256))) (_ bv2 256)))
(assert (not (x50 (x182 (_ bv64 256) x75 (_ bv60 256)))))
(assert (= (x182 (_ bv64 256) x186 (_ bv3 256)) (x17 (x182 (_ bv64 256) x186 (_ bv3 256)))))
(assert (= (x1 (x182 (_ bv64 256) x125 (_ bv2 256))) (_ bv64 256)))
(assert (= x183 (and x220 (not x211))))
(assert (x50 (_ bv599290589 256)))
(assert (bvugt (x182 (_ bv64 256) x125 (_ bv2 256)) (_ bv10000 256)))
(assert (= x125 (x55 (x182 (_ bv64 256) x125 (_ bv2 256)))))
(assert (= x169 (and (not x105) x2)))
(assert (x50 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (not (x50 (x182 (_ bv64 256) x35 (_ bv61 256)))))
(assert (not (x50 (x182 (_ bv64 256) x257 (_ bv2 256)))))
(assert (= x35 (x55 (x182 (_ bv64 256) x35 x57))))
(assert (=> (bvule x257 (_ bv10000 256)) (= (x17 x257) (_ bv0 256))))
(assert (bvult (_ bv10000 256) (x182 (_ bv64 256) x35 (_ bv0 256))))
(assert (= (x182 (_ bv64 256) x75 x79) (x17 (x182 (_ bv64 256) x75 x79))))
(assert (= (=> (and (or (not x244) (and (and (= (x80 (_ bv324 256)) x267) (bvule (_ bv32 256) x267) (= (_ bv1 256) x229) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x267) (= (x82 (_ bv356 256)) x229)) x244)) (and (= x192 (_ bv324 256)) (= x175 (_ bv324 256)) (= x244 (bvult (_ bv0 256) x161)) (= x161 (x80 (_ bv324 256))) (= x221 (_ bv324 256)))) x277) x126))
(assert (= (and x193 x223) x164))
(assert (= (x17 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x1 (x182 (_ bv64 256) x75 x79))))
(assert (x50 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (bvugt (x182 (_ bv64 256) x23 (_ bv2 256)) (_ bv10000 256)))
(assert (= x239 (and (not x66) x263)))
(assert (= x35 (x55 (x182 (_ bv64 256) x35 (_ bv0 256)))))
(assert (= x23 (x55 (x182 (_ bv64 256) x23 (_ bv2 256)))))
(assert (= (=> (= x209 x14) x71) x240))
(assert (= (_ bv3 256) (x253 (x182 (_ bv64 256) x186 (_ bv3 256)))))
(assert (= (_ bv0 256) (x17 (_ bv1000000000000000000 256))))
(assert (bvugt (x182 (_ bv64 256) x186 (_ bv2 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256))))
(assert (not (x50 (x182 (_ bv64 256) x23 (_ bv2 256)))))
(assert (x50 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x182 (_ bv64 256) x23 (_ bv2 256)) (x17 (x182 (_ bv64 256) x23 (_ bv2 256)))))
(assert (= (x17 (x182 (_ bv64 256) x35 x57)) (x182 (_ bv64 256) x35 x57)))
(assert (= (x1 (x182 (_ bv64 256) x75 (_ bv60 256))) (_ bv64 256)))
(assert (= x20 (and (not x59) x269)))
(assert (= (_ bv2 256) (x253 (x182 (_ bv64 256) x186 (_ bv2 256)))))
(assert (= x268 (and x216 x189)))
(assert (bvugt (x182 (_ bv64 256) x257 (_ bv2 256)) (_ bv10000 256)))
(assert (= (_ bv0 256) (x17 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (= (and x141 x232) x148))
(assert (= x60 (and x130 x26)))
(assert (= x53 (or x148 x184)))
(assert (x50 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (x17 (bvadd (_ bv1 256) x278)) (x17 x278)))
(assert (= (or x164 (and (not x223) x193)) x251))
(assert (= x258 (and (not x216) x189)))
(assert (not (x50 (x182 (_ bv64 256) x35 (_ bv0 256)))))
(assert (x50 (_ bv20282409603651670423947251286015 256)))
(assert (= x75 (x55 (x182 (_ bv64 256) x75 (_ bv60 256)))))
(assert (x50 (_ bv1289409798 256)))
(assert (= (x17 (_ bv1889567281 256)) (_ bv0 256)))
(assert (x50 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= x186 (x55 (x182 (_ bv64 256) x186 (_ bv2 256)))))
(assert (=> (bvule x23 (_ bv10000 256)) (= (x17 x23) (_ bv0 256))))
(assert (=> (bvule x246 (_ bv10000 256)) (= (x17 x246) (_ bv0 256))))
(assert (bvult (_ bv10000 256) (x182 (_ bv64 256) x186 (_ bv3 256))))
(assert (x50 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (not (x50 (x182 (_ bv64 256) x186 (_ bv2 256)))))
(assert (= (=> (= x26 (= x187 x104)) (and (=> (and x26 (= (_ bv0 256) x14)) x71) (=> (and (and (= x141 (= (_ bv0 256) x98)) (or (and x141 (= x209 (_ bv0 256))) (and (= x222 x209) (not x141)))) (not x26)) x240))) x84))
(assert (= x180 (=> (and (= x280 (bvand (_ bv340282366920938463463374607431768211455 256) x281)) (= x12 x104)) x84)))
(assert (= (x55 (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (_ bv2 256)))
(assert (= (x182 (_ bv64 256) x186 (_ bv2 256)) (x17 (x182 (_ bv64 256) x186 (_ bv2 256)))))
(assert (= (x17 x278) (x17 (bvadd x278 (_ bv2 256)))))
(assert (= (_ bv0 256) (x17 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (and x105 x2) x185))
(assert (= (_ bv0 256) (x17 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (= (_ bv0 256) (x17 (_ bv1289409798 256))))
(assert (= x257 (x55 (x182 (_ bv64 256) x257 (_ bv2 256)))))
(assert (= x35 (x55 (x182 (_ bv64 256) x35 (_ bv61 256)))))
(assert (not (x50 (x182 (_ bv64 256) x125 (_ bv2 256)))))
(assert (not (x50 (x182 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (= (and (not x141) x232) x184))
(assert (= (x17 (x182 (_ bv64 256) x75 (_ bv60 256))) (x182 (_ bv64 256) x75 (_ bv60 256))))
(assert (not (x50 (x182 (_ bv64 256) x75 x79))))
(assert (= (or x60 x53) x95))
(assert (= (x17 (_ bv553353397 256)) (_ bv0 256)))
(assert (= x203 (and x234 x95)))
(assert (= (x17 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (=> (bvule x10 (_ bv10000 256)) (= (x17 x10) (_ bv0 256))))
(assert (= x57 (x253 (x182 (_ bv64 256) x35 x57))))
(assert (= (x182 (_ bv64 256) x35 (_ bv0 256)) (x17 (x182 (_ bv64 256) x35 (_ bv0 256)))))
(assert (= (_ bv0 256) (x17 (_ bv599290589 256))))
(check-sat)
(exit)
