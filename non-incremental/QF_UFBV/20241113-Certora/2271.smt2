(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x343 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x43 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256) (_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x352 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x351 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x328 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x283 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x327 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x323 () (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x115 () Bool)
(declare-fun x129 () (_ BitVec 256))
(declare-fun x158 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x304 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x98 () Bool)
(declare-fun x99 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x20 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x264 () Bool)
(declare-fun x285 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x326 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x324 () (_ BitVec 256))
(declare-fun x354 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x206 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x142 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x155 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x340 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x153 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x290 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x250 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x337 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x125 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x333 () (_ BitVec 256))
(declare-fun x332 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x258 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x132 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x345 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x329 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x151 () (_ BitVec 256))
(declare-fun x342 () (_ BitVec 256))
(declare-fun x310 () Bool)
(declare-fun x336 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x346 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x347 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x349 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x322 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x100 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x339 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x316 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x289 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x57 () Bool)
(declare-fun x48 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x81 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x355 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x348 () Bool)
(declare-fun x334 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x313 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x341 () Bool)
(declare-fun x321 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x330 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x325 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x320 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x312 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x344 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x309 () Bool)
(declare-fun x335 () (_ BitVec 256))
(declare-fun x178 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x229 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x338 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x350 () Bool)
(declare-fun x221 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x33 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x353 () Bool)
(declare-fun x161 () Bool)
(declare-fun x107 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x114 ((_ BitVec 256)) Bool)
(declare-fun x331 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(define-fun x182 ((x269 (_ BitVec 256)) (x70 (_ BitVec 256))) Bool (= x269 (bvudiv (bvmul x70 x269) x70)))
(define-fun x82 ((x269 (_ BitVec 256)) (x70 (_ BitVec 256))) Bool (= x269 (bvsdiv (bvmul x269 x70) x70)))
(define-fun x77 ((x269 (_ BitVec 256)) (x70 (_ BitVec 256))) Bool (= x269 (bvsdiv (bvmul x70 x269) x70)))
(define-fun x133 ((x136 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x217 ((x136 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x10 ((x136 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x18 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv128 256)) x38 (x133 x136)))
(define-fun x255 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv160 256)) x51 (x18 x136)))
(define-fun x193 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv192 256)) x184 (x255 x136)))
(define-fun x307 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv224 256)) x222 (x193 x136)))
(define-fun x261 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv256 256)) x283 (x307 x136)))
(define-fun x166 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x136) x72 (x261 x136)))
(define-fun x56 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv128 256)) x52 (x217 x136)))
(define-fun x317 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x136) x147 (x56 x136)))
(define-fun x27 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv192 256)) x148 (x317 x136)))
(define-fun x61 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv224 256)) x187 (x27 x136)))
(define-fun x86 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x136) x320 (x61 x136)))
(define-fun x62 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x136) (_ bv72464927124685711895252664195178772226123872012682517813167109100718830649344 256) (x86 x136)))
(define-fun x210 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 x311) x190 (x81 x136)))
(define-fun x2 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x214 x136) x298 (x142 x136)))
(define-fun x139 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x136) x170 (x10 x136)))
(define-fun x244 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv160 256)) x316 (x139 x136)))
(define-fun x138 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv192 256)) x211 (x244 x136)))
(define-fun x202 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv224 256)) x288 (x138 x136)))
(define-fun x90 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x136) x127 (x202 x136)))
(define-fun x238 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv288 256)) (_ bv72464927124685711895252664195178772226123872012682517813167109100718830649344 256) (x90 x136)))
(define-fun x220 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x136) x97 (x153 x136)))
(define-fun x12 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x136 (_ bv320 256)) (bvuge x136 (_ bv288 256))) (x220 (bvadd x136 (bvneg (_ bv288 256)))) (x62 x136)))
(define-fun x314 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (= x136 (_ bv0 256)) x191 (x20 x136)))
(define-fun x237 ((x136 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv288 256) x136) (bvult x136 (_ bv320 256))) (x314 (bvadd (bvneg (_ bv288 256)) x136)) (x238 x136)))
(assert (= (_ bv64 256) (x221 (x312 (_ bv64 256) x68 x168))))
(assert (bvugt (x312 (_ bv64 256) x218 x84) (_ bv10000 256)))
(assert (= (_ bv64 256) (x221 (x312 (_ bv64 256) x242 (_ bv3 256)))))
(assert (bvugt (x312 (_ bv64 256) x274 (_ bv3 256)) (_ bv10000 256)))
(assert (=> (bvule x218 (_ bv10000 256)) (= (_ bv0 256) (x178 x218))))
(assert (x114 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x178 x112) (x178 (bvadd x112 (_ bv1 256)))))
(assert (not (x114 (x312 (_ bv64 256) x242 (_ bv3 256)))))
(assert (= (x158 (x312 (_ bv64 256) x120 (_ bv3 256))) (_ bv3 256)))
(assert (= (x178 (bvadd (_ bv1 256) x189)) (x178 x189)))
(assert (=> (bvuge (_ bv10000 256) x311) (= (x178 x311) (_ bv0 256))))
(assert (= (x155 (x312 (_ bv64 256) x218 x345)) x218))
(assert (= (=> (and (= (or x325 (not x194)) x309) (= x275 (not (= x243 (_ bv0 256)))) (= x194 (not x223)) (= (not (= (ite x275 (_ bv1 256) (_ bv0 256)) (_ bv0 256))) x325)) x309) x126))
(assert (=> (bvule x276 (_ bv10000 256)) (= (x178 x276) (_ bv0 256))))
(assert (=> (bvule x177 (_ bv10000 256)) (= (_ bv0 256) (x178 x177))))
(assert (= (and (not x292) x321) x46))
(assert (= x341 (or x350 x125)))
(assert (= (x99 (x43 (_ bv160 256) x279 x247 x34 x35 x291)) x35))
(assert (= x345 (x158 (x312 (_ bv64 256) x218 x345))))
(assert (= x34 (x355 (x43 (_ bv160 256) x279 x247 x34 x35 x291))))
(assert (= (x155 (x312 (_ bv64 256) x120 (_ bv3 256))) x120))
(assert (= (x178 (x312 (_ bv64 256) x68 x32)) (x312 (_ bv64 256) x68 x32)))
(assert (=> (bvuge (_ bv10000 256) x34) (= (_ bv0 256) (x178 x34))))
(assert (bvult (_ bv10000 256) (x43 (_ bv160 256) x177 x338 x248 x111 x172)))
(assert (not (x114 (x312 (_ bv64 256) x68 x212))))
(assert (bvugt (x312 (_ bv64 256) x68 x212) (_ bv10000 256)))
(assert (= (x155 (x43 (_ bv160 256) x279 x247 x34 x35 x291)) x279))
(assert (x114 (_ bv1058260626 256)))
(assert (x114 (_ bv4294967295 256)))
(assert (= x115 (or x46 x64)))
(assert (= x48 (=> (and (and (and (= x143 (bvudiv x179 x58)) (and (and (= (bvudiv x108 (_ bv1000000000000000000000000000000000000 256)) x154) (and (and (and (= x8 x284) (not (bvugt x185 x284)) (= true x103) (= x22 x293)) (= (bvudiv x342 (_ bv1000000000000000000 256)) x8)) (and (= x302 x333) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x342) (= false x344) (= x315 x323) (bvule (_ bv0 256) x342) (= x342 (bvmul x156 x19)) (= x296 (_ bv1000000000000000000 256)) (= x19 x333) (= x302 x154) (= x156 x323)))) (and (= (x142 x66) x206) (= x230 (x312 (_ bv64 256) x68 x32)) (= x25 x306) (= x25 x251) (= (_ bv1000000000000000000000000000000000000 256) x131) (bvuge x108 (_ bv0 256)) (= (bvudiv x206 (_ bv340282366920938463463374607431768211456 256)) x192) (= x108 (bvmul x251 x225)) (= x225 x262) (= x32 (x312 (_ bv64 256) x120 (_ bv2 256))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x108) (= (bvadd x230 (_ bv1 256)) x66) (= x185 x143) (= x192 x262) (= x315 (x12 (_ bv256 256))) (= x310 false)))) (and (= x39 x49) (= (x312 (_ bv64 256) x120 (_ bv3 256)) x201) (= x5 (bvadd x73 (_ bv1 256))) (= x227 x41) (= x352 x349) (= x319 (bvadd x39 (bvneg (_ bv1 256)))) (= (bvadd (_ bv1 256) x26) x352) (= x150 (bvand (_ bv340282366920938463463374607431768211455 256) x196)) (= (bvadd x60 x319) x179) (= (bvmul x41 x349) x60) (= x37 (x142 x28)) (= (x12 (_ bv288 256)) x306) (= x150 x227) (= x303 (x142 x5)) (= (x312 (_ bv64 256) x68 x212) x53) (= (x312 (_ bv64 256) x120 (_ bv3 256)) x73) (= x58 x49) (= (bvadd x299 (_ bv1000000 256)) x49) (= (bvadd x201 (_ bv1 256)) x28) (= false x109) (= x212 (x312 (_ bv64 256) x120 (_ bv2 256))) (= x299 (bvudiv x303 (_ bv340282366920938463463374607431768211456 256))) (= (bvadd x53 (_ bv1 256)) x328) (= (bvand (_ bv340282366920938463463374607431768211455 256) x37) x26) (= (x142 x328) x196) (= x97 x67))) (= x23 x67)) x258)))
(assert (= (_ bv0 256) (x178 (_ bv999999999999999999 256))))
(assert (=> (bvuge (_ bv10000 256) x160) (= (x178 x160) (_ bv0 256))))
(assert (bvugt (x312 (_ bv64 256) x68 x32) (_ bv10000 256)))
(assert (bvugt (x312 (_ bv64 256) x29 x149) (_ bv10000 256)))
(assert (= (x221 (x43 (_ bv160 256) x279 x247 x34 x35 x291)) (_ bv160 256)))
(assert (= x129 (x99 (x43 (_ bv160 256) x146 x276 x110 x129 x160))))
(assert (= (x178 (x312 (_ bv64 256) x270 x80)) (x312 (_ bv64 256) x270 x80)))
(assert (= (and x57 x200) x125))
(assert (=> (bvule x111 (_ bv10000 256)) (= (x178 x111) (_ bv0 256))))
(assert (= (x178 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= x197 (=> (and (and (= x38 x47) (and (= x287 x51) (and (= x117 x184) (and (= x30 x222) (and (and (and (= x147 x287) (and (and (= x187 x30) (and (and (= x290 (x142 x50)) (= (bvand x290 (_ bv340282366920938463463374607431768211455 256)) x9) (= (_ bv128 256) x105) (= x68 x95) (bvule (_ bv1 256) x318) (= x318 (x132 x118)) (= x168 (x312 (_ bv64 256) x120 (_ bv2 256))) (= x31 (= (_ bv0 256) x9)) (= x276 (x86 (_ bv160 256))) (= x160 (x86 (_ bv256 256))) (= x120 (x43 (_ bv160 256) x146 x276 x110 x129 x160)) (= (x86 (_ bv224 256)) x129) (= (x86 (_ bv128 256)) x146) (= (x312 (_ bv64 256) x68 x168) x159) (= x68 x180) (= x1 (_ bv1534929069 256)) (= x50 (bvadd x159 (_ bv1 256))) (= x110 (x86 (_ bv192 256)))) (= x320 x96))) (= x148 x117))) (= x47 x52)) (and (= x247 (x261 (_ bv160 256))) (bvule (_ bv1 256) x102) (= (_ bv196 256) x347) (bvuge x215 (_ bv0 256)) (= (x261 (_ bv256 256)) x291) (= x215 x95) (= x96 x283) (= (_ bv3745429343 256) x204) (= (x261 (_ bv128 256)) x279) (= x34 (x261 (_ bv192 256))) (= x35 (x261 (_ bv224 256))) (= x274 (x166 (_ bv288 256))) (= x40 (_ bv128 256)) (= x102 (x132 x118)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x215) (= (x43 (_ bv160 256) x279 x247 x34 x35 x291) x72))))))) (and (bvuge x162 (_ bv0 256)) (bvule (_ bv0 256) x117) (bvuge (_ bv340282366920938463463374607431768211455 256) x88) (bvule (_ bv0 256) x47) (bvule (_ bv0 256) x13) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x141) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x162) (bvule x13 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x83 (_ bv0 256)) (bvuge x335 (_ bv0 256)) (bvule (_ bv0 256) x33) (bvule (_ bv0 256) x260) (bvule (_ bv0 256) x78) (bvule x118 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x117) (bvuge x249 (_ bv0 256)) (bvule (_ bv68 256) x122) x107 (bvuge x30 (_ bv0 256)) (bvule x55 (_ bv4294967295 256)) (bvule (_ bv1 256) x241) (bvule x122 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv0 256) x287) (= x337 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x241) (bvule x249 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x33) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x47) (bvule x96 (_ bv999999999999999999 256)) x239 (= (bvult (_ bv0 256) (x132 x118)) x107) (bvuge x96 (_ bv0 256)) (bvule x335 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x78 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv1 256) x118) (= (_ bv164 256) x203) (= (bvugt (x132 x241) (_ bv0 256)) x239) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x83) (bvuge x55 (_ bv0 256)) (bvule x287 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x260) (bvuge x141 (_ bv0 256)) (bvule (_ bv0 256) x88) (not (= x118 x241)) (bvule x30 (_ bv1461501637330902918203684832716283019655932542975 256)))) (and (=> (and (= x300 x22) x31) x258) (=> (and (and (and (= (_ bv288 256) x21) (= x74 (bvand x65 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (= x300 x44) x93) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x23) (= (x86 (_ bv192 256)) x65) (= x57 (not x93)) (= x44 x23) (bvuge x23 (_ bv0 256))) (or (and (not x57) (and (= x293 x300) (not x57))) (and x57 (and (= x23 x272) (= x293 x272) x57 (= true x167))))) (not x31)) x48)))))
(assert (= (x155 (x312 (_ bv64 256) x274 (_ bv3 256))) x274))
(assert (= (x43 (_ bv160 256) x279 x247 x34 x35 x291) (x178 (x43 (_ bv160 256) x279 x247 x34 x35 x291))))
(assert (not (x114 (x43 (_ bv160 256) x177 x338 x248 x111 x172))))
(assert (= (x221 (x312 (_ bv64 256) x270 x80)) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x241) (= (x178 x241) (_ bv0 256))))
(assert (= (x178 (_ bv181336955 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x178 (_ bv3745429343 256))))
(assert (= x247 (x158 (x43 (_ bv160 256) x279 x247 x34 x35 x291))))
(assert (= (x158 (x312 (_ bv64 256) x29 x149)) x149))
(assert (= (x155 (x312 (_ bv64 256) x218 x84)) x218))
(assert (not (x114 (x312 (_ bv64 256) x120 (_ bv2 256)))))
(assert (= (_ bv3 256) (x158 (x312 (_ bv64 256) x274 (_ bv3 256)))))
(assert (= (x155 (x312 (_ bv64 256) x120 (_ bv2 256))) x120))
(assert (= (=> (and (and (= x141 x36) (and (and (= (x210 x118) x89) (= x42 (x142 x214)) (= x190 (x81 x311)) (= x311 x141) (= x215 x285) (= (x312 (_ bv64 256) x36 (_ bv6 256)) x149) (= x76 x281) (= x231 (x132 x118)) (= x123 (ite (not (= x219 (_ bv0 256))) (_ bv1 256) (_ bv0 256))) (= x289 x89) (= x298 (bvadd x123 x254)) (bvuge x231 (_ bv1 256)) (= x165 x190) (= (_ bv4006518784 256) x45) (= x214 (x312 (_ bv64 256) x29 x149)) (= x254 (bvand x42 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256))) (= x274 x163) (= x113 (_ bv68 256))) (and (and (= x313 (x132 x118)) (= x257 x274) (bvule (_ bv1 256) x327) (= (_ bv196 256) x334) x234 (= x71 (_ bv36 256)) (= (x2 x195) x265) (= x270 x121) (bvuge x313 (_ bv1 256)) (= x112 (x312 (_ bv64 256) x274 (_ bv3 256))) (= x195 (bvadd (_ bv1 256) x189)) (= x240 (_ bv1058260626 256)) (= x224 x163) (= x189 (x312 (_ bv64 256) x270 x80)) (= (x312 (_ bv64 256) x274 (_ bv2 256)) x80) (= x295 x215) (= x329 x257) (= x101 (x2 x174)) (= x245 (_ bv3490909752 256)) (= x285 x270) (= (bvand (_ bv340282366920938463463374607431768211455 256) x265) x263) (= (bvadd x112 (_ bv1 256)) x174) (= x234 (bvuge x169 x263)) (= x169 (bvudiv x101 (_ bv340282366920938463463374607431768211456 256))) (= (x132 x118) x327)) (and (and (= x287 x316) (and (= x211 x117) (and (= x288 x30) (and (= x127 x96) (and (= (x90 (_ bv192 256)) x248) (= (x90 (_ bv256 256)) x172) (= (x312 (_ bv64 256) x242 (_ bv2 256)) x84) (= x295 x218) (= x17 (x312 (_ bv64 256) x218 x84)) (= (bvand x85 (_ bv340282366920938463463374607431768211455 256)) x144) (= (_ bv128 256) x232) (= x354 (= (_ bv0 256) x144)) (= (x43 (_ bv160 256) x177 x338 x248 x111 x172) x242) (= x336 (bvadd x17 (_ bv1 256))) (= (x132 x118) x94) (= (_ bv1534929069 256) x351) (bvule (_ bv1 256) x94) (= (x90 (_ bv128 256)) x177) (= x111 (x90 (_ bv224 256))) (= x85 (x2 x336)) (= x338 (x90 (_ bv160 256))) (= x218 x343)))))) (= x47 x170))))) (and (= x219 x152) (= (_ bv1 256) x4) (= (_ bv181336955 256) x268) (= (x132 x118) x176) x264 (= x198 (_ bv36 256)) (bvuge x176 (_ bv1 256)) (= x75 false) (= (x100 (_ bv4 256)) x29) (= x140 x151) (= (x142 x236) x14) (= (bvand x14 (_ bv340282366920938463463374607431768211455 256)) x157) (bvule x29 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x135 (x312 (_ bv64 256) x274 (_ bv3 256))) (= x140 x274) (= x76 x29) (= (bvadd x135 (_ bv2 256)) x236) (= (x100 (_ bv36 256)) x219) (= (= x157 x88) x264))) (and (=> (and (not x354) (and (or (and x292 (and (= x175 x137) (= x137 true) (= x339 x301) x292)) (and (and (not x292) (= x75 x175)) (not x292))) (and (= (not x229) x292) (= x229 (= x22 x267)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x339) (= (bvand x130 (_ bv1461501637330902918203684832716283019655932542975 256)) x128) (bvuge x339 (_ bv0 256)) (= (x90 (_ bv192 256)) x130) (= x208 (_ bv288 256)) (= x267 x339)))) x171) (=> (and x354 (and (= x75 x223) (= x243 (_ bv1 256)))) x126))) x258))
(assert (= x270 (x155 (x312 (_ bv64 256) x270 x80))))
(assert (bvult (_ bv10000 256) (x312 (_ bv64 256) x270 x80)))
(assert (= true x98))
(assert (= (x178 (bvadd (_ bv1 256) x17)) (x178 x17)))
(assert (= (x178 (_ bv72464927124685711895252664195178772226123872012682517813167109100718830649344 256)) (_ bv0 256)))
(assert (=> (bvule x247 (_ bv10000 256)) (= (_ bv0 256) (x178 x247))))
(assert (= (x221 (x43 (_ bv160 256) x146 x276 x110 x129 x160)) (_ bv160 256)))
(assert (= x242 (x155 (x312 (_ bv64 256) x242 (_ bv3 256)))))
(assert (= (_ bv0 256) (x178 (_ bv1000000 256))))
(assert (not (x114 (x312 (_ bv64 256) x218 x345))))
(assert (= (_ bv0 256) (x178 (_ bv340282366920938463463374607431768211455 256))))
(assert (bvugt (x312 (_ bv64 256) x218 x294) (_ bv10000 256)))
(assert (= (x178 x104) (x178 (bvadd x104 (_ bv1 256)))))
(assert (= (x312 (_ bv64 256) x242 (_ bv2 256)) (x178 (x312 (_ bv64 256) x242 (_ bv2 256)))))
(assert (= (x155 (x312 (_ bv64 256) x242 (_ bv2 256))) x242))
(assert (= (x178 (x312 (_ bv64 256) x29 x149)) (x312 (_ bv64 256) x29 x149)))
(assert (= (x178 x159) (x178 (bvadd x159 (_ bv1 256)))))
(assert (= (x178 (bvadd (_ bv1 256) x230)) (x178 x230)))
(assert (not (x114 (x312 (_ bv64 256) x274 (_ bv3 256)))))
(assert (= (x178 (x312 (_ bv64 256) x274 (_ bv2 256))) (x312 (_ bv64 256) x274 (_ bv2 256))))
(assert (= (x178 (x312 (_ bv64 256) x120 (_ bv3 256))) (x312 (_ bv64 256) x120 (_ bv3 256))))
(assert (=> (bvuge (_ bv10000 256) x248) (= (_ bv0 256) (x178 x248))))
(assert (= (x221 (x312 (_ bv64 256) x68 x32)) (_ bv64 256)))
(assert (x114 (_ bv4006518784 256)))
(assert (= (_ bv0 256) (x178 (_ bv3490909752 256))))
(assert (= (x178 (x312 (_ bv64 256) x36 (_ bv6 256))) (x312 (_ bv64 256) x36 (_ bv6 256))))
(assert (= (_ bv2 256) (x158 (x312 (_ bv64 256) x120 (_ bv2 256)))))
(assert (bvugt (x43 (_ bv160 256) x146 x276 x110 x129 x160) (_ bv10000 256)))
(assert (= (_ bv64 256) (x221 (x312 (_ bv64 256) x274 (_ bv3 256)))))
(assert (= (x178 (x312 (_ bv64 256) x242 (_ bv3 256))) (x312 (_ bv64 256) x242 (_ bv3 256))))
(assert (= (_ bv0 256) (x178 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (bvult (_ bv10000 256) (x312 (_ bv64 256) x36 (_ bv6 256))))
(assert (x114 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (=> (bvule x35 (_ bv10000 256)) (= (_ bv0 256) (x178 x35))))
(assert (=> (bvule x291 (_ bv10000 256)) (= (_ bv0 256) (x178 x291))))
(assert (= (x312 (_ bv64 256) x274 (_ bv3 256)) (x178 (x312 (_ bv64 256) x274 (_ bv3 256)))))
(assert (= (x155 (x312 (_ bv64 256) x68 x212)) x68))
(assert (= (_ bv64 256) (x221 (x312 (_ bv64 256) x120 (_ bv3 256)))))
(assert (= (x178 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256)) (_ bv0 256)))
(assert (= (x178 (x312 (_ bv64 256) x218 x294)) (x312 (_ bv64 256) x218 x294)))
(assert (= (x178 x271) (x178 (bvadd x271 (_ bv1 256)))))
(assert (=> (bvule x129 (_ bv10000 256)) (= (x178 x129) (_ bv0 256))))
(assert (= (and x200 (not x57)) x350))
(assert (= x212 (x158 (x312 (_ bv64 256) x68 x212))))
(assert (=> (bvuge (_ bv10000 256) x146) (= (x178 x146) (_ bv0 256))))
(assert (= (_ bv64 256) (x221 (x312 (_ bv64 256) x36 (_ bv6 256)))))
(assert (x114 (_ bv181336955 256)))
(assert (x114 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x114 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x178 (x43 (_ bv160 256) x177 x338 x248 x111 x172)) (x43 (_ bv160 256) x177 x338 x248 x111 x172)))
(assert (= (_ bv6 256) (x158 (x312 (_ bv64 256) x36 (_ bv6 256)))))
(assert (not (x114 (x312 (_ bv64 256) x68 x168))))
(assert (x114 (_ bv1000000000000000000000000000000000000 256)))
(assert (=> (bvule x29 (_ bv10000 256)) (= (x178 x29) (_ bv0 256))))
(assert (= (x221 (x312 (_ bv64 256) x68 x212)) (_ bv64 256)))
(assert (= x218 (x155 (x312 (_ bv64 256) x218 x294))))
(assert (not (x114 (x312 (_ bv64 256) x120 (_ bv3 256)))))
(assert (x114 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639680 256)))
(assert (= (x221 (x312 (_ bv64 256) x274 (_ bv2 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x178 (_ bv340282366920938463463374607431768211456 256))))
(assert (not (x114 (x312 (_ bv64 256) x218 x294))))
(assert (= x171 (=> (and (= x339 x235) (and (and (= (bvadd (_ bv1 256) x186) x346) (= (bvmul x330 x91) x124) (= x207 x181) (= (x237 (_ bv288 256)) x277) (= x332 (bvadd (_ bv1 256) x59)) (= x278 x330) (= (bvadd x286 (_ bv1000000 256)) x181) (= x345 (x312 (_ bv64 256) x242 (_ bv2 256))) (= x346 x91) (= (bvadd x207 (bvneg (_ bv1 256))) x216) (= (x2 x11) x63) (= (x312 (_ bv64 256) x218 x345) x59) (= (bvadd x104 (_ bv1 256)) x11) (= (x2 x324) x305) (= x278 x259) (= x134 false) (= x186 (bvand x63 (_ bv340282366920938463463374607431768211455 256))) (= x271 (x312 (_ bv64 256) x242 (_ bv3 256))) (= (bvadd x271 (_ bv1 256)) x324) (= x106 x181) (= x191 x235) (= x266 (x2 x332)) (= (bvudiv x305 (_ bv340282366920938463463374607431768211456 256)) x286) (= (bvand (_ bv340282366920938463463374607431768211455 256) x266) x259) (= (bvadd x216 x124) x79) (= x104 (x312 (_ bv64 256) x242 (_ bv3 256)))) (and (= x253 (bvudiv x79 x106)) (and (and (= (bvudiv x326 (_ bv1000000000000000000000000000000000000 256)) x119) (and (and (and (= x250 (not (bvugt x116 x6))) (= x175 x223) (= x183 x6) (= (ite x250 (_ bv1 256) (_ bv0 256)) x243)) (= x183 (bvudiv x233 (_ bv1000000000000000000 256)))) (and (bvule x233 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x233) (= x119 x7) (= x256 x7) (= x226 x16) (= x256 x273) (= false x228) (= x173 (_ bv1000000000000000000 256)) (= x16 x282) (= x233 (bvmul x282 x273))))) (and (= x226 (x237 (_ bv256 256))) (= false x164) (= (bvmul x280 x297) x326) (= x253 x116) (= x280 x69) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x326) (= x15 (x2 x308)) (= x209 x69) (bvuge x326 (_ bv0 256)) (= x297 x322) (= x277 x322) (= (bvadd x246 (_ bv1 256)) x308) (= (x312 (_ bv64 256) x218 x294) x246) (= (_ bv1000000000000000000000000000000000000 256) x252) (= x209 (bvudiv x15 (_ bv340282366920938463463374607431768211456 256))) (= (x312 (_ bv64 256) x242 (_ bv2 256)) x294)))))) x126)))
(assert (= (_ bv64 256) (x221 (x312 (_ bv64 256) x218 x84))))
(assert (= x321 (and x145 (not x354))))
(assert (= (x155 (x43 (_ bv160 256) x177 x338 x248 x111 x172)) x177))
(assert (x114 (_ bv1000000 256)))
(assert (= (_ bv0 256) (x178 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (bvult (_ bv10000 256) (x312 (_ bv64 256) x120 (_ bv2 256))))
(assert (bvult (_ bv10000 256) (x43 (_ bv160 256) x279 x247 x34 x35 x291)))
(assert (= (x158 (x312 (_ bv64 256) x68 x32)) x32))
(assert (bvugt (x312 (_ bv64 256) x242 (_ bv2 256)) (_ bv10000 256)))
(assert (not x197))
(assert (= (x158 (x43 (_ bv160 256) x177 x338 x248 x111 x172)) x338))
(assert (= (_ bv64 256) (x221 (x312 (_ bv64 256) x29 x149))))
(assert (not (x114 (x312 (_ bv64 256) x68 x32))))
(assert (= (_ bv2 256) (x158 (x312 (_ bv64 256) x274 (_ bv2 256)))))
(assert (= (x178 (x312 (_ bv64 256) x68 x168)) (x312 (_ bv64 256) x68 x168)))
(assert (not (x114 (x312 (_ bv64 256) x36 (_ bv6 256)))))
(assert (not (x114 (x312 (_ bv64 256) x218 x84))))
(assert (=> (bvule x279 (_ bv10000 256)) (= (_ bv0 256) (x178 x279))))
(assert (= (_ bv0 256) (x178 (_ bv1000000000000000000000000000000000000 256))))
(assert (= (x99 (x43 (_ bv160 256) x177 x338 x248 x111 x172)) x111))
(assert (= (x355 (x43 (_ bv160 256) x146 x276 x110 x129 x160)) x110))
(assert (= x291 (x331 (x43 (_ bv160 256) x279 x247 x34 x35 x291))))
(assert (= (x221 (x43 (_ bv160 256) x177 x338 x248 x111 x172)) (_ bv160 256)))
(assert (= x64 (and x292 x321)))
(assert (x114 (_ bv1000000000000000000 256)))
(assert (not (x114 (x312 (_ bv64 256) x274 (_ bv2 256)))))
(assert (= (x178 (_ bv1534929069 256)) (_ bv0 256)))
(assert (not (x114 (x312 (_ bv64 256) x29 x149))))
(assert (= (x178 (bvadd (_ bv1 256) x73)) (x178 x73)))
(assert (= (x178 x135) (x178 (bvadd x135 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x312 (_ bv64 256) x242 (_ bv3 256))))
(assert (= (and x98 x31) x304))
(assert (bvult (_ bv10000 256) (x312 (_ bv64 256) x274 (_ bv2 256))))
(assert (= (x178 (_ bv1058260626 256)) (_ bv0 256)))
(assert (= (x312 (_ bv64 256) x120 (_ bv2 256)) (x178 (x312 (_ bv64 256) x120 (_ bv2 256)))))
(assert (x114 (_ bv3490909752 256)))
(assert (x114 (_ bv340282366920938463463374607431768211456 256)))
(assert (= (x221 (x312 (_ bv64 256) x120 (_ bv2 256))) (_ bv64 256)))
(assert (=> (bvule x68 (_ bv10000 256)) (= (x178 x68) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x338) (= (x178 x338) (_ bv0 256))))
(assert (= x145 (or x341 x304)))
(assert (= x340 (and x145 x354)))
(assert (= (_ bv0 256) (x178 (_ bv4294967295 256))))
(assert (= (x155 (x312 (_ bv64 256) x68 x168)) x68))
(assert (= (or x340 x115) x87))
(assert (= (_ bv2 256) (x158 (x312 (_ bv64 256) x242 (_ bv2 256)))))
(assert (= (x221 (x312 (_ bv64 256) x242 (_ bv2 256))) (_ bv64 256)))
(assert (= (x312 (_ bv64 256) x218 x84) (x178 (x312 (_ bv64 256) x218 x84))))
(assert (= (_ bv0 256) (x178 (_ bv4006518784 256))))
(assert (= (_ bv0 256) (x178 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= x36 (x155 (x312 (_ bv64 256) x36 (_ bv6 256)))))
(assert (not (x114 (x312 (_ bv64 256) x270 x80))))
(assert (not (x114 (x43 (_ bv160 256) x279 x247 x34 x35 x291))))
(assert (x114 (_ bv1534929069 256)))
(assert (bvult (_ bv10000 256) (x312 (_ bv64 256) x68 x168)))
(assert (= (x158 (x43 (_ bv160 256) x146 x276 x110 x129 x160)) x276))
(assert (= x68 (x155 (x312 (_ bv64 256) x68 x32))))
(assert (=> (bvuge (_ bv10000 256) x270) (= (x178 x270) (_ bv0 256))))
(assert (= (x312 (_ bv64 256) x68 x212) (x178 (x312 (_ bv64 256) x68 x212))))
(assert (not (x114 (x312 (_ bv64 256) x242 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x312 (_ bv64 256) x218 x345)))
(assert (=> (bvule x36 (_ bv10000 256)) (= (_ bv0 256) (x178 x36))))
(assert (= (x178 (bvadd (_ bv1 256) x246)) (x178 x246)))
(assert (= (x178 (bvadd x59 (_ bv1 256))) (x178 x59)))
(assert (=> (bvule x110 (_ bv10000 256)) (= (_ bv0 256) (x178 x110))))
(assert (= (x158 (x312 (_ bv64 256) x68 x168)) x168))
(assert (= x84 (x158 (x312 (_ bv64 256) x218 x84))))
(assert (not (x114 (x43 (_ bv160 256) x146 x276 x110 x129 x160))))
(assert (= (x221 (x312 (_ bv64 256) x218 x345)) (_ bv64 256)))
(assert (= (x331 (x43 (_ bv160 256) x177 x338 x248 x111 x172)) x172))
(assert (=> (bvule x118 (_ bv10000 256)) (= (_ bv0 256) (x178 x118))))
(assert (x114 (_ bv72464927124685711895252664195178772226123872012682517813167109100718830649344 256)))
(assert (= x160 (x331 (x43 (_ bv160 256) x146 x276 x110 x129 x160))))
(assert (= (x178 (x43 (_ bv160 256) x146 x276 x110 x129 x160)) (x43 (_ bv160 256) x146 x276 x110 x129 x160)))
(assert (bvugt (x312 (_ bv64 256) x120 (_ bv3 256)) (_ bv10000 256)))
(assert (= (x178 x201) (x178 (bvadd (_ bv1 256) x201))))
(assert (=> (bvule x172 (_ bv10000 256)) (= (x178 x172) (_ bv0 256))))
(assert (= (x155 (x312 (_ bv64 256) x274 (_ bv2 256))) x274))
(assert (= x200 (and x98 (not x31))))
(assert (= (x355 (x43 (_ bv160 256) x177 x338 x248 x111 x172)) x248))
(assert (= x80 (x158 (x312 (_ bv64 256) x270 x80))))
(assert (x114 (_ bv3745429343 256)))
(assert (= (x178 (bvadd x53 (_ bv1 256))) (x178 x53)))
(assert (= (x178 (x312 (_ bv64 256) x218 x345)) (x312 (_ bv64 256) x218 x345)))
(assert (= (x221 (x312 (_ bv64 256) x218 x294)) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x274) (= (_ bv0 256) (x178 x274))))
(assert (= (_ bv3 256) (x158 (x312 (_ bv64 256) x242 (_ bv3 256)))))
(assert (x114 (_ bv999999999999999999 256)))
(assert (= x294 (x158 (x312 (_ bv64 256) x218 x294))))
(assert (= x29 (x155 (x312 (_ bv64 256) x29 x149))))
(assert (= x146 (x155 (x43 (_ bv160 256) x146 x276 x110 x129 x160))))
(check-sat)
(exit)
