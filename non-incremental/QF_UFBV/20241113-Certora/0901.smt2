(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x165 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x19 ((_ BitVec 256)) Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x41 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x113 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x167 () Bool)
(declare-fun x156 () Bool)
(declare-fun x174 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x46 () Bool)
(declare-fun x166 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x87 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x168 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x3 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x158 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x105 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x67 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x133 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x170 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x54 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x96 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x117 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x159 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x81 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x98 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x30 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x153 () Bool)
(declare-fun x172 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x169 () Bool)
(declare-fun x52 () Bool)
(declare-fun x137 () Bool)
(declare-fun x82 () Bool)
(declare-fun x155 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x148 () Bool)
(declare-fun x49 () Bool)
(declare-fun x70 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x33 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x93 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x110 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x91 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x18 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x152 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x20 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x55 () Bool)
(declare-fun x175 () Bool)
(declare-fun x62 () Bool)
(declare-fun x69 () Bool)
(declare-fun x157 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x107 () Bool)
(declare-fun x29 () Bool)
(declare-fun x84 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(define-fun x171 ((x135 (_ BitVec 256)) (x136 (_ BitVec 256))) Bool (= x135 (bvudiv (bvmul x136 x135) x136)))
(define-fun x42 ((x135 (_ BitVec 256)) (x136 (_ BitVec 256))) Bool (= x135 (bvsdiv (bvmul x135 x136) x136)))
(define-fun x141 ((x135 (_ BitVec 256)) (x136 (_ BitVec 256))) Bool (= x135 (bvsdiv (bvmul x136 x135) x136)))
(define-fun x8 ((x127 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x161 ((x127 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x114 ((x127 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x94 ((x127 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x126 ((x127 (_ BitVec 256))) (_ BitVec 256) (ite (= x127 x138) x66 (x155 x127)))
(define-fun x27 ((x127 (_ BitVec 256))) (_ BitVec 256) (ite (= x127 (_ bv164 256)) x144 (x8 x127)))
(define-fun x101 ((x127 (_ BitVec 256))) (_ BitVec 256) (ite (= x127 (_ bv196 256)) x74 (x27 x127)))
(define-fun x128 ((x127 (_ BitVec 256))) (_ BitVec 256) (ite (= x127 (_ bv228 256)) x40 (x101 x127)))
(define-fun x90 ((x127 (_ BitVec 256))) (_ BitVec 256) (ite (= x127 (_ bv128 256)) (_ bv100 256) (x161 x127)))
(define-fun x73 ((x127 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x127) x150 (x128 x127)))
(assert (not (x19 (x84 (_ bv64 256) x57 (_ bv61 256)))))
(assert (= x157 (=> (and (bvule (_ bv0 256) x56) (x171 x40 x16) (= x39 (_ bv128 256)) (= x56 (bvmul x40 x16)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x56) (= (x128 (_ bv160 256)) x104) (= (not (bvult (_ bv128 256) x129)) x103) (= x7 (_ bv0 256)) (= x129 (x90 (_ bv128 256))) (bvule (_ bv97 256) x129) (= x134 (bvudiv x56 (_ bv1000000000000000000 256))) (= x48 (bvand x104 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))) (bvule x16 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x32 (_ bv260 256)) (= x150 (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x48))) x103)))
(assert (= (x170 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= x175 (and x11 (not x12))))
(assert (x19 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (=> (= x132 x5) x87) x160))
(assert (= (x170 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x170 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (= x87 (=> (and (or (and (and (= (x84 (_ bv64 256) x57 (_ bv61 256)) x6) (not (bvugt x85 (bvadd x5 x85))) (= (x159 x6) x85) (= x162 (bvadd x5 x85))) (not x152)) x152) (= x152 (= (_ bv0 256) x5))) x157)))
(assert (bvult (_ bv10000 256) (x84 (_ bv64 256) x57 (_ bv61 256))))
(assert (= x164 (and x148 x81)))
(assert (= (=> (and (= (bvand (_ bv340282366920938463463374607431768211455 256) x149) x88) (= x71 x53)) x29) x30))
(assert (= (_ bv0 256) (x170 (_ bv2915661614 256))))
(assert (= (_ bv0 256) (x170 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (=> (and (= x163 (bvadd x17 (bvneg x86))) (not (bvult (bvadd x95 x172) x172)) (= x58 (bvadd x95 x172)) (not (bvult x17 x163)) (x171 x142 x163) (= x172 (bvudiv x151 x2)) (= x53 x58) (bvule x25 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv1 256) x2) (= (bvudiv x151 x125) x146) (= x36 (= x146 (_ bv1000000000000000000 256))) (= (bvmul x163 x142) x25) (= x25 x125) (or x36 x97) (bvule (_ bv0 256) x25) (= (= x125 (_ bv0 256)) x97) (= (bvmul x125 (_ bv1000000000000000000 256)) x151)) x31) x120))
(assert (= x165 (and x113 x112)))
(assert (= x156 (or x165 x44)))
(assert (x19 (_ bv20282409603651670423947251286015 256)))
(assert (= (=> (= (ite x131 x131 (not (bvugt x37 x86))) x67) (and (=> (and (= x95 x53) x67) x31) (=> (and (not x67) (and (= x12 (bvult x37 x149)) (or (and x12 (= x37 x17)) (and (= x17 x149) (not x12))))) x120))) x145))
(assert (= (or x147 x22) x109))
(assert (= (=> (and (or x148 (not x148)) (= x148 (= x53 x95))) x30) x31))
(assert (= (x98 (x84 (_ bv64 256) x57 x10)) (_ bv64 256)))
(assert (x19 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= x82 (or x164 x99)))
(assert (= (x18 (x84 (_ bv64 256) x74 (_ bv60 256))) x74))
(assert (= (_ bv61 256) (x93 (x84 (_ bv64 256) x57 (_ bv61 256)))))
(assert (= (and x11 x12) x139))
(assert (= (_ bv0 256) (x93 (x84 (_ bv64 256) x57 (_ bv0 256)))))
(assert (x19 (_ bv340282366920938463463374607431768211455 256)))
(assert (x19 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x19 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x170 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= x79 true))
(assert (= (=> (= (= x71 x102) x113) (and (=> (and x113 (= (_ bv0 256) x5)) x87) (=> (and (not x113) (and (= (= (_ bv0 256) x80) x61) (or (and x61 (= (_ bv0 256) x132)) (and (and (not (bvugt x108 x71)) (= x132 x77) (bvule (_ bv0 256) x65) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x65) (= x65 (bvmul x80 x108)) (= x108 (bvadd x71 (bvneg x102))) (= (bvudiv x65 (_ bv1000000000000000000 256)) x77) (x171 x80 x108)) (not x61))))) x160))) x29))
(assert (= (x170 (bvadd (_ bv2 256) x89)) (x170 x89)))
(assert (= x69 (=> (and (and (and (and (= x50 x21) (= (bvult (_ bv0 256) x1) x49) (= (_ bv0 256) x35) (= x89 (x84 (_ bv64 256) x74 (_ bv60 256))) (= x78 x51) (= (_ bv2915661614 256) x4) (bvuge (_ bv340282366920938463463374607431768211455 256) x86) (= (bvadd x149 (bvneg x86)) x1) (= x122 (bvadd (_ bv1 256) x89)) (= x45 x106) (bvule x80 (_ bv20282409603651670423947251286015 256)) (bvule (_ bv1 256) x63) (= x154 x138) (= x63 (x166 x74)) (= x106 (x126 x74)) (= (x168 x89) x86) (= (bvadd x89 (_ bv2 256)) x10) (= (x91 x122) x95) (= (x54 x116) x102) (= x66 (x155 x138)) (= x43 x66) (= (x158 x105) x80) (= (x84 (_ bv64 256) x57 x10) x116) (= x105 (x84 (_ bv64 256) x57 (_ bv0 256)))) (= x75 x149)) (= x144 x154)) (and (bvule (_ bv1 256) x40) (= x57 (x117 (_ bv4 256))) (= x83 (_ bv0 256)) (= (bvugt (x166 x124) (_ bv0 256)) x41) (bvuge x64 (_ bv0 256)) (bvule (_ bv0 256) x121) (bvule x121 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x124 x74)) (bvuge x38 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x74) (bvule (_ bv68 256) x92) x55 (bvuge x9 (_ bv0 256)) (bvuge x59 (_ bv1 256)) (= (_ bv1637409077 256) x119) (bvule x75 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x14 (x166 x74)) (bvule x64 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x50 x40) (= x57 x78) (bvuge x118 (_ bv0 256)) (bvule (_ bv0 256) x28) (bvule x9 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x130 (_ bv0 256)) (= (x117 (_ bv36 256)) x40) (bvuge x154 (_ bv0 256)) (bvuge x75 (_ bv0 256)) (bvule (_ bv1 256) x74) (bvule (_ bv1 256) x124) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x154) (bvule x130 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x28) (= (_ bv4 256) x15) (bvule x38 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x124) (bvule (_ bv0 256) x100) (bvule x92 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule x57 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x123) (bvuge x123 (_ bv0 256)) (bvuge (_ bv4294967295 256) x100) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x118) (bvule (_ bv1 256) x14) (= (bvult (_ bv0 256) (x166 x74)) x55) x41)) (and (=> (and (and (and (= x142 (x174 x89)) (bvule x142 (_ bv340282366920938463463374607431768211455 256)) (= x107 (ite (= x142 (_ bv0 256)) (= (_ bv0 256) x142) (= (_ bv0 256) x2)))) (or (and x107 (= x131 x107)) (and (= x131 (= x149 x86)) (not x107)))) x49) x145) (=> (and (= x95 x71) (not x49)) x29)))))
(assert (x19 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (bvult (_ bv10000 256) (x84 (_ bv64 256) x74 (_ bv60 256))))
(assert (= (_ bv0 256) (x170 (_ bv20282409603651670423947251286015 256))))
(assert (= (x170 (bvadd x89 (_ bv1 256))) (x170 x89)))
(assert (= (_ bv0 256) (x170 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (not (x19 (x84 (_ bv64 256) x57 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x124) (= (x170 x124) (_ bv0 256))))
(assert (not (x19 (x84 (_ bv64 256) x57 x10))))
(assert (= (and x79 x49) x115))
(assert (= (_ bv64 256) (x98 (x84 (_ bv64 256) x74 (_ bv60 256)))))
(assert (= (_ bv0 256) (x170 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (= x23 (and x26 x61)))
(assert (not x69))
(assert (= (x98 (x84 (_ bv64 256) x57 (_ bv0 256))) (_ bv64 256)))
(assert (= (and x107 x115) x147))
(assert (bvugt (x84 (_ bv64 256) x57 x10) (_ bv10000 256)))
(assert (= (x170 (x84 (_ bv64 256) x57 x10)) (x84 (_ bv64 256) x57 x10)))
(assert (= (and x112 (not x113)) x26))
(assert (= (or x139 x175) x96))
(assert (= x3 (and x156 x152)))
(assert (= x10 (x93 (x84 (_ bv64 256) x57 x10))))
(assert (= (and x156 (not x152)) x13))
(assert (= (x84 (_ bv64 256) x57 (_ bv61 256)) (x170 (x84 (_ bv64 256) x57 (_ bv61 256)))))
(assert (= x57 (x18 (x84 (_ bv64 256) x57 (_ bv61 256)))))
(assert (bvult (_ bv10000 256) (x84 (_ bv64 256) x57 (_ bv0 256))))
(assert (= (x98 (x84 (_ bv64 256) x57 (_ bv61 256))) (_ bv64 256)))
(assert (= (x170 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (x19 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (not (x19 (x84 (_ bv64 256) x74 (_ bv60 256)))))
(assert (= x81 (or x96 x33)))
(assert (= (_ bv0 256) (x170 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (and x26 (not x61)) x70))
(assert (= x20 (or x13 x3)))
(assert (= x22 (and (not x107) x115)))
(assert (= x11 (and x109 (not x67))))
(assert (= (x170 (_ bv1637409077 256)) (_ bv0 256)))
(assert (= (x84 (_ bv64 256) x57 (_ bv0 256)) (x170 (x84 (_ bv64 256) x57 (_ bv0 256)))))
(assert (= (_ bv60 256) (x93 (x84 (_ bv64 256) x74 (_ bv60 256)))))
(assert (= (or x140 x82) x112))
(assert (=> (bvule x138 (_ bv10000 256)) (= (x170 x138) (_ bv0 256))))
(assert (x19 (_ bv1000000000000000000 256)))
(assert (x19 (_ bv2915661614 256)))
(assert (= (and x81 (not x148)) x99))
(assert (= (x84 (_ bv64 256) x74 (_ bv60 256)) (x170 (x84 (_ bv64 256) x74 (_ bv60 256)))))
(assert (= x33 (and x67 x109)))
(assert (=> (bvuge (_ bv10000 256) x74) (= (x170 x74) (_ bv0 256))))
(assert (= (x18 (x84 (_ bv64 256) x57 x10)) x57))
(assert (=> (bvuge (_ bv10000 256) x57) (= (x170 x57) (_ bv0 256))))
(assert (= (and x79 (not x49)) x140))
(assert (= x57 (x18 (x84 (_ bv64 256) x57 (_ bv0 256)))))
(assert (= x44 (or x23 x70)))
(assert (x19 (_ bv1637409077 256)))
(assert (x19 (_ bv4294967295 256)))
(check-sat)
(exit)
