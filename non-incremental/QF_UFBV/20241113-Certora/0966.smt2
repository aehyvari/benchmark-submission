(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x319 () Bool)
(declare-fun x250 () Bool)
(declare-fun x10 () Bool)
(declare-fun x307 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x154 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x45 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x261 () Bool)
(declare-fun x280 () Bool)
(declare-fun x323 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x140 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x264 () Bool)
(declare-fun x64 () Bool)
(declare-fun x233 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x32 () Bool)
(declare-fun x270 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x79 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x56 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x229 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x161 () Bool)
(declare-fun x35 () (_ BitVec 256))
(declare-fun x267 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x193 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x145 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x257 () Bool)
(declare-fun x176 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x87 () Bool)
(declare-fun x292 () (_ BitVec 256))
(declare-fun x273 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x322 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x239 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x283 () Bool)
(declare-fun x172 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x329 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x304 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x43 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x89 () Bool)
(declare-fun x48 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x221 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x285 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x327 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x223 () Bool)
(declare-fun x311 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x31 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x210 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x310 () Bool)
(declare-fun x72 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x62 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x296 () (_ BitVec 256))
(declare-fun x173 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x324 () Bool)
(declare-fun x253 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x189 () Bool)
(declare-fun x12 () Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x321 ((_ BitVec 256)) Bool)
(declare-fun x134 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x302 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x231 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x226 () (_ BitVec 256))
(declare-fun x136 () Bool)
(declare-fun x276 () Bool)
(declare-fun x242 () Bool)
(declare-fun x164 () (_ BitVec 256))
(declare-fun x303 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x211 () Bool)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x232 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x178 () Bool)
(declare-fun x191 () (_ BitVec 256))
(declare-fun x207 () Bool)
(declare-fun x58 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x266 () Bool)
(declare-fun x1 () Bool)
(declare-fun x289 () Bool)
(declare-fun x294 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x158 () Bool)
(declare-fun x188 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x313 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x66 () Bool)
(declare-fun x153 () Bool)
(declare-fun x268 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x9 () Bool)
(declare-fun x306 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x281 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x293 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x215 () Bool)
(declare-fun x82 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x309 () (_ BitVec 256))
(declare-fun x299 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x28 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x240 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x196 () Bool)
(declare-fun x326 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x316 () (_ BitVec 256))
(declare-fun x157 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x320 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x24 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x120 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x83 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x194 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x179 () Bool)
(define-fun x23 ((x225 (_ BitVec 256)) (x142 (_ BitVec 256))) Bool (= x225 (bvudiv (bvmul x142 x225) x142)))
(define-fun x162 ((x225 (_ BitVec 256)) (x142 (_ BitVec 256))) Bool (= x225 (bvsdiv (bvmul x225 x142) x142)))
(define-fun x107 ((x225 (_ BitVec 256)) (x142 (_ BitVec 256))) Bool (= x225 (bvsdiv (bvmul x142 x225) x142)))
(define-fun x217 ((x255 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x128 ((x255 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x159 ((x255 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x6 ((x255 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x33 ((x255 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x132 ((x255 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x111 ((x255 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x218 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 x175) x135 (x303 x255)))
(define-fun x254 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 x22) x131 (x218 x255)))
(define-fun x168 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 x101) x186 (x176 x255)))
(define-fun x75 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite x81 (x176 x255) (x168 x255)))
(define-fun x114 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 x294) x237 (x134 x255)))
(define-fun x275 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite x312 (ite x103 (x134 x255) (x114 x255)) (x134 x255)))
(define-fun x137 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x255) x237 (x33 x255)))
(define-fun x328 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite x312 (ite x103 (x33 x255) (x137 x255)) (x33 x255)))
(define-fun x41 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv128 256)) x186 (x328 x255)))
(define-fun x100 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite x81 (x328 x255) (x41 x255)))
(define-fun x143 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv128 256)) x246 (x100 x255)))
(define-fun x97 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv160 256)) x263 (x143 x255)))
(define-fun x70 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite x7 (x100 x255) (x97 x255)))
(define-fun x197 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv164 256)) x62 (x217 x255)))
(define-fun x227 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x255) x164 (x197 x255)))
(define-fun x315 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv228 256)) x98 (x227 x255)))
(define-fun x21 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x255) (_ bv100 256) (x128 x255)))
(define-fun x198 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x255) x124 (x315 x255)))
(define-fun x269 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv324 256)) x125 (x70 x255)))
(define-fun x67 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv356 256)) x13 (x269 x255)))
(define-fun x108 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x255) x180 (x67 x255)))
(define-fun x50 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv324 256)) (_ bv32 256) (x132 x255)))
(define-fun x222 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv0 256)) (_ bv1 256) (x270 x255)))
(define-fun x236 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvugt (_ bv388 256) x255) (bvuge x255 (_ bv356 256))) (x222 (bvadd (bvneg (_ bv356 256)) x255)) (x111 x255)))
(define-fun x29 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 (_ bv420 256)) x305 (x108 x255)))
(define-fun x200 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite x83 (x108 x255) (ite x2 (x67 x255) (ite x223 (x269 x255) (ite x89 (x70 x255) (x29 x255))))))
(define-fun x110 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x255 x224) (_ bv0 256) (x200 x255)))
(define-fun x37 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 x255) x308 (x254 x255)))
(define-fun x301 ((x255 (_ BitVec 256))) (_ BitVec 256) (ite (= x116 x255) x92 (x231 x255)))
(assert (not (x321 (x304 (_ bv64 256) x300 x185))))
(assert (= (or x81 x211) x59))
(assert (= (x120 x19) (x120 (bvadd x19 (_ bv1 256)))))
(assert (= (and x310 x1) x140))
(assert (= (x210 (x304 (_ bv64 256) x300 x185)) x185))
(assert (x321 (_ bv2593764592 256)))
(assert (= (and x297 (not x44)) x2))
(assert (= (_ bv0 256) (x120 (_ bv20282409603651670423947251286015 256))))
(assert (not (x321 (x304 (_ bv64 256) x246 (_ bv61 256)))))
(assert (not (x321 (x304 (_ bv64 256) x246 (_ bv0 256)))))
(assert (= (x120 (_ bv2727740892 256)) (_ bv0 256)))
(assert (= (and x228 (not x189)) x310))
(assert (=> (bvule x164 (_ bv10000 256)) (= (_ bv0 256) (x120 x164))))
(assert (not x56))
(assert (not (x321 (x304 (_ bv64 256) x62 (_ bv2 256)))))
(assert (= (x173 (x304 (_ bv64 256) x96 (_ bv60 256))) (_ bv64 256)))
(assert (= (x193 (x304 (_ bv64 256) x62 (_ bv2 256))) x62))
(assert (not (x321 (x304 (_ bv64 256) x246 x129))))
(assert (x321 (_ bv1000000000000000000 256)))
(assert (bvult (_ bv10000 256) (x304 (_ bv64 256) x300 x185)))
(assert (= x76 (x193 (x304 (_ bv64 256) x76 x68))))
(assert (= (x173 (x304 (_ bv64 256) x99 (_ bv60 256))) (_ bv64 256)))
(assert (bvugt (x304 (_ bv64 256) x22 (_ bv60 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x304 (_ bv64 256) x76 x68)))
(assert (bvult (_ bv10000 256) (x304 (_ bv64 256) x246 x129)))
(assert (= x300 (x193 (x304 (_ bv64 256) x300 x185))))
(assert (= x272 (=> (and (= (bvadd x201 x46) x252) (= (bvadd x202 (bvneg x291)) x205) (= x284 (bvmul x205 x279)) (= x121 (= (_ bv1000000000000000000 256) x238)) (= x284 x248) (= x237 x252) (not (bvult (bvadd x201 x46) x201)) (not (bvugt x205 x202)) (x23 x279 x205) (or x239 x121) (= x47 (bvmul (_ bv1000000000000000000 256) x248)) (bvule (_ bv0 256) x284) (bvuge x20 (_ bv1 256)) (= x238 (bvudiv x47 x248)) (= x239 (= x248 (_ bv0 256))) (= x201 (bvudiv x47 x20)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x284)) x152)))
(assert (=> (bvule x288 (_ bv10000 256)) (= (x120 x288) (_ bv0 256))))
(assert (= x243 (or x312 x32)))
(assert (= x166 (=> (= (ite x87 x87 (not (bvugt x165 x291))) x189) (and (=> (and (= x237 x46) x189) x152) (=> (and (and (or (and (not x1) (= x49 x202)) (and x1 (= x202 x165))) (= (bvult x165 x49) x1)) (not x189)) x272)))))
(assert (= (or x7 x146) x15))
(assert (= x261 (=> (= (= x186 x71) x126) (and (=> (and x126 (= x263 (_ bv0 256))) x64) (=> (and (and (or (and (not x286) (and (x23 x262 x226) (= x226 (bvadd (bvneg x71) x186)) (= x151 (bvudiv x122 (_ bv1000000000000000000 256))) (bvule (_ bv0 256) x122) (not (bvugt x226 x186)) (= (bvmul x262 x226) x122) (bvule x122 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x151 x34))) (and x286 (= x34 (_ bv0 256)))) (= (= (_ bv0 256) x262) x286)) (not x126)) x66)))))
(assert (= x196 (=> (and (= x258 (bvand (_ bv340282366920938463463374607431768211455 256) x49)) (= x186 x237)) x261)))
(assert (= x211 (or x307 x302)))
(assert (= x312 (or x8 x103)))
(assert (= (x173 (x304 (_ bv64 256) x80 (_ bv60 256))) (_ bv64 256)))
(assert (= (x210 (x304 (_ bv64 256) x246 x129)) x129))
(assert (bvugt (x304 (_ bv64 256) x246 (_ bv61 256)) (_ bv10000 256)))
(assert (= (x173 (x304 (_ bv64 256) x62 (_ bv2 256))) (_ bv64 256)))
(assert (x321 (_ bv4294967295 256)))
(assert (=> (bvuge (_ bv10000 256) x93) (= (_ bv0 256) (x120 x93))))
(assert (= (_ bv2 256) (x210 (x304 (_ bv64 256) x164 (_ bv2 256)))))
(assert (= (x173 (x304 (_ bv64 256) x22 x16)) (_ bv64 256)))
(assert (= x307 (and x250 x286)))
(assert (bvugt (x304 (_ bv64 256) x99 (_ bv60 256)) (_ bv10000 256)))
(assert (= (x193 (x304 (_ bv64 256) x22 (_ bv60 256))) x22))
(assert (= x16 (x210 (x304 (_ bv64 256) x22 x16))))
(assert (= (x120 (bvadd (_ bv2 256) x57)) (x120 x57)))
(assert (not (x321 (x304 (_ bv64 256) x22 (_ bv60 256)))))
(assert (=> (bvule x76 (_ bv10000 256)) (= (_ bv0 256) (x120 x76))))
(assert (not (x321 (x304 (_ bv64 256) x96 (_ bv60 256)))))
(assert (= (x120 (bvadd (_ bv2 256) x292)) (x120 x292)))
(assert (= (x304 (_ bv64 256) x22 (_ bv60 256)) (x120 (x304 (_ bv64 256) x22 (_ bv60 256)))))
(assert (= (or (and (not x251) x24) x172) x320))
(assert (= x288 (x193 (x304 (_ bv64 256) x288 (_ bv60 256)))))
(assert (=> (bvuge (_ bv10000 256) x80) (= (x120 x80) (_ bv0 256))))
(assert (= x22 (x193 (x304 (_ bv64 256) x22 x16))))
(assert (= x24 (or x223 x89 x83 x178 x2)))
(assert (= (and (not x207) x158) x8))
(assert (= x119 (and x320 x257)))
(assert (= x152 (=> (and (or (not x207) x207) (= x207 (= x46 x237))) x196)))
(assert (= (x304 (_ bv64 256) x300 x185) (x120 (x304 (_ bv64 256) x300 x185))))
(assert (=> (bvuge (_ bv10000 256) x300) (= (x120 x300) (_ bv0 256))))
(assert (= (_ bv0 256) (x120 (_ bv4294967295 256))))
(assert (= (x193 (x304 (_ bv64 256) x80 (_ bv60 256))) x80))
(assert (= (and x126 x243) x81))
(assert (= (_ bv0 256) (x120 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (=> (bvule x246 (_ bv10000 256)) (= (_ bv0 256) (x120 x246))))
(assert (= (or x194 x322) x228))
(assert (= (and x228 x189) x276))
(assert (= (x120 (x304 (_ bv64 256) x62 (_ bv2 256))) (x304 (_ bv64 256) x62 (_ bv2 256))))
(assert (x321 (_ bv20282409603651670423947251286015 256)))
(assert (x321 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (and x42 x264) x280))
(assert (= x62 (x193 (x304 (_ bv64 256) x62 (_ bv3 256)))))
(assert (= (x210 (x304 (_ bv64 256) x62 (_ bv2 256))) (_ bv2 256)))
(assert (= (x210 (x304 (_ bv64 256) x96 (_ bv60 256))) (_ bv60 256)))
(assert (= (and x113 x59) x7))
(assert (= (and x298 x280) x194))
(assert (= (x120 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x120 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (bvugt (x304 (_ bv64 256) x62 (_ bv3 256)) (_ bv10000 256)))
(assert (= (x120 (x304 (_ bv64 256) x96 (_ bv60 256))) (x304 (_ bv64 256) x96 (_ bv60 256))))
(assert (= (x120 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (= x264 true))
(assert (x321 (_ bv2727740892 256)))
(assert (=> (bvuge (_ bv10000 256) x99) (= (_ bv0 256) (x120 x99))))
(assert (=> (bvule x22 (_ bv10000 256)) (= (_ bv0 256) (x120 x22))))
(assert (x321 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= (=> (and (and (= x72 x244) (= x203 x84) (= (_ bv68 256) x221)) (and (= x80 x84) (and (and (= x88 (x304 (_ bv64 256) x99 (_ bv60 256))) (= x51 (_ bv2727740892 256)) (= x99 x247) (bvuge x259 (_ bv1 256)) (= x296 x99) (= (bvuge x187 x30) x317) (= (bvadd x88 (_ bv1 256)) x155) (= x259 (x145 x22)) (= (x275 x155) x187)) (and (bvuge x144 (_ bv1 256)) (= x214 x300) (= (x304 (_ bv64 256) x300 x185) x40) (= x300 x72) (= x318 (x304 (_ bv64 256) x80 (_ bv60 256))) (= x247 x203) (= (bvadd x318 (_ bv2 256)) x185) (= (_ bv1817583341 256) x105) (= (x145 x22) x144) (= x30 (x75 x40)) (= x230 (_ bv36 256)) (= x191 x80))))) x317) x190))
(assert (= (x304 (_ bv64 256) x99 (_ bv60 256)) (x120 (x304 (_ bv64 256) x99 (_ bv60 256)))))
(assert (= (=> (and (= (_ bv128 256) x26) (= x309 (x315 (_ bv160 256))) (= x98 (ite (bvult x148 x199) x148 x199)) (= (bvand x309 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) x329) (= (bvadd x148 (bvneg x98)) x112) (= x124 (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x329)) (= (_ bv260 256) x265) (bvule (_ bv1 256) x98) (= x283 (bvugt x63 (_ bv0 256))) (= x63 (x21 (_ bv128 256))) (not (bvult x148 x112)) (= x39 (_ bv0 256)) (= (bvand x156 (_ bv1461501637330902918203684832716283019655932542975 256)) x62)) (and (=> (not x283) x242) (=> (and (and (= x125 (x198 (_ bv160 256))) (= (bvugt x63 (_ bv32 256)) x319)) x283) (and (=> (not x319) x242) (=> (and (and (= (bvugt x63 (_ bv64 256)) x44) (= (x198 (_ bv192 256)) x13)) x319) (and (=> (and (and (= (x198 (_ bv224 256)) x180) (= x157 (bvugt x63 (_ bv96 256)))) x44) (and (=> x157 x43) (=> (not x157) x242))) (=> (not x44) x242))))))) x290))
(assert (= (x120 (x304 (_ bv64 256) x76 x68)) (x304 (_ bv64 256) x76 x68)))
(assert (= (_ bv64 256) (x173 (x304 (_ bv64 256) x246 x129))))
(assert (= (x120 (x304 (_ bv64 256) x288 (_ bv60 256))) (x304 (_ bv64 256) x288 (_ bv60 256))))
(assert (= x99 (x193 (x304 (_ bv64 256) x99 (_ bv60 256)))))
(assert (x321 (_ bv599290589 256)))
(assert (= (x120 (x304 (_ bv64 256) x246 (_ bv0 256))) (x304 (_ bv64 256) x246 (_ bv0 256))))
(assert (= (x120 x318) (x120 (bvadd x318 (_ bv2 256)))))
(assert (= (x173 (x304 (_ bv64 256) x300 x185)) (_ bv64 256)))
(assert (= (_ bv64 256) (x173 (x304 (_ bv64 256) x76 x68))))
(assert (= (and (not x286) x250) x302))
(assert (= (x173 (x304 (_ bv64 256) x246 (_ bv0 256))) (_ bv64 256)))
(assert (not (x321 (x304 (_ bv64 256) x76 x68))))
(assert (x321 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (_ bv64 256) (x173 (x304 (_ bv64 256) x22 (_ bv60 256)))))
(assert (= (_ bv60 256) (x210 (x304 (_ bv64 256) x99 (_ bv60 256)))))
(assert (= (x210 (x304 (_ bv64 256) x80 (_ bv60 256))) (_ bv60 256)))
(assert (= (x193 (x304 (_ bv64 256) x246 (_ bv0 256))) x246))
(assert (bvugt (x304 (_ bv64 256) x288 (_ bv60 256)) (_ bv10000 256)))
(assert (not (x321 (x304 (_ bv64 256) x164 (_ bv2 256)))))
(assert (= (x304 (_ bv64 256) x62 (_ bv3 256)) (x120 (x304 (_ bv64 256) x62 (_ bv3 256)))))
(assert (= (x120 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= x215 (or x140 x192)))
(assert (= x242 (=> (and (or (not x251) (and (and (= true x267) (bvule (_ bv1 256) x233) (= x233 (x145 x93))) x251)) (and (= x314 (x304 (_ bv64 256) x22 x16)) (= x170 x308) (= x251 (= (_ bv0 256) x18)) (= x16 (x304 (_ bv64 256) x62 (_ bv3 256))) (= x182 x14) (not (bvugt x98 x139)) (= x183 x77) (= (x254 x22) x308) (= x256 (x145 x93)) (= (bvadd x98 x160) x149) (not (bvult x149 x160)) (= (_ bv1 256) x253) (= x150 x79) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x106) (= (_ bv100 256) x271) (= x184 (_ bv100 256)) (not (bvugt x98 x90)) (bvuge x139 (_ bv1 256)) (= (x304 (_ bv64 256) x164 (_ bv2 256)) x36) (= (bvadd (bvneg x98) x90) x92) (= (x304 (_ bv64 256) x62 (_ bv2 256)) x116) (= x326 (x304 (_ bv64 256) x62 (_ bv2 256))) (not (bvult x90 x92)) (= x62 x183) (= x90 (x231 x326)) (= x139 (x45 x314)) (= x14 (x37 x93)) (= x160 (x301 x36)) (not (bvult x139 x219)) (= x98 x79) (= x181 (_ bv324 256)) (= x316 x130) (= (bvadd (_ bv324 256) x63) x224) (= (_ bv324 256) x27) (= x184 (bvadd x224 (bvneg (_ bv324 256)))) (bvuge x256 (_ bv1 256)) (bvule (_ bv1 256) x90) (= (x50 (_ bv324 256)) x18) (= x219 (bvadd x139 (bvneg x98))) (= x316 x69) (not (bvult x149 x160)) (= x3 (_ bv599290589 256)))) x204)))
(assert (= (and x264 (not x42)) x32))
(assert (= (x210 (x304 (_ bv64 256) x246 (_ bv61 256))) (_ bv61 256)))
(assert (= x172 (and x24 x251)))
(assert (= (and x115 x319) x297))
(assert (= x158 (or x215 x276)))
(assert (not (x321 (x304 (_ bv64 256) x99 (_ bv60 256)))))
(assert (= (x173 (x304 (_ bv64 256) x288 (_ bv60 256))) (_ bv64 256)))
(assert (= (and x158 x207) x103))
(assert (= (x120 (x304 (_ bv64 256) x164 (_ bv2 256))) (x304 (_ bv64 256) x164 (_ bv2 256))))
(assert (x321 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x246 (x193 (x304 (_ bv64 256) x246 (_ bv61 256)))))
(assert (= (x120 (_ bv1817583341 256)) (_ bv0 256)))
(assert (= (x120 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (x321 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (=> (and (and (= x288 x208) (and (and (= x76 x220) (= x232 (x304 (_ bv64 256) x76 x68)) (bvule (_ bv1 256) x55) (= x163 x288) (= (x176 x232) x147) (= x203 x117) (= x76 x281) (= (_ bv36 256) x78) (= (x304 (_ bv64 256) x288 (_ bv60 256)) x57) (= x245 (_ bv1817583341 256)) (= x55 (x145 x22)) (= x68 (bvadd x57 (_ bv2 256)))) (and (and (= x246 x325) (and (and (= (_ bv0 256) x268) (= x42 (bvult (_ bv0 256) x60)) (= (bvadd (bvneg x291) x49) x60) (= x212 (x145 x22)) (= (x304 (_ bv64 256) x22 (_ bv60 256)) x292) (= x129 (bvadd (_ bv2 256) x292)) (= (x31 x292) x291) (= x169 (x304 (_ bv64 256) x246 (_ bv0 256))) (= x206 (x218 x22)) (= x240 (x304 (_ bv64 256) x246 x129)) (= (_ bv2593764592 256) x86) (= x235 x135) (= x206 x131) (= (x299 x169) x262) (= (x176 x240) x71) (bvuge (_ bv20282409603651670423947251286015 256) x262) (= (x303 x175) x135) (= x133 x213) (bvule (_ bv1 256) x212) (= (x134 x294) x46) (= x175 x325) (bvule x291 (_ bv340282366920938463463374607431768211455 256)) (= (bvadd (_ bv1 256) x292) x294) (= x69 x311)) (= x216 x49))) (and (= (x145 x22) x123) (bvule (_ bv1 256) x199) (bvule x164 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x234 x96) (= x311 x164) (= (x285 (_ bv4 256)) x164) (= x19 (x304 (_ bv64 256) x96 (_ bv60 256))) (= x293 (x134 x260)) (= x199 (x285 (_ bv36 256))) x266 (= x188 (_ bv2727740892 256)) (bvule (_ bv1 256) x123) (= (bvule x147 x293) x266) (= x199 x213) (= x260 (bvadd x19 (_ bv1 256))) (= x96 x117))))) (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x61) (bvuge x171 (_ bv0 256)) (bvuge x52 (_ bv0 256)) (bvuge x216 (_ bv0 256)) (bvule x91 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x25 (bvule (_ bv0 256) x74) (= x58 (bvult (_ bv0 256) (x145 x93))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x177) (bvule x22 (_ bv1461501637330902918203684832716283019655932542975 256)) x58 (bvule (_ bv1 256) x93) (bvule x74 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x208 x203) (= (_ bv68 256) x73) (bvule (_ bv0 256) x167) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x54) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x203) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x167) (bvuge (_ bv4294967295 256) x52) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x244) (bvule x171 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x177) (bvuge x203 (_ bv0 256)) (bvule (_ bv0 256) x61) (bvuge x91 (_ bv0 256)) (bvule (_ bv68 256) x54) (bvule x85 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x216) (bvule (_ bv1 256) x22) (= x244 x220) (not (= x22 x93)) (= x25 (bvugt (x145 x22) (_ bv0 256))) (= (_ bv0 256) x118) (bvule x325 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x244) (bvuge x325 (_ bv0 256)) (bvule x282 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x282 (_ bv0 256)) (bvule (_ bv0 256) x85) (bvule x93 (_ bv1461501637330902918203684832716283019655932542975 256)))) (and (=> (and (= x46 x186) (not x42)) x261) (=> (and (and (and (= (ite (= x279 (_ bv0 256)) (= (_ bv0 256) x279) (= (_ bv0 256) x20)) x298) (= (x154 x292) x279) (bvuge (_ bv340282366920938463463374607431768211455 256) x279)) (or (and (= (= x49 x291) x87) (not x298)) (and x298 (= x87 x298)))) x42) x166))) x56))
(assert (= (and x9 (not x157)) x83))
(assert (= (x304 (_ bv64 256) x22 x16) (x120 (x304 (_ bv64 256) x22 x16))))
(assert (= (=> (and (or (not x257) (and (and (bvule x277 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (x50 (_ bv324 256)) x277) (= x287 (_ bv1 256)) (= x287 (x236 (_ bv356 256))) (bvule (_ bv32 256) x277)) x257)) (and (= (_ bv324 256) x313) (= (bvult (_ bv0 256) x249) x257) (= (_ bv324 256) x65) (= (x50 (_ bv324 256)) x249) (= (_ bv324 256) x4))) x190) x204))
(assert (= (x120 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (_ bv0 256)))
(assert (bvult (_ bv10000 256) (x304 (_ bv64 256) x96 (_ bv60 256))))
(assert (= (x120 (_ bv599290589 256)) (_ bv0 256)))
(assert (= x322 (and (not x298) x280)))
(assert (= (x304 (_ bv64 256) x246 (_ bv61 256)) (x120 (x304 (_ bv64 256) x246 (_ bv61 256)))))
(assert (= (x210 (x304 (_ bv64 256) x76 x68)) x68))
(assert (= (and (not x113) x59) x146))
(assert (= (=> (and (= x305 (x198 (_ bv256 256))) (= x10 (not (bvugt x63 (_ bv128 256))))) (and x242 x10)) x43))
(assert (bvult (_ bv10000 256) (x304 (_ bv64 256) x62 (_ bv2 256))))
(assert (bvugt (x304 (_ bv64 256) x22 x16) (_ bv10000 256)))
(assert (=> (bvule x62 (_ bv10000 256)) (= (x120 x62) (_ bv0 256))))
(assert (= (x120 (bvadd (_ bv1 256) x88)) (x120 x88)))
(assert (= (and x15 (not x283)) x89))
(assert (= x250 (and (not x126) x243)))
(assert (= (and x44 x297) x9))
(assert (= (_ bv0 256) (x120 (_ bv2593764592 256))))
(assert (= (x120 (x304 (_ bv64 256) x80 (_ bv60 256))) (x304 (_ bv64 256) x80 (_ bv60 256))))
(assert (bvugt (x304 (_ bv64 256) x80 (_ bv60 256)) (_ bv10000 256)))
(assert (= (=> (and (= x101 (x304 (_ bv64 256) x246 x129)) (= x263 x34)) x64) x66))
(assert (=> (bvuge (_ bv10000 256) x175) (= (_ bv0 256) (x120 x175))))
(assert (= (x210 (x304 (_ bv64 256) x62 (_ bv3 256))) (_ bv3 256)))
(assert (x321 (_ bv1817583341 256)))
(assert (= x164 (x193 (x304 (_ bv64 256) x164 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x304 (_ bv64 256) x164 (_ bv2 256))))
(assert (x321 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (_ bv60 256) (x210 (x304 (_ bv64 256) x288 (_ bv60 256)))))
(assert (= (x304 (_ bv64 256) x246 x129) (x120 (x304 (_ bv64 256) x246 x129))))
(assert (= (x210 (x304 (_ bv64 256) x22 (_ bv60 256))) (_ bv60 256)))
(assert (= (x210 (x304 (_ bv64 256) x246 (_ bv0 256))) (_ bv0 256)))
(assert (= x115 (and x283 x15)))
(assert (not (x321 (x304 (_ bv64 256) x80 (_ bv60 256)))))
(assert (= (and (not x1) x310) x192))
(assert (= x96 (x193 (x304 (_ bv64 256) x96 (_ bv60 256)))))
(assert (= (_ bv64 256) (x173 (x304 (_ bv64 256) x164 (_ bv2 256)))))
(assert (= (x173 (x304 (_ bv64 256) x62 (_ bv3 256))) (_ bv64 256)))
(assert (= x246 (x193 (x304 (_ bv64 256) x246 x129))))
(assert (= x323 (or (and (not x257) x320) x119)))
(assert (= (x120 (bvadd (_ bv1 256) x292)) (x120 x292)))
(assert (not (x321 (x304 (_ bv64 256) x22 x16))))
(assert (not (x321 (x304 (_ bv64 256) x288 (_ bv60 256)))))
(assert (= x223 (and (not x319) x115)))
(assert (= (_ bv64 256) (x173 (x304 (_ bv64 256) x246 (_ bv61 256)))))
(assert (bvugt (x304 (_ bv64 256) x246 (_ bv0 256)) (_ bv10000 256)))
(assert (= x178 (and x157 x9)))
(assert (not (x321 (x304 (_ bv64 256) x62 (_ bv3 256)))))
(assert (= (=> (and (or (not x113) x113) (and (= x113 (= (_ bv0 256) x263)) (not (bvult (bvadd x35 x263) x35)) (= x53 (x304 (_ bv64 256) x246 (_ bv61 256))) (= x35 (x82 x53)) (= x148 (bvadd x263 x35)))) x290) x64))
(assert (=> (bvuge (_ bv10000 256) x96) (= (_ bv0 256) (x120 x96))))
(check-sat)
(exit)
