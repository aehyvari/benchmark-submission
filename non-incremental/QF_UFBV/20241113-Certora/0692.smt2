(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x153 () Bool)
(declare-fun x42 () Bool)
(declare-fun x168 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x310 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x292 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x232 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x102 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x260 () Bool)
(declare-fun x120 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x22 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x214 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x129 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x64 () Bool)
(declare-fun x130 () Bool)
(declare-fun x132 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x203 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x86 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x14 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x280 () Bool)
(declare-fun x304 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x28 () Bool)
(declare-fun x204 () Bool)
(declare-fun x26 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x293 () Bool)
(declare-fun x67 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x284 ((_ BitVec 256)) Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x206 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x253 () Bool)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x216 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x294 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x114 () Bool)
(declare-fun x307 () Bool)
(declare-fun x131 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x95 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x271 () (_ BitVec 256))
(declare-fun x301 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x306 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x287 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x113 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x270 () (_ BitVec 256))
(declare-fun x25 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x305 () (_ BitVec 256))
(declare-fun x124 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x191 () Bool)
(declare-fun x291 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x308 () Bool)
(declare-fun x288 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x236 () Bool)
(declare-fun x278 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x122 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x309 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x285 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x8 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x283 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x252 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x196 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x262 () Bool)
(declare-fun x172 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x268 () Bool)
(declare-fun x55 () Bool)
(declare-fun x242 () Bool)
(declare-fun x47 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x135 () Bool)
(declare-fun x24 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x197 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x140 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x258 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(define-fun x282 ((x57 (_ BitVec 256)) (x21 (_ BitVec 256))) Bool (= x57 (bvudiv (bvmul x21 x57) x21)))
(define-fun x159 ((x57 (_ BitVec 256)) (x21 (_ BitVec 256))) Bool (= x57 (bvsdiv (bvmul x57 x21) x21)))
(define-fun x109 ((x57 (_ BitVec 256)) (x21 (_ BitVec 256))) Bool (= x57 (bvsdiv (bvmul x21 x57) x21)))
(define-fun x201 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x133 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x256 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x290 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x244 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x223 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x33 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x68 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x160 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x117 ((x92 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x163 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 x263) x182 (x294 x92)))
(define-fun x154 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 x110) x98 (x163 x92)))
(define-fun x222 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv128 256)) (_ bv1 256) (x201 x92)))
(define-fun x16 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv192 256)) (_ bv0 256) (x256 x92)))
(define-fun x165 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv224 256)) (_ bv0 256) (x244 x92)))
(define-fun x176 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x92) (_ bv0 256) (x33 x92)))
(define-fun x264 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv160 256)) (_ bv192 256) (x160 x92)))
(define-fun x141 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x92) x110 (x16 x92)))
(define-fun x44 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv320 256)) x58 (x165 x92)))
(define-fun x51 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv352 256)) x35 (x176 x92)))
(define-fun x208 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x92) (_ bv288 256) (x264 x92)))
(define-fun x207 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x6 x92) x15 (x154 x92)))
(define-fun x198 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 x221) x228 (x207 x92)))
(define-fun x195 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x151 x92) x112 (x129 x92)))
(define-fun x134 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x39 x92) x181 (x198 x92)))
(define-fun x101 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv128 256)) (_ bv1 256) (x133 x92)))
(define-fun x215 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv192 256)) (_ bv0 256) (x290 x92)))
(define-fun x78 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv224 256)) (_ bv0 256) (x223 x92)))
(define-fun x180 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x92) (_ bv0 256) (x68 x92)))
(define-fun x162 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= x92 (_ bv160 256)) (_ bv192 256) (x117 x92)))
(define-fun x23 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x92) x110 (x215 x92)))
(define-fun x186 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x92) x50 (x78 x92)))
(define-fun x303 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x92) x35 (x180 x92)))
(define-fun x69 ((x92 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x92) (_ bv288 256) (x162 x92)))
(assert (= x81 (x26 (x216 (_ bv64 256) x81 (_ bv60 256)))))
(assert (= (_ bv64 256) (x197 (x216 (_ bv64 256) x237 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x24) (= (x140 x24) (_ bv0 256))))
(assert (= (or x106 x298) x113))
(assert (x284 (_ bv20282409603651670423947251286015 256)))
(assert (x284 (_ bv404098525 256)))
(assert (=> (bvule x237 (_ bv10000 256)) (= (x140 x237) (_ bv0 256))))
(assert (x284 (_ bv2378104546 256)))
(assert (bvult (_ bv10000 256) (x216 (_ bv64 256) x24 x246)))
(assert (= (_ bv0 256) (x140 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (x284 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= x5 (x26 (x216 (_ bv64 256) x5 (_ bv0 256)))))
(assert (= x5 (x26 (x216 (_ bv64 256) x5 (_ bv61 256)))))
(assert (not (x284 (x216 (_ bv64 256) x24 (_ bv61 256)))))
(assert (= x153 (and x262 x47)))
(assert (x284 (_ bv2835717307 256)))
(assert (= (x287 (x216 (_ bv64 256) x237 (_ bv2 256))) (_ bv2 256)))
(assert (= (x216 (_ bv64 256) x5 (_ bv61 256)) (x140 (x216 (_ bv64 256) x5 (_ bv61 256)))))
(assert (= (x26 (x216 (_ bv64 256) x209 (_ bv2 256))) x209))
(assert (x284 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (x287 (x216 (_ bv64 256) x24 (_ bv61 256))) (_ bv61 256)))
(assert (= (x287 (x216 (_ bv64 256) x304 (_ bv60 256))) (_ bv60 256)))
(assert (= (x140 (x216 (_ bv64 256) x24 (_ bv0 256))) (x216 (_ bv64 256) x24 (_ bv0 256))))
(assert (= (_ bv60 256) (x287 (x216 (_ bv64 256) x81 (_ bv60 256)))))
(assert (= (and x3 x85) x242))
(assert (= (x140 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (x284 (_ bv4294967295 256)))
(assert (= x168 (and (not x262) x47)))
(assert (= (x287 (x216 (_ bv64 256) x12 (_ bv0 256))) (_ bv0 256)))
(assert (= (x197 (x216 (_ bv64 256) x5 (_ bv61 256))) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x263) (= (x140 x263) (_ bv0 256))))
(assert (= (_ bv64 256) (x197 (x216 (_ bv64 256) x24 (_ bv0 256)))))
(assert (= (_ bv64 256) (x197 (x216 (_ bv64 256) x12 (_ bv0 256)))))
(assert (= (and x67 (not x293)) x199))
(assert (= (x287 (x216 (_ bv64 256) x24 (_ bv0 256))) (_ bv0 256)))
(assert (= (=> (and (and (not (bvugt x227 (bvadd x108 x227))) (= x59 (x216 (_ bv64 256) x5 (_ bv61 256))) (= (x124 x59) x227) (= x103 (_ bv36 256)) (= x219 x306) (= x9 (bvadd x227 x108)) (= x13 (x22 x110)) (= x190 (_ bv4 256)) (bvuge x13 (_ bv1 256)) (= (_ bv404098525 256) x18) (= x9 x126) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x35)) (and (and (= x277 (x216 (_ bv64 256) x12 (_ bv0 256))) (= x177 (_ bv4 256)) (= x213 (_ bv404098525 256)) (= x115 (x22 x110)) (= x55 (bvuge x35 x273)) x55 (= x295 x12) (= x273 (x25 x277)) (= x219 x12) (bvuge x115 (_ bv1 256)) (= (x22 x110) x271) (= (_ bv1889567281 256) x137) (= (_ bv36 256) x121) (bvule x273 (_ bv20282409603651670423947251286015 256)) (bvule (_ bv1 256) x271)) (and (and (bvuge x60 (_ bv1 256)) (= (_ bv1289409798 256) x202) (= x35 x188) (= x188 x254) (= x283 (bvmul x188 (_ bv1000000000000000000 256))) (= (bvudiv x283 (_ bv1000000000000000000 256)) x132) (bvuge x30 (_ bv1 256)) (bvule x60 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x30 (x22 x110)) (= x132 x188) (= (bvudiv x283 x60) x65) (= (_ bv36 256) x164)) (and (and (= x104 x209) (and (and (= x45 x173) (= (x207 x221) x38) (= x243 (x22 x221)) (not (bvugt x112 x218)) (not (bvult (bvadd x179 x178) x179)) (= x6 x104) (= x52 (_ bv36 256)) (= x269 x15) (= x151 (x216 (_ bv64 256) x209 (_ bv2 256))) (= x89 x150) (= (x129 x266) x218) (= x73 (bvadd x179 x178)) (bvuge x243 (_ bv1 256)) (not (bvugt x179 (bvadd x178 x179))) (= x228 x38) (= (x216 (_ bv64 256) x237 (_ bv2 256)) x285) (= (bvadd x218 (bvneg x178)) x112) (= (x154 x6) x15) (= (x195 x285) x179) (not (bvult x218 x178)) (= (_ bv2835717307 256) x145) (= x266 (x216 (_ bv64 256) x209 (_ bv2 256))) (= x306 x93)) (and (= x93 x24) (and (and (= x50 (x25 x226)) (= x259 x24) (= (x101 (_ bv128 256)) x83) (= x96 x181) (= (x134 x110) x270) (= (x22 x110) x232) (= x104 x39) (= (bvugt x83 (_ bv0 256)) x40) (= (x216 (_ bv64 256) x24 (_ bv0 256)) x226) (= x267 (_ bv2378104546 256)) (= (x198 x39) x181) (= (_ bv128 256) x310) (bvuge (_ bv20282409603651670423947251286015 256) x50) (bvule (_ bv1 256) x232) (= x270 x247)) (= x156 x281))))) (and (= x237 x173) (= (x216 (_ bv64 256) x279 (_ bv2 256)) x63) (= (x129 x63) x302) (= x99 (_ bv1889567281 256)) (bvule (_ bv68 256) x274) (= x308 (bvuge x302 x65)) x308 (= x224 x279) (= x89 x178) (= (x214 (_ bv4 256)) x237) (bvuge x136 (_ bv1 256)) (= x178 (x214 (_ bv36 256))) (= x279 x110) (bvule x237 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x274) (= (x22 x221) x136)))))) (and (=> (and (and (or (and (not x85) (= x253 (= x156 x240))) (and (= x85 x253) x85)) (and (= x123 (x69 (_ bv160 256))) (= x240 (x86 x48)) (bvuge (_ bv340282366920938463463374607431768211455 256) x240) (= (x252 x48) x166) (= (bvand x229 (_ bv1461501637330902918203684832716283019655932542975 256)) x304) (= (x102 x41) x36) (= x85 (ite (= x166 (_ bv0 256)) (= x166 (_ bv0 256)) (= (_ bv0 256) x210))) (= x56 (bvadd (_ bv64 256) x88)) (= (x69 (_ bv160 256)) x88) (= (x23 x123) x229) (= (bvadd x48 (_ bv1 256)) x41) (= x48 (x216 (_ bv64 256) x304 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x166) (= x210 (x303 x56)))) x40) x185) (=> (and (not x40) (= x61 (_ bv0 256))) x82))) x62))
(assert (= (and (not x40) x206) x280))
(assert (= (x140 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (and x139 x231) x298))
(assert (= (x26 (x216 (_ bv64 256) x304 (_ bv60 256))) x304))
(assert (= (=> (and (= x275 x305) (= x300 (bvmul x166 x239)) (= x187 (bvudiv x292 x87)) (or x241 x230) (= (= x187 (_ bv1000000000000000000 256)) x241) (= (bvudiv x292 x210) x100) (= x300 x87) (bvuge x210 (_ bv1 256)) (= x230 (= (_ bv0 256) x87)) (x282 x166 x239) (= (bvadd x100 x36) x305) (bvule (_ bv0 256) x300) (= x239 (bvadd (bvneg x240) x27)) (= (bvmul (_ bv1000000000000000000 256) x87) x292) (not (bvugt x239 x27)) (not (bvugt x100 (bvadd x36 x100))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x300)) x14) x272))
(assert (= (x216 (_ bv64 256) x5 (_ bv0 256)) (x140 (x216 (_ bv64 256) x5 (_ bv0 256)))))
(assert (= (=> (= x111 (ite x278 x278 (not (bvugt x211 x249)))) (and (=> (and x111 (= x225 x203)) x77) (=> (and (and (or (and x191 (= x289 x211)) (and (= x80 x289) (not x191))) (= x191 (bvult x211 x80))) (not x111)) x192))) x143))
(assert (= x279 (x26 (x216 (_ bv64 256) x279 (_ bv2 256)))))
(assert (= (x140 (bvadd x120 (_ bv1 256))) (x140 x120)))
(assert (not (x284 (x216 (_ bv64 256) x209 (_ bv2 256)))))
(assert (= (x140 (x216 (_ bv64 256) x24 x246)) (x216 (_ bv64 256) x24 x246)))
(assert (= (x216 (_ bv64 256) x209 (_ bv2 256)) (x140 (x216 (_ bv64 256) x209 (_ bv2 256)))))
(assert (not (x284 (x216 (_ bv64 256) x237 (_ bv2 256)))))
(assert (= (x140 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x81) (= (_ bv0 256) (x140 x81))))
(assert (not (x284 (x216 (_ bv64 256) x24 x246))))
(assert (= (=> (and (= (x69 (_ bv160 256)) x189) (= x31 (bvmul x146 x238)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x31) (= x118 (x172 x70)) (= (bvadd (_ bv1 256) x41) x246) (bvuge x31 (_ bv0 256)) (= x146 (x186 x309)) (= (bvadd (_ bv32 256) x189) x309) (= (bvadd (bvneg x118) x275) x238) (= x70 (x216 (_ bv64 256) x24 x246)) (= (bvudiv x31 (_ bv1000000000000000000 256)) x257) (not (bvugt x238 x275)) (x282 x146 x238) (= (x101 (_ bv128 256)) x127) (= x91 (not (bvult (_ bv1 256) x127)))) (and (=> (= x257 x61) x82) x91)) x14))
(assert (= x24 (x26 (x216 (_ bv64 256) x24 (_ bv0 256)))))
(assert (x284 (_ bv1000000000000000000 256)))
(assert (= (x140 (bvadd (_ bv1 256) x48)) (x140 x48)))
(assert (= x12 (x26 (x216 (_ bv64 256) x12 (_ bv0 256)))))
(assert (=> (bvule x110 (_ bv10000 256)) (= (x140 x110) (_ bv0 256))))
(assert (bvugt (x216 (_ bv64 256) x5 x220) (_ bv10000 256)))
(assert (= (x140 (x216 (_ bv64 256) x5 x220)) (x216 (_ bv64 256) x5 x220)))
(assert (not (x284 (x216 (_ bv64 256) x5 x220))))
(assert (bvult (_ bv10000 256) (x216 (_ bv64 256) x209 (_ bv2 256))))
(assert (= (x197 (x216 (_ bv64 256) x5 x220)) (_ bv64 256)))
(assert (x284 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (_ bv61 256) (x287 (x216 (_ bv64 256) x5 (_ bv61 256)))))
(assert (= x67 true))
(assert (= (or x199 x236) x206))
(assert (= (and x113 x111) x54))
(assert (not (x284 (x216 (_ bv64 256) x81 (_ bv60 256)))))
(assert (bvugt (x216 (_ bv64 256) x237 (_ bv2 256)) (_ bv10000 256)))
(assert (= (_ bv0 256) (x140 (_ bv1289409798 256))))
(assert (= x220 (x287 (x216 (_ bv64 256) x5 x220))))
(assert (= (or x54 x204) x236))
(assert (= (x216 (_ bv64 256) x304 (_ bv60 256)) (x140 (x216 (_ bv64 256) x304 (_ bv60 256)))))
(assert (= (x140 x41) (x140 (bvadd x41 (_ bv1 256)))))
(assert (= (x140 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (x26 (x216 (_ bv64 256) x237 (_ bv2 256))) x237))
(assert (=> (bvule x5 (_ bv10000 256)) (= (x140 x5) (_ bv0 256))))
(assert (= x106 (and (not x139) x231)))
(assert (bvult (_ bv10000 256) (x216 (_ bv64 256) x304 (_ bv60 256))))
(assert (= (x197 (x216 (_ bv64 256) x304 (_ bv60 256))) (_ bv64 256)))
(assert (bvult (_ bv10000 256) (x216 (_ bv64 256) x24 (_ bv61 256))))
(assert (= (x140 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (and x268 (not x191)) x212))
(assert (= (x197 (x216 (_ bv64 256) x279 (_ bv2 256))) (_ bv64 256)))
(assert (=> (bvule x279 (_ bv10000 256)) (= (_ bv0 256) (x140 x279))))
(assert (= (and x113 (not x111)) x268))
(assert (=> (bvuge (_ bv10000 256) x221) (= (_ bv0 256) (x140 x221))))
(assert (= x95 (or x74 x280)))
(assert (= (x197 (x216 (_ bv64 256) x209 (_ bv2 256))) (_ bv64 256)))
(assert (= x24 (x26 (x216 (_ bv64 256) x24 x246))))
(assert (bvugt (x216 (_ bv64 256) x5 (_ bv0 256)) (_ bv10000 256)))
(assert (not (x284 (x216 (_ bv64 256) x279 (_ bv2 256)))))
(assert (= (x197 (x216 (_ bv64 256) x81 (_ bv60 256))) (_ bv64 256)))
(assert (=> (bvule x12 (_ bv10000 256)) (= (_ bv0 256) (x140 x12))))
(assert (= x185 (=> (= x262 (ite x253 x253 (not (bvult x240 x211)))) (and (=> (and (= x275 x36) x262) x14) (=> (and (not x262) (and (= (bvult x211 x156) x64) (or (and (not x64) (= x156 x27)) (and x64 (= x211 x27))))) x272)))))
(assert (bvult (_ bv10000 256) (x216 (_ bv64 256) x12 (_ bv0 256))))
(assert (=> (bvule x39 (_ bv10000 256)) (= (x140 x39) (_ bv0 256))))
(assert (= x297 (and x168 x64)))
(assert (= (x197 (x216 (_ bv64 256) x5 (_ bv0 256))) (_ bv64 256)))
(assert (= (and x206 x40) x3))
(assert (x284 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x24 (x26 (x216 (_ bv64 256) x24 (_ bv61 256)))))
(assert (= x74 (or x153 x196)))
(assert (= (x140 x167) (x140 (bvadd (_ bv1 256) x167))))
(assert (=> (bvule x6 (_ bv10000 256)) (= (x140 x6) (_ bv0 256))))
(assert (not (x284 (x216 (_ bv64 256) x5 (_ bv61 256)))))
(assert (=> (bvule x304 (_ bv10000 256)) (= (x140 x304) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x209) (= (_ bv0 256) (x140 x209))))
(assert (bvugt (x216 (_ bv64 256) x81 (_ bv60 256)) (_ bv10000 256)))
(assert (= (_ bv0 256) (x287 (x216 (_ bv64 256) x5 (_ bv0 256)))))
(assert (= (_ bv0 256) (x140 (_ bv20282409603651670423947251286015 256))))
(assert (not (x284 (x216 (_ bv64 256) x5 (_ bv0 256)))))
(assert (= (or x169 x212) x204))
(assert (= x28 (and (not x85) x3)))
(assert (= (x216 (_ bv64 256) x237 (_ bv2 256)) (x140 (x216 (_ bv64 256) x237 (_ bv2 256)))))
(assert (= (=> (and (not (bvugt x233 (bvadd x233 x61))) (= x84 x32) (= x32 (bvadd x233 x61)) (= x144 (bvuge x84 x126)) (= (x216 (_ bv64 256) x24 (_ bv61 256)) x194) (= x233 (x124 x194))) x144) x82))
(assert (= (x140 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (x284 (_ bv1889567281 256)))
(assert (= x169 (and x191 x268)))
(assert (= (and x168 (not x64)) x49))
(assert (x284 (_ bv1289409798 256)))
(assert (= (x140 (x216 (_ bv64 256) x24 (_ bv61 256))) (x216 (_ bv64 256) x24 (_ bv61 256))))
(assert (not x71))
(assert (= (=> (and (= x288 (x44 x161)) (= x171 (bvudiv x79 (_ bv1000000000000000000 256))) (bvule x79 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (not (bvult x203 x105)) (= (x222 (_ bv128 256)) x46) (x282 x288 x105) (= x220 (bvadd (_ bv1 256) x167)) (= x105 (bvadd (bvneg x107) x203)) (= (bvmul x105 x288) x79) (= x107 (x172 x131)) (= x114 (not (bvugt x46 (_ bv1 256)))) (= x161 (bvadd x94 (_ bv32 256))) (= x131 (x216 (_ bv64 256) x5 x220)) (bvule (_ bv0 256) x79) (= (x208 (_ bv160 256)) x94)) (and x114 (=> (= x171 x108) x62))) x77))
(assert (bvult (_ bv10000 256) (x216 (_ bv64 256) x279 (_ bv2 256))))
(assert (= x5 (x26 (x216 (_ bv64 256) x5 x220))))
(assert (= (_ bv0 256) (x140 (_ bv2835717307 256))))
(assert (= (=> (and (= (bvmul (_ bv1000000000000000000 256) x155) x250) (= x286 x155) (= (= x147 (_ bv1000000000000000000 256)) x29) (= (bvudiv x250 x155) x147) (= x37 (bvadd x289 (bvneg x249))) (bvule (_ bv1 256) x276) (not (bvugt x37 x289)) (bvule (_ bv0 256) x286) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x286) (not (bvult (bvadd x90 x225) x90)) (= (bvadd x90 x225) x149) (= x203 x149) (= (bvmul x37 x174) x286) (= (= x155 (_ bv0 256)) x42) (or x42 x29) (= x90 (bvudiv x250 x276)) (x282 x174 x37)) x77) x192))
(assert (= (_ bv0 256) (x140 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (x287 (x216 (_ bv64 256) x209 (_ bv2 256))) (_ bv2 256)))
(assert (= (_ bv0 256) (x140 (_ bv404098525 256))))
(assert (not (x284 (x216 (_ bv64 256) x304 (_ bv60 256)))))
(assert (bvugt (x216 (_ bv64 256) x5 (_ bv61 256)) (_ bv10000 256)))
(assert (= (x140 (x216 (_ bv64 256) x279 (_ bv2 256))) (x216 (_ bv64 256) x279 (_ bv2 256))))
(assert (not (x284 (x216 (_ bv64 256) x12 (_ bv0 256)))))
(assert (= (or x297 x49) x196))
(assert (= (or x28 x242) x47))
(assert (= (x287 (x216 (_ bv64 256) x24 x246)) x246))
(assert (bvugt (x216 (_ bv64 256) x24 (_ bv0 256)) (_ bv10000 256)))
(assert (= (=> (and (and (and (= x281 x80) (and (= x98 x17) (bvuge (_ bv20282409603651670423947251286015 256) x58) (bvuge x200 (_ bv1 256)) (= (x216 (_ bv64 256) x5 (_ bv0 256)) x1) (= x182 x255) (= x182 (x294 x263)) (= (_ bv128 256) x8) (= (_ bv2378104546 256) x258) (= (x25 x1) x58) (= (x163 x110) x17) (= x200 (x22 x110)) (= (bvugt x125 (_ bv0 256)) x293) (= x104 x263) (= (x222 (_ bv128 256)) x125) (= x116 x5))) (= x119 x5)) (and (not (= x110 x221)) (not (= x221 x97)) (bvuge x221 (_ bv1 256)) (bvule x251 (_ bv4294967295 256)) x301 (bvule (_ bv0 256) x170) (= (_ bv0 256) x175) (bvule (_ bv0 256) x291) (bvuge x251 (_ bv0 256)) (bvule x11 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x296 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x110) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x97) (bvuge x245 (_ bv0 256)) (bvule (_ bv0 256) x281) (bvule x142 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x72 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x170) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x193) (bvule (_ bv0 256) x296) (not (= x110 x97)) (bvule (_ bv1 256) x97) (bvule (_ bv0 256) x142) (bvuge x104 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x104) (bvuge x193 (_ bv0 256)) (= x301 (bvugt (x22 x221) (_ bv0 256))) (= x205 (_ bv36 256)) (= (bvult (_ bv0 256) (x22 x97)) x72) (bvule x281 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x291) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x306) (bvuge x306 (_ bv0 256)) (= x119 x306) x135 (bvule (_ bv0 256) x11) (bvuge x138 (_ bv0 256)) (= (bvult (_ bv0 256) (x22 x110)) x135) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x138) (bvule x245 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x221 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x110))) (and (=> (and x293 (and (or (and (= x278 (= x249 x80)) (not x139)) (and x139 (= x139 x278))) (and (= x120 (x216 (_ bv64 256) x81 (_ bv60 256))) (= (x141 x34) x234) (= x174 (x252 x120)) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x234) x81) (= x167 (bvadd x120 (_ bv1 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x174) (bvuge (_ bv340282366920938463463374607431768211455 256) x249) (= x299 (bvadd (_ bv64 256) x20)) (= x276 (x51 x299)) (= (ite (= x174 (_ bv0 256)) (= (_ bv0 256) x174) (= (_ bv0 256) x276)) x139) (= x225 (x102 x167)) (= x249 (x86 x120)) (= (x208 (_ bv160 256)) x34) (= x20 (x208 (_ bv160 256)))))) x143) (=> (and (= x108 (_ bv0 256)) (not x293)) x62))) x71))
(assert (= (x216 (_ bv64 256) x12 (_ bv0 256)) (x140 (x216 (_ bv64 256) x12 (_ bv0 256)))))
(assert (= x231 (and x293 x67)))
(assert (x284 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (x284 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x287 (x216 (_ bv64 256) x279 (_ bv2 256))) (_ bv2 256)))
(assert (not (x284 (x216 (_ bv64 256) x24 (_ bv0 256)))))
(assert (= (_ bv0 256) (x140 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (=> (bvuge (_ bv10000 256) x97) (= (_ bv0 256) (x140 x97))))
(assert (= (_ bv0 256) (x140 (_ bv2378104546 256))))
(assert (= (x216 (_ bv64 256) x81 (_ bv60 256)) (x140 (x216 (_ bv64 256) x81 (_ bv60 256)))))
(assert (= (_ bv64 256) (x197 (x216 (_ bv64 256) x24 x246))))
(assert (= (x197 (x216 (_ bv64 256) x24 (_ bv61 256))) (_ bv64 256)))
(check-sat)
(exit)
