(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x246 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x100 () Bool)
(declare-fun x204 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x2 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x222 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x109 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x186 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x211 () Bool)
(declare-fun x106 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x76 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x40 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x13 () Bool)
(declare-fun x169 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x93 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x177 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x227 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x237 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x231 () Bool)
(declare-fun x185 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x195 () Bool)
(declare-fun x44 () Bool)
(declare-fun x181 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x22 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x120 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x212 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x244 () Bool)
(declare-fun x33 () Bool)
(declare-fun x180 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x115 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x48 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x240 () Bool)
(declare-fun x220 () Bool)
(declare-fun x133 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x31 () Bool)
(declare-fun x205 () Bool)
(declare-fun x102 () Bool)
(declare-fun x30 () Bool)
(declare-fun x162 () Bool)
(declare-fun x79 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x135 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x173 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x26 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x238 () Bool)
(declare-fun x51 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x72 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x199 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x198 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x159 () (_ BitVec 256))
(declare-fun x53 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x147 () Bool)
(declare-fun x64 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x143 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x187 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x9 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x46 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x243 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x95 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x161 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x176 () Bool)
(declare-fun x36 () Bool)
(declare-fun x107 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x69 ((_ BitVec 256)) Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x88 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x43 () (_ BitVec 256))
(define-fun x5 ((x142 (_ BitVec 256)) (x207 (_ BitVec 256))) Bool (= x142 (bvudiv (bvmul x207 x142) x207)))
(define-fun x224 ((x142 (_ BitVec 256)) (x207 (_ BitVec 256))) Bool (= x142 (bvsdiv (bvmul x142 x207) x207)))
(define-fun x128 ((x142 (_ BitVec 256)) (x207 (_ BitVec 256))) Bool (= x142 (bvsdiv (bvmul x207 x142) x207)))
(define-fun x55 ((x19 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x29 ((x19 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x127 ((x19 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x8 ((x19 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x68 ((x19 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x219 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (bvugt x148 x19) (x9 x19) (_ bv0 256)))
(define-fun x197 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv0 256) x19) (bvugt x148 x19)) (x26 x19) (x219 x19)))
(define-fun x89 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (= x19 x159) x59 (x169 x19)))
(define-fun x183 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (= x19 (_ bv128 256)) x63 (x55 x19)))
(define-fun x111 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x19) x230 (x68 x19)))
(define-fun x16 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite x102 (x68 x19) (x111 x19)))
(define-fun x42 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (= x232 x19) x45 (x127 x19)))
(define-fun x218 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite x102 (x127 x19) (x42 x19)))
(define-fun x217 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (= x19 x200) x193 (x218 x19)))
(define-fun x12 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite x82 (x218 x19) (x217 x19)))
(define-fun x153 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (= x21 x19) x64 (x8 x19)))
(define-fun x83 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite x102 (x8 x19) (x153 x19)))
(define-fun x248 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite (= x230 x19) x215 (x29 x19)))
(define-fun x163 ((x19 (_ BitVec 256))) (_ BitVec 256) (ite x102 (x29 x19) (x248 x19)))
(assert (not (x69 (x72 (_ bv64 256) x104 (_ bv62 256)))))
(assert (= x132 (and x92 x1)))
(assert (x69 (_ bv2997214202 256)))
(assert (= (x243 x241) (x243 (bvadd x241 (_ bv1 256)))))
(assert (= (x243 (x72 (_ bv64 256) x104 (_ bv62 256))) (x72 (_ bv64 256) x104 (_ bv62 256))))
(assert (= (_ bv64 256) (x95 (x72 (_ bv64 256) x70 (_ bv60 256)))))
(assert (x69 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (and (not x145) x188) x239))
(assert (= x168 (=> (and (= (= x164 x154) x145) (or (not x145) x145)) x67)))
(assert (= (x243 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (or x165 x10) x226))
(assert (= x188 (or x132 x186)))
(assert (= x81 (=> (and (= x18 (x183 (_ bv128 256))) (= x161 (bvult (_ bv0 256) x18))) (and (=> (and (and (bvule (_ bv1 256) x245) (= (bvand x144 (_ bv1461501637330902918203684832716283019655932542975 256)) x70) (= x241 (x72 (_ bv64 256) x70 (_ bv60 256))) (= (x12 x151) x105) (= (x16 (_ bv160 256)) x189) (= (bvadd (_ bv1 256) x241) x47) (bvuge x122 (_ bv1 256)) (= (x83 x74) x144) (= (bvadd x109 (_ bv32 256)) x151) (= (x83 x108) x213) (= x190 (x16 (_ bv160 256))) (= (x16 (_ bv160 256)) x109) (= x141 (x183 (_ bv128 256))) (bvule x85 (_ bv340282366920938463463374607431768211455 256)) (= (x204 x241) x85) (bvuge x141 (_ bv1 256)) (= x164 (x227 x47)) (= (x183 (_ bv128 256)) x122) (= (bvadd x190 (_ bv64 256)) x74) (= (bvadd (_ bv64 256) x189) x108) (= x136 (bvadd x53 (bvneg x85))) (= (x183 (_ bv128 256)) x245) (= x48 (bvult (_ bv0 256) x136))) x161) (and (=> (and (= x164 x99) (not x48)) x234) (=> (and (and (or (and (= x162 (= x85 x53)) (not x235)) (and x235 (= x235 x162))) (and (= (ite (= x129 (_ bv0 256)) (= x129 (_ bv0 256)) (= (_ bv0 256) x105)) x235) (= x129 (x212 x241)) (bvule x129 (_ bv340282366920938463463374607431768211455 256)))) x48) x237))) (=> (not x161) x231)))))
(assert (= (x22 (x72 (_ bv64 256) x199 (_ bv62 256))) x199))
(assert (= (and x179 (not x185)) x102))
(assert (x69 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not (x69 (x72 (_ bv64 256) x70 (_ bv60 256)))))
(assert (= (x243 (_ bv18446744073709551487 256)) (_ bv0 256)))
(assert (= (and x214 x246) x247))
(assert (= x104 (x22 (x72 (_ bv64 256) x104 (_ bv62 256)))))
(assert (= (_ bv0 256) (x243 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256))))
(assert (= (_ bv62 256) (x115 (x72 (_ bv64 256) x104 (_ bv62 256)))))
(assert (=> (bvuge (_ bv10000 256) x203) (= (_ bv0 256) (x243 x203))))
(assert (bvult (_ bv10000 256) (x72 (_ bv64 256) x199 (_ bv62 256))))
(assert (not (x69 (x72 (_ bv64 256) x199 (_ bv62 256)))))
(assert (bvult (_ bv10000 256) (x72 (_ bv64 256) x60 (_ bv62 256))))
(assert (= (=> (and (= x154 x4) (bvuge x105 (_ bv1 256)) (= x209 (bvudiv x97 x94)) (= x131 x94) (bvule (_ bv0 256) x131) (or x107 x138) (= x97 (bvmul (_ bv1000000000000000000 256) x94)) (= x4 (bvadd x58 x164)) (= x58 (bvudiv x97 x105)) (x5 x129 x7) (= x138 (= (_ bv1000000000000000000 256) x209)) (= x107 (= (_ bv0 256) x94)) (bvule x131 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (not (bvugt x58 (bvadd x58 x164))) (not (bvugt x7 x155)) (= x131 (bvmul x129 x7)) (= (bvadd x155 (bvneg x85)) x7)) x168) x119))
(assert (= (x115 (x72 (_ bv64 256) x60 (_ bv62 256))) (_ bv62 256)))
(assert (= (=> (and (= x106 (x16 (_ bv160 256))) (bvuge x37 (_ bv1 256)) (= (x183 (_ bv128 256)) x222) (bvule (_ bv1 256) x222) (= x150 (not (bvugt x170 (_ bv1 256)))) (= x71 (x183 (_ bv128 256))) (= (bvand (_ bv340282366920938463463374607431768211455 256) x221) x112) (= (x183 (_ bv128 256)) x37) (= x221 (x163 x106)) (= (x183 (_ bv128 256)) x170) (bvule (_ bv1 256) x71)) (and x150 x231)) x234))
(assert (= x93 (and x51 x195)))
(assert (= x237 (=> (= x92 (ite x162 x162 (not (bvult x85 x46)))) (and (=> (and (= x164 x154) x92) x168) (=> (and (not x92) (and (or (and x214 (= x46 x155)) (and (not x214) (= x155 x53))) (= (bvugt x53 x46) x214))) x119)))))
(assert (=> (bvule x41 (_ bv10000 256)) (= (_ bv0 256) (x243 x41))))
(assert (= (=> (= x99 x154) x234) x67))
(assert (x69 (_ bv4294967295 256)))
(assert (= (_ bv60 256) (x115 (x72 (_ bv64 256) x70 (_ bv60 256)))))
(assert (x69 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (_ bv0 256) (x243 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256))))
(assert (= (x72 (_ bv64 256) x199 (_ bv62 256)) (x243 (x72 (_ bv64 256) x199 (_ bv62 256)))))
(assert (= x70 (x22 (x72 (_ bv64 256) x70 (_ bv60 256)))))
(assert (= (x22 (x72 (_ bv64 256) x60 (_ bv62 256))) x60))
(assert (x69 (_ bv1099511627775 256)))
(assert (= (x243 (_ bv18446744073709551615 256)) (_ bv0 256)))
(assert (= (_ bv62 256) (x115 (x72 (_ bv64 256) x199 (_ bv62 256)))))
(assert (= (or (and (not x161) x205) x226) x32))
(assert (= x165 (or (and x145 x188) x239)))
(assert (= (=> (and (and (and (= (x72 (_ bv64 256) x206 (_ bv62 256)) x20) (= (x2 x20) x6) (= x103 x206) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x6) (bvule (_ bv1 256) x236) (= x79 (bvult (_ bv0 256) x6)) (= x110 x225) (= x236 (x143 x41)) (= x228 x206) (= (_ bv36 256) x191) (= (_ bv2432040568 256) x166)) (and (bvule x121 (_ bv1099511627775 256)) (bvuge x201 (_ bv1 256)) (= x104 x110) (= (bvugt x121 (_ bv0 256)) x210) (= (x177 x198) x121) (= x240 (or (not x79) x210)) (= x104 x27) (= (x72 (_ bv64 256) x104 (_ bv62 256)) x198) (= x201 (x143 x41)) (= x25 (_ bv1145441982 256)))) (and (= x114 (_ bv36 256)) (= x103 x225))) x240) x231))
(assert (= (_ bv64 256) (x95 (x72 (_ bv64 256) x104 (_ bv62 256)))))
(assert (= x206 (x22 (x72 (_ bv64 256) x206 (_ bv62 256)))))
(assert (= (x72 (_ bv64 256) x60 (_ bv62 256)) (x243 (x72 (_ bv64 256) x60 (_ bv62 256)))))
(assert (=> (bvuge (_ bv10000 256) x159) (= (_ bv0 256) (x243 x159))))
(assert (= (x243 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)) (_ bv0 256)))
(assert (= x179 true))
(assert (bvugt (x72 (_ bv64 256) x104 (_ bv62 256)) (_ bv10000 256)))
(assert (= (x243 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (not (x69 (x72 (_ bv64 256) x60 (_ bv62 256)))))
(assert (= x246 (and x1 (not x92))))
(assert (= (or x102 x211) x195))
(assert (x69 (_ bv18446744073709551615 256)))
(assert (x69 (_ bv2432040568 256)))
(assert (=> (bvule x206 (_ bv10000 256)) (= (x243 x206) (_ bv0 256))))
(assert (= (_ bv0 256) (x243 (_ bv1000000000000000000 256))))
(assert (= (_ bv0 256) (x243 (_ bv18446744073709551519 256))))
(assert (x69 (_ bv18446744073709551519 256)))
(assert (not x62))
(assert (x69 (_ bv1145441982 256)))
(assert (x69 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)))
(assert (= (and x31 x235) x100))
(assert (=> (bvule x60 (_ bv10000 256)) (= (_ bv0 256) (x243 x60))))
(assert (x69 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (=> (and (= x76 x57) (= x51 (bvugt x175 (_ bv0 256))) (= (x183 (_ bv128 256)) x175) (= x76 (bvand x139 (_ bv1461501637330902918203684832716283019655932542975 256)))) (and (=> (not x51) x81) (=> x51 x30))) x44))
(assert (= (and x31 (not x235)) x173))
(assert (= x82 (and x195 (not x51))))
(assert (x69 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))
(assert (x69 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x69 (_ bv18446744073709551487 256)))
(assert (= x40 (and x205 x161)))
(assert (= (_ bv0 256) (x243 (_ bv4294967295 256))))
(assert (= (or x91 x247) x186))
(assert (= (x243 (x72 (_ bv64 256) x70 (_ bv60 256))) (x72 (_ bv64 256) x70 (_ bv60 256))))
(assert (= (and x246 (not x214)) x91))
(assert (= (x115 (x72 (_ bv64 256) x206 (_ bv62 256))) (_ bv62 256)))
(assert (=> (bvuge (_ bv10000 256) x199) (= (x243 x199) (_ bv0 256))))
(assert (= (_ bv0 256) (x243 (_ bv2997214202 256))))
(assert (= (_ bv0 256) (x243 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (and x40 (not x48)) x10))
(assert (= x62 (=> (and (and (and (= x202 x199) (= (_ bv36 256) x24) (= x225 x152) (= (bvult (_ bv0 256) x167) x33) (bvuge x208 (_ bv1 256)) (= x3 (_ bv2432040568 256)) (= x208 (x143 x41)) (bvule x167 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x199 x113) (= (x2 x90) x167) (= (x72 (_ bv64 256) x199 (_ bv62 256)) x90)) (and (and (and (and (= x185 (bvult x35 x56)) (bvule x23 (_ bv18446744073709551487 256)) (= x35 (bvadd (_ bv32 256) x137)) (= (x143 x41) x233) (= (_ bv2997214202 256) x229) (bvugt x148 x15) (= (bvadd (_ bv128 256) x23) x230) (= x171 (bvmul (_ bv96 256) x63)) (= x159 x96) (= (bvadd x137 (_ bv31 256)) x15) (bvule (_ bv1 256) x233) (= x65 (_ bv128 256)) (= x249 (bvmul x63 (_ bv32 256))) (= x137 (bvadd (_ bv4 256) x242)) (= x56 (bvadd x171 x35)) (bvule x63 (_ bv18446744073709551615 256)) (= (x89 x41) x11) (= x63 (x197 x137)) (not (bvult x148 x56)) (= (bvand (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256) x78) x23) (= x78 (bvadd (_ bv63 256) x249)) (= x192 x59) (= x11 x149) (= x59 (x169 x159))) (= x53 x125)) (= x57 x96)) (and (bvule (_ bv1 256) x124) (= (bvult (_ bv0 256) x216) x126) (= x216 (x177 x75)) (= x60 x66) (bvuge (_ bv18446744073709551615 256) x242) (= (or x126 (not x33)) x187) (= x152 x60) (= x49 (_ bv1145441982 256)) x187 (= x124 (x143 x41)) (= (x72 (_ bv64 256) x60 (_ bv62 256)) x75) (bvule x216 (_ bv1099511627775 256)) (= x242 x123) (= (x26 (_ bv4 256)) x242)))) (and x52 (= (bvult (_ bv0 256) (x143 x41)) x174) (bvule x17 (_ bv4294967295 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x157) x174 x176 (bvuge x54 (_ bv0 256)) (bvuge x61 (_ bv0 256)) (bvule (_ bv0 256) x133) (bvule x225 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x125 (_ bv4294967295 256)) (bvule (_ bv68 256) x148) (bvule (_ bv0 256) x172) (bvule x88 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x38) (bvule x41 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x98 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x28) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x98) (bvule (_ bv0 256) x28) (bvule (_ bv1 256) x41) (bvuge x130 (_ bv0 256)) (= (_ bv0 256) x50) (bvule x172 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x148 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv0 256) x38) (= x158 (_ bv36 256)) (bvule x130 (_ bv4294967295 256)) (bvuge x118 (_ bv0 256)) (bvule x80 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x80 (_ bv0 256)) (bvule x117 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x194 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x203) (= (bvult (_ bv0 256) (x143 x203)) x176) (bvuge x194 (_ bv0 256)) (not (= x41 x203)) (bvuge x96 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x84) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x54) (bvule (_ bv0 256) x196) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x203) (bvule (_ bv0 256) x88) (bvuge x84 (_ bv0 256)) (bvule (_ bv0 256) x225) (bvule (_ bv0 256) x117) (= x52 (= x17 x125)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x61) (bvuge x125 (_ bv1 256)) (= x202 x225) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x133) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x118) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x96) (bvule (_ bv0 256) x160) (bvule x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x157) (bvuge x17 (_ bv1 256)) (bvule x196 (_ bv1461501637330902918203684832716283019655932542975 256)))) (and (=> (not x185) x44) (=> x185 x34)))))
(assert (bvult (_ bv10000 256) (x72 (_ bv64 256) x206 (_ bv62 256))))
(assert (=> (bvule x70 (_ bv10000 256)) (= (_ bv0 256) (x243 x70))))
(assert (= (x243 (_ bv1145441982 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x243 (_ bv1099511627775 256))))
(assert (x69 (_ bv1000000000000000000 256)))
(assert (= x30 (=> (and (= x13 (not (bvult (_ bv1 256) x39))) (= (x183 (_ bv128 256)) x39) (bvuge x87 (_ bv1 256)) (= x200 (bvadd x73 (_ bv32 256))) (= (x16 (_ bv160 256)) x73) (= x87 (x183 (_ bv128 256)))) (and x13 x81))))
(assert (= (_ bv0 256) (x243 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (x243 (x72 (_ bv64 256) x206 (_ bv62 256))) (x72 (_ bv64 256) x206 (_ bv62 256))))
(assert (= (and x48 x40) x31))
(assert (= (_ bv64 256) (x95 (x72 (_ bv64 256) x199 (_ bv62 256)))))
(assert (bvugt (x72 (_ bv64 256) x70 (_ bv60 256)) (_ bv10000 256)))
(assert (not (x69 (x72 (_ bv64 256) x206 (_ bv62 256)))))
(assert (= x34 (=> (and (= x64 (x197 x14)) (or (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x230) (bvule x230 (_ bv18446744073709551519 256))) (bvuge (_ bv18446744073709551615 256) x230) (bvuge (_ bv18446744073709551615 256) x230) (bvule (_ bv132 256) x148) (bvule x215 (_ bv340282366920938463463374607431768211455 256)) (bvule x148 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256) x43) (or (bvule x230 (_ bv18446744073709551519 256)) (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x230)) (= (not (bvugt x56 (bvadd (_ bv32 256) x14))) x184) (= x45 (x197 x178)) (= (bvadd x178 (_ bv32 256)) x14) (bvule x64 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (bvult x77 x230)) (= (x197 x35) x215) (= x178 (bvadd (_ bv32 256) x35)) (= x21 (bvadd (_ bv32 256) x232)) (= x77 (bvadd (_ bv96 256) x230)) (bvuge x43 (_ bv96 256)) (= x43 (bvadd x148 (bvneg x35))) (= (bvadd x230 (_ bv32 256)) x232)) (and x184 x44))))
(assert (x69 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)))
(assert (= x205 (or x82 x93)))
(assert (= (or x100 x173) x1))
(assert (= (_ bv0 256) (x243 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (=> (bvule x104 (_ bv10000 256)) (= (_ bv0 256) (x243 x104))))
(assert (= (x243 (_ bv2432040568 256)) (_ bv0 256)))
(assert (= x211 (and x185 x179)))
(assert (= (_ bv64 256) (x95 (x72 (_ bv64 256) x60 (_ bv62 256)))))
(assert (= (_ bv64 256) (x95 (x72 (_ bv64 256) x206 (_ bv62 256)))))
(check-sat)
(exit)
