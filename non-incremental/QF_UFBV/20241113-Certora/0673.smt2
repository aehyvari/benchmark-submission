(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x194 () Bool)
(declare-fun x175 () Bool)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x169 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x48 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x278 () (_ BitVec 256))
(declare-fun x42 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x26 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x131 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x229 () Bool)
(declare-fun x173 () Bool)
(declare-fun x155 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x126 () Bool)
(declare-fun x113 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x223 () Bool)
(declare-fun x12 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x233 () Bool)
(declare-fun x74 () Bool)
(declare-fun x137 () Bool)
(declare-fun x20 () (_ BitVec 256))
(declare-fun x262 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x172 () Bool)
(declare-fun x250 () Bool)
(declare-fun x59 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x201 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x134 () Bool)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x171 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x198 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x271 () Bool)
(declare-fun x102 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x269 () Bool)
(declare-fun x279 () Bool)
(declare-fun x188 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x163 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x65 () Bool)
(declare-fun x193 () Bool)
(declare-fun x127 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x9 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x205 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x174 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x247 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x58 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x68 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x249 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x50 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x57 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x248 () Bool)
(declare-fun x274 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x135 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x84 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x77 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x73 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x86 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x255 () Bool)
(declare-fun x35 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x258 ((_ BitVec 256)) Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x14 () Bool)
(declare-fun x256 () Bool)
(declare-fun x200 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x10 () (_ BitVec 256))
(declare-fun x227 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x231 () Bool)
(declare-fun x27 () Bool)
(declare-fun x56 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x43 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x64 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x184 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x261 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(define-fun x118 ((x202 (_ BitVec 256)) (x51 (_ BitVec 256))) Bool (= x202 (bvudiv (bvmul x51 x202) x51)))
(define-fun x234 ((x202 (_ BitVec 256)) (x51 (_ BitVec 256))) Bool (= x202 (bvsdiv (bvmul x202 x51) x51)))
(define-fun x186 ((x202 (_ BitVec 256)) (x51 (_ BitVec 256))) Bool (= x202 (bvsdiv (bvmul x51 x202) x51)))
(define-fun x252 ((x210 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x46 ((x210 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x82 ((x210 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x83 ((x210 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x16 ((x210 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x237 ((x210 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x156 ((x210 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x264 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 x52) x107 (x131 x210)))
(define-fun x253 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 x17) x257 (x264 x210)))
(define-fun x149 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv128 256)) x187 (x16 x210)))
(define-fun x232 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 x124) x276 (x262 x210)))
(define-fun x208 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 x277) x36 (x232 x210)))
(define-fun x203 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite x139 (ite x266 (x16 x210) (x149 x210)) (x16 x210)))
(define-fun x61 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x210) x112 (x203 x210)))
(define-fun x34 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite x48 (x203 x210) (x61 x210)))
(define-fun x275 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x210) x7 (x34 x210)))
(define-fun x24 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x210) x213 (x275 x210)))
(define-fun x45 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite x73 (x34 x210) (x24 x210)))
(define-fun x152 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x210) x23 (x252 x210)))
(define-fun x109 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv196 256)) x88 (x152 x210)))
(define-fun x66 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x210) x183 (x109 x210)))
(define-fun x259 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv128 256)) (_ bv100 256) (x46 x210)))
(define-fun x31 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x210) x177 (x66 x210)))
(define-fun x72 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv324 256)) x75 (x45 x210)))
(define-fun x98 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv356 256)) x222 (x72 x210)))
(define-fun x120 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x210) x150 (x98 x210)))
(define-fun x79 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv324 256) x210) (_ bv32 256) (x237 x210)))
(define-fun x221 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x210 (_ bv0 256)) (_ bv1 256) (x169 x210)))
(define-fun x41 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x210 (_ bv356 256)) (bvult x210 (_ bv388 256))) (x221 (bvadd (bvneg (_ bv356 256)) x210)) (x156 x210)))
(define-fun x106 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv420 256) x210) x84 (x120 x210)))
(define-fun x144 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite x30 (x120 x210) (ite x137 (x98 x210) (ite x27 (x72 x210) (ite x140 (x45 x210) (x106 x210))))))
(define-fun x15 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x141 x210) (_ bv0 256) (x144 x210)))
(define-fun x162 ((x210 (_ BitVec 256))) (_ BitVec 256) (ite (= x17 x210) x128 (x253 x210)))
(assert (= (x205 (x64 (_ bv64 256) x17 x39)) (x64 (_ bv64 256) x17 x39)))
(assert (x258 (_ bv1889567281 256)))
(assert (= x266 (and x74 x218)))
(assert (= (x205 (x64 (_ bv64 256) x7 (_ bv0 256))) (x64 (_ bv64 256) x7 (_ bv0 256))))
(assert (= (_ bv0 256) (x205 (_ bv599290589 256))))
(assert (= (or x216 x139) x255))
(assert (not (x258 (x64 (_ bv64 256) x17 x39))))
(assert (= (_ bv2 256) (x86 (x64 (_ bv64 256) x136 (_ bv2 256)))))
(assert (= (_ bv64 256) (x58 (x64 (_ bv64 256) x23 (_ bv2 256)))))
(assert (= (_ bv64 256) (x58 (x64 (_ bv64 256) x88 (_ bv2 256)))))
(assert (not x249))
(assert (= (x86 (x64 (_ bv64 256) x7 x54)) x54))
(assert (not (x258 (x64 (_ bv64 256) x7 (_ bv0 256)))))
(assert (= x230 (or x6 x42)))
(assert (x258 (_ bv4294967295 256)))
(assert (= (and x151 x53) x73))
(assert (= x30 (and x214 (not x129))))
(assert (x258 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x258 (_ bv599290589 256)))
(assert (= x7 (x77 (x64 (_ bv64 256) x7 x54))))
(assert (= x270 (=> (= x115 x213) x173)))
(assert (= (_ bv0 256) (x205 (_ bv4294967295 256))))
(assert (= (or x73 x9) x126))
(assert (= (=> (and (= x112 x187) (= x80 (bvand (_ bv340282366920938463463374607431768211455 256) x95))) x142) x175))
(assert (bvugt (x64 (_ bv64 256) x7 (_ bv0 256)) (_ bv10000 256)))
(assert (= x212 (=> (and (and (and (bvuge x69 (_ bv1 256)) (= (bvudiv x37 (_ bv1000000000000000000 256)) x116) (= (_ bv1289409798 256) x197) (= x251 (bvudiv x37 x55)) (= x37 (bvmul x260 (_ bv1000000000000000000 256))) (= x69 (x163 x17)) (= x116 x260) (= x209 x260) (= (_ bv36 256) x59) (= x260 x111)) (and (= x20 (_ bv1889567281 256)) (= (x208 x28) x97) (= (bvuge x97 x251) x198) (= x119 x136) (= (x64 (_ bv64 256) x136 (_ bv2 256)) x28) (= x17 x136) (= x44 (x163 x180)) (bvule (_ bv1 256) x44))) (and (= (_ bv36 256) x157) (= (_ bv404098525 256) x148) (bvuge x273 (_ bv1 256)) (= x133 (_ bv4 256)) (= (x163 x17) x273))) x198)))
(assert (= x151 (or x48 x230)))
(assert (not (x258 (x64 (_ bv64 256) x23 (_ bv2 256)))))
(assert (x258 (_ bv1000000000000000000 256)))
(assert (= (_ bv2 256) (x86 (x64 (_ bv64 256) x23 (_ bv2 256)))))
(assert (=> (bvuge (_ bv10000 256) x88) (= (x205 x88) (_ bv0 256))))
(assert (= (_ bv0 256) (x205 (_ bv1289409798 256))))
(assert (= x137 (and (not x56) x164)))
(assert (= (_ bv2 256) (x86 (x64 (_ bv64 256) x88 (_ bv2 256)))))
(assert (= x26 (and x263 x250)))
(assert (x258 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= (_ bv0 256) (x205 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (=> (bvuge (_ bv10000 256) x17) (= (x205 x17) (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x23) (= (x205 x23) (_ bv0 256))))
(assert (bvugt (x64 (_ bv64 256) x23 (_ bv3 256)) (_ bv10000 256)))
(assert (x258 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (x64 (_ bv64 256) x7 x54) (x205 (x64 (_ bv64 256) x7 x54))))
(assert (= (_ bv0 256) (x205 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (x258 (_ bv404098525 256)))
(assert (= (x205 x90) (x205 (bvadd (_ bv2 256) x90))))
(assert (= x249 (=> (and (and (and (= (bvudiv x204 (_ bv1000000000000000000 256)) x245) (= (_ bv1289409798 256) x71) (bvule (_ bv1 256) x102) (= (bvudiv x204 x55) x201) (= x245 x85) (= (bvmul (_ bv1000000000000000000 256) x85) x204) (= x102 (x163 x17)) (bvuge x55 (_ bv1 256)) (= x153 (_ bv36 256)) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x55) (= x63 x85) (= x85 x209)) (and (and (= x272 x7) (and (and (= (bvadd x90 (_ bv2 256)) x54) (= x244 (bvadd (bvneg x1) x95)) (= (x64 (_ bv64 256) x17 (_ bv60 256)) x90) (= x52 x272) (= (bvadd x90 (_ bv1 256)) x206) (= x22 (x264 x17)) (bvule x1 (_ bv340282366920938463463374607431768211455 256)) (= (bvugt x244 (_ bv0 256)) x50) (= x161 (x171 x99)) (= x257 x22) (= x10 (x227 x67)) (bvuge (_ bv20282409603651670423947251286015 256) x10) (= x107 (x131 x52)) (= x67 (x64 (_ bv64 256) x7 (_ bv0 256))) (= (x163 x17) x146) (= (x247 x206) x8) (= x267 x167) (= x125 (_ bv2593764592 256)) (bvule (_ bv1 256) x146) (= x3 x254) (= x99 (x64 (_ bv64 256) x7 x54)) (= x5 x107) (= (x68 x90) x1) (= (_ bv0 256) x168)) (= x199 x95))) (and (= x100 (x64 (_ bv64 256) x200 (_ bv2 256))) x229 (bvule (_ bv1 256) x217) (= x181 (_ bv1889567281 256)) (= x88 x167) (= (x184 (_ bv36 256)) x92) (= x195 x200) (= (bvuge x19 x201) x229) (bvule x88 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x200 x17) (= (x184 (_ bv4 256)) x88) (bvule (_ bv1 256) x92) (= x217 (x163 x180)) (= x3 x92) (= x19 (x262 x100))))) (and (bvuge x235 (_ bv0 256)) (not (= x17 x180)) (bvuge (_ bv4294967295 256) x220) (= x226 (bvugt (x163 x17) (_ bv0 256))) (not (= x23 x17)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x17) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x180) (bvule (_ bv1 256) x180) x2 (bvule x272 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x163 x17) x35) (bvule x265 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x81 (_ bv0 256)) (= (bvult (_ bv0 256) (x163 x180)) x2) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x47) (bvule (_ bv1 256) x35) (bvule (_ bv1 256) x23) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x159) x108 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x145) (bvule (_ bv0 256) x159) (bvule (_ bv0 256) x117) (= x43 (_ bv36 256)) (bvule x235 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= (_ bv0 256) x238) (not (= x180 x23)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x81) x226 (bvule (_ bv0 256) x145) (bvule (_ bv0 256) x265) (bvule (_ bv0 256) x220) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x23) (= (_ bv4 256) x268) (bvule (_ bv0 256) x219) (= (bvugt (x163 x23) (_ bv0 256)) x108) (bvuge x199 (_ bv0 256)) (bvule (_ bv68 256) x239) (bvuge x47 (_ bv0 256)) (bvuge x272 (_ bv0 256)) (bvuge x17 (_ bv1 256)) (bvule x209 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (= (_ bv404098525 256) x60) (bvule x117 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x239) (bvule x219 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x199 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (and (=> (and (= x8 x112) (not x50)) x142) (=> (and x50 (and (or x218 (not x218)) (= x218 (= x187 x8)))) x175)))))
(assert (= x216 (and x242 (not x50))))
(assert (x258 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (=> (bvuge (_ bv10000 256) x200) (= (x205 x200) (_ bv0 256))))
(assert (= (x205 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= x88 (x77 (x64 (_ bv64 256) x88 (_ bv2 256)))))
(assert (= (x205 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (x77 (x64 (_ bv64 256) x23 (_ bv2 256))) x23))
(assert (= (and x129 x214) x155))
(assert (bvugt (x64 (_ bv64 256) x17 x39) (_ bv10000 256)))
(assert (x258 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (_ bv64 256) (x58 (x64 (_ bv64 256) x17 x39))))
(assert (bvugt (x64 (_ bv64 256) x17 (_ bv60 256)) (_ bv10000 256)))
(assert (not (x258 (x64 (_ bv64 256) x7 x54))))
(assert (= (or x261 x266) x139))
(assert (not (x258 (x64 (_ bv64 256) x88 (_ bv2 256)))))
(assert (bvugt (x64 (_ bv64 256) x7 (_ bv61 256)) (_ bv10000 256)))
(assert (= (or x26 (and x250 (not x263))) x138))
(assert (= (x58 (x64 (_ bv64 256) x7 (_ bv0 256))) (_ bv64 256)))
(assert (= x140 (and (not x135) x126)))
(assert (= (_ bv64 256) (x58 (x64 (_ bv64 256) x136 (_ bv2 256)))))
(assert (= x172 (and (not x189) x255)))
(assert (= (_ bv0 256) (x205 (_ bv340282366920938463463374607431768211455 256))))
(assert (= x39 (x86 (x64 (_ bv64 256) x17 x39))))
(assert (bvult (_ bv10000 256) (x64 (_ bv64 256) x7 x54)))
(assert (x258 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (bvult (_ bv10000 256) (x64 (_ bv64 256) x88 (_ bv2 256))))
(assert (= (x64 (_ bv64 256) x88 (_ bv2 256)) (x205 (x64 (_ bv64 256) x88 (_ bv2 256)))))
(assert (= (x205 (x64 (_ bv64 256) x23 (_ bv2 256))) (x64 (_ bv64 256) x23 (_ bv2 256))))
(assert (=> (bvule x7 (_ bv10000 256)) (= (_ bv0 256) (x205 x7))))
(assert (= x231 (=> (and (and (= (_ bv324 256) x132) (= x224 (_ bv324 256)) (= (bvult (_ bv0 256) x178) x263) (= x178 (x79 (_ bv324 256))) (= (_ bv324 256) x174)) (or (not x263) (and x263 (and (= (_ bv1 256) x192) (bvule (_ bv32 256) x176) (= x176 (x79 (_ bv324 256))) (= x192 (x41 (_ bv356 256))) (bvule x176 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))))) x212)))
(assert (= x9 (and (not x53) x151)))
(assert (= x23 (x77 (x64 (_ bv64 256) x23 (_ bv3 256)))))
(assert (= x74 (and x242 x50)))
(assert (= (x77 (x64 (_ bv64 256) x7 (_ bv0 256))) x7))
(assert (bvult (_ bv10000 256) (x64 (_ bv64 256) x200 (_ bv2 256))))
(assert (=> (bvule x136 (_ bv10000 256)) (= (_ bv0 256) (x205 x136))))
(assert (=> (bvule x180 (_ bv10000 256)) (= (x205 x180) (_ bv0 256))))
(assert (= (x64 (_ bv64 256) x7 (_ bv61 256)) (x205 (x64 (_ bv64 256) x7 (_ bv61 256)))))
(assert (= (_ bv0 256) (x86 (x64 (_ bv64 256) x7 (_ bv0 256)))))
(assert (x258 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (_ bv0 256) (x205 (_ bv2593764592 256))))
(assert (= x42 (and (not x233) x172)))
(assert (= (=> (and (and (= x196 (x57 x78)) (= x96 (bvadd x213 x196)) (= x78 (x64 (_ bv64 256) x7 (_ bv61 256))) (= x53 (= (_ bv0 256) x213)) (not (bvugt x196 (bvadd x196 x213)))) (or x53 (not x53))) x228) x173))
(assert (= (_ bv64 256) (x58 (x64 (_ bv64 256) x7 (_ bv61 256)))))
(assert (= (_ bv60 256) (x86 (x64 (_ bv64 256) x17 (_ bv60 256)))))
(assert (= (=> (and (= x135 (bvult (_ bv0 256) x243)) (= (bvand x143 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) x21) (= x183 (ite (bvugt x92 x96) x96 x92)) (= (bvadd x21 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) x177) (bvuge x183 (_ bv1 256)) (= (_ bv260 256) x121) (= x91 (bvadd (bvneg x183) x96)) (not (bvugt x91 x96)) (= x143 (x66 (_ bv160 256))) (= x147 (_ bv0 256)) (= (x259 (_ bv128 256)) x243) (= x103 (_ bv128 256))) (and (=> (not x135) x123) (=> (and x135 (and (= x75 (x31 (_ bv160 256))) (= (bvugt x243 (_ bv32 256)) x25))) (and (=> (not x25) x123) (=> (and x25 (and (= x222 (x31 (_ bv192 256))) (= x56 (bvult (_ bv64 256) x243)))) (and (=> (and x56 (and (= (x31 (_ bv224 256)) x150) (= x129 (bvugt x243 (_ bv96 256))))) (and (=> x129 x223) (=> (not x129) x123))) (=> (not x56) x123))))))) x228))
(assert (not (x258 (x64 (_ bv64 256) x7 (_ bv61 256)))))
(assert (= (x205 (x64 (_ bv64 256) x17 (_ bv60 256))) (x64 (_ bv64 256) x17 (_ bv60 256))))
(assert (= (x58 (x64 (_ bv64 256) x7 x54)) (_ bv64 256)))
(assert (x258 (_ bv2593764592 256)))
(assert (= (x64 (_ bv64 256) x136 (_ bv2 256)) (x205 (x64 (_ bv64 256) x136 (_ bv2 256)))))
(assert (= x261 (and (not x218) x74)))
(assert (= (x58 (x64 (_ bv64 256) x17 (_ bv60 256))) (_ bv64 256)))
(assert (= (and x25 x241) x164))
(assert (=> (bvuge (_ bv10000 256) x52) (= (x205 x52) (_ bv0 256))))
(assert (= x200 (x77 (x64 (_ bv64 256) x200 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x64 (_ bv64 256) x23 (_ bv2 256))))
(assert (= (=> (and (= x127 (not (bvult (_ bv128 256) x243))) (= x84 (x31 (_ bv256 256)))) (and x127 x123)) x223))
(assert (= (and x189 x255) x48))
(assert (= x17 (x77 (x64 (_ bv64 256) x17 x39))))
(assert (x258 (_ bv1289409798 256)))
(assert (= x250 (or (and (not x29) x193) x87)))
(assert (= (and x233 x172) x6))
(assert (= (_ bv64 256) (x58 (x64 (_ bv64 256) x23 (_ bv3 256)))))
(assert (= (x64 (_ bv64 256) x23 (_ bv3 256)) (x205 (x64 (_ bv64 256) x23 (_ bv3 256)))))
(assert (= (x205 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (x58 (x64 (_ bv64 256) x200 (_ bv2 256))) (_ bv64 256)))
(assert (not (x258 (x64 (_ bv64 256) x200 (_ bv2 256)))))
(assert (= (x77 (x64 (_ bv64 256) x17 (_ bv60 256))) x17))
(assert (= x242 true))
(assert (= x123 (=> (and (and (= x105 x23) (= x124 (x64 (_ bv64 256) x23 (_ bv2 256))) (not (bvult x33 x276)) (= x277 (x64 (_ bv64 256) x88 (_ bv2 256))) (= (= x246 (_ bv0 256)) x29) (= (x64 (_ bv64 256) x23 (_ bv2 256)) x12) (= x40 x122) (= x114 x182) (bvuge x33 (_ bv1 256)) (= x278 (x232 x240)) (bvuge x13 (_ bv1 256)) (= x240 (x64 (_ bv64 256) x88 (_ bv2 256))) (= (bvadd x183 x278) x36) (= x33 (x262 x12)) (= x11 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (= (_ bv100 256) x130) (= x110 (_ bv324 256)) (= x166 x267) (= (bvadd x243 (_ bv324 256)) x141) (not (bvult x13 x38)) (= (x64 (_ bv64 256) x17 x39) x154) (= (bvadd x33 (bvneg x183)) x276) (= x170 (_ bv324 256)) (bvuge x207 (_ bv1 256)) (not (bvult x13 x183)) (= x246 (x79 (_ bv324 256))) (= x215 x166) (not (bvult x36 x278)) (= x207 (x163 x180)) (not (bvult x36 x278)) (= (x162 x180) x114) (= (_ bv1 256) x18) (= x104 (_ bv599290589 256)) (= x122 x183) (= (x64 (_ bv64 256) x23 (_ bv3 256)) x39) (= (x253 x17) x128) (= x130 (bvadd x141 (bvneg (_ bv324 256)))) (not (bvugt x183 x33)) (= (bvadd (bvneg x183) x13) x38) (= x13 (x113 x154)) (= x179 (_ bv100 256)) (= x128 x101)) (or (not x29) (and x29 (and (= x32 true) (= (x163 x180) x236) (bvule (_ bv1 256) x236))))) x231)))
(assert (= (_ bv0 256) (x205 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (= x214 (and x56 x164)))
(assert (= x193 (or x155 x27 x140 x137 x30)))
(assert (bvugt (x64 (_ bv64 256) x136 (_ bv2 256)) (_ bv10000 256)))
(assert (not (x258 (x64 (_ bv64 256) x23 (_ bv3 256)))))
(assert (= (x205 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (_ bv61 256) (x86 (x64 (_ bv64 256) x7 (_ bv61 256)))))
(assert (= (_ bv0 256) (x205 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (not (x258 (x64 (_ bv64 256) x17 (_ bv60 256)))))
(assert (= (_ bv0 256) (x205 (_ bv1889567281 256))))
(assert (x258 (_ bv340282366920938463463374607431768211455 256)))
(assert (= x87 (and x29 x193)))
(assert (= (x205 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= x27 (and (not x25) x241)))
(assert (= x241 (and x126 x135)))
(assert (= (=> (= x189 (= x112 x161)) (and (=> (and (not x189) (and (or (and x233 (= x115 (_ bv0 256))) (and (not x233) (= x115 x62))) (= x233 (= (_ bv0 256) x10)))) x270) (=> (and (= (_ bv0 256) x213) x189) x173))) x142))
(assert (= (x64 (_ bv64 256) x200 (_ bv2 256)) (x205 (x64 (_ bv64 256) x200 (_ bv2 256)))))
(assert (= (x86 (x64 (_ bv64 256) x200 (_ bv2 256))) (_ bv2 256)))
(assert (= (x205 (bvadd (_ bv1 256) x90)) (x205 x90)))
(assert (not (x258 (x64 (_ bv64 256) x136 (_ bv2 256)))))
(assert (= (x205 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (x258 (_ bv20282409603651670423947251286015 256)))
(assert (= (x77 (x64 (_ bv64 256) x7 (_ bv61 256))) x7))
(assert (= x136 (x77 (x64 (_ bv64 256) x136 (_ bv2 256)))))
(assert (= (_ bv3 256) (x86 (x64 (_ bv64 256) x23 (_ bv3 256)))))
(check-sat)
(exit)
