(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x231 () Bool)
(declare-fun x41 () Bool)
(declare-fun x60 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x234 () Bool)
(declare-fun x80 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x116 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x24 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x12 () Bool)
(declare-fun x48 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x55 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x42 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x217 () Bool)
(declare-fun x90 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x188 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x81 () Bool)
(declare-fun x232 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x162 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x7 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x68 () Bool)
(declare-fun x204 () Bool)
(declare-fun x253 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x147 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x227 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x238 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x210 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x107 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x142 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x252 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x32 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x171 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x212 () (_ BitVec 256))
(declare-fun x178 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x135 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x156 ((_ BitVec 256)) Bool)
(declare-fun x235 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x250 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x140 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x176 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x159 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x71 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x206 () Bool)
(declare-fun x218 () Bool)
(declare-fun x187 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x136 () Bool)
(declare-fun x151 () Bool)
(declare-fun x208 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x182 () Bool)
(declare-fun x111 () Bool)
(declare-fun x61 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x190 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x47 () Bool)
(declare-fun x59 () Bool)
(declare-fun x26 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x2 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x177 () Bool)
(declare-fun x200 () Bool)
(declare-fun x143 () Bool)
(define-fun x137 ((x129 (_ BitVec 256)) (x58 (_ BitVec 256))) Bool (= x129 (bvudiv (bvmul x58 x129) x58)))
(define-fun x141 ((x129 (_ BitVec 256)) (x58 (_ BitVec 256))) Bool (= x129 (bvsdiv (bvmul x129 x58) x58)))
(define-fun x216 ((x129 (_ BitVec 256)) (x58 (_ BitVec 256))) Bool (= x129 (bvsdiv (bvmul x58 x129) x58)))
(define-fun x22 ((x203 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x46 ((x203 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x124 ((x203 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x146 ((x203 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x38 ((x203 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x104 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (bvugt x7 x203) (x140 x203) (_ bv0 256)))
(define-fun x106 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvule (_ bv0 256) x203) (bvugt x7 x203)) (x188 x203) (x104 x203)))
(define-fun x87 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= x203 x245) x131 (x116 x203)))
(define-fun x246 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= x203 (_ bv128 256)) x212 (x22 x203)))
(define-fun x102 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x203) x3 (x38 x203)))
(define-fun x16 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite x90 (x38 x203) (x102 x203)))
(define-fun x195 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= x240 x203) x62 (x124 x203)))
(define-fun x211 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite x90 (x124 x203) (x195 x203)))
(define-fun x109 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= x203 x207) x100 (x211 x203)))
(define-fun x157 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite x43 (x211 x203) (x109 x203)))
(define-fun x76 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= x37 x203) x92 (x146 x203)))
(define-fun x66 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite x90 (x146 x203) (x76 x203)))
(define-fun x21 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= x105 x203) x164 (x159 x203)))
(define-fun x215 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite x253 (x159 x203) (ite x55 (ite x82 (x159 x203) (x21 x203)) (x159 x203))))
(define-fun x114 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite (= x203 x3) x144 (x46 x203)))
(define-fun x113 ((x203 (_ BitVec 256))) (_ BitVec 256) (ite x90 (x46 x203) (x114 x203)))
(assert (= (x48 x53) (x48 (bvadd (_ bv1 256) x53))))
(assert (= (=> (and (= x60 (bvand (_ bv340282366920938463463374607431768211455 256) x77)) (= x164 x33)) x6) x158))
(assert (x156 (_ bv18446744073709551519 256)))
(assert (= (_ bv64 256) (x42 (x187 (_ bv64 256) x8 (_ bv60 256)))))
(assert (= x160 (or x90 x238)))
(assert (= (x24 (x187 (_ bv64 256) x108 (_ bv60 256))) x108))
(assert (=> (bvule x112 (_ bv10000 256)) (= (x48 x112) (_ bv0 256))))
(assert (= x8 (x24 (x187 (_ bv64 256) x8 (_ bv60 256)))))
(assert (not (x156 (x187 (_ bv64 256) x112 (_ bv60 256)))))
(assert (bvugt (x187 (_ bv64 256) x108 (_ bv60 256)) (_ bv10000 256)))
(assert (= x242 (or x130 x166)))
(assert (= (x24 (x187 (_ bv64 256) x155 x34)) x155))
(assert (= (x42 (x187 (_ bv64 256) x28 (_ bv60 256))) (_ bv64 256)))
(assert (= (x48 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)) (_ bv0 256)))
(assert (= (x187 (_ bv64 256) x155 x34) (x48 (x187 (_ bv64 256) x155 x34))))
(assert (x156 (_ bv1000000000000000000 256)))
(assert (= x59 (or x253 x111)))
(assert (= (and x242 (not x228)) x151))
(assert (= x206 (=> (= x228 (ite x5 x5 (not (bvult x176 x107)))) (and (=> (and x228 (= x164 x149)) x103) (=> (and (and (= x177 (bvugt x77 x107)) (or (and (not x177) (= x77 x123)) (and x177 (= x123 x107)))) (not x228)) x153)))))
(assert (x156 (_ bv4294967295 256)))
(assert (= x154 (and x136 x250)))
(assert (= (x71 (x187 (_ bv64 256) x112 (_ bv60 256))) (_ bv60 256)))
(assert (= (_ bv0 256) (x48 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= x64 (=> (and (= x136 (bvugt x70 (_ bv0 256))) (= x70 (x246 (_ bv128 256)))) (and (=> (and x136 (and (= x175 (bvugt x74 (_ bv0 256))) (bvuge x78 (_ bv1 256)) (= (bvadd x127 (_ bv64 256)) x196) (bvuge x197 (_ bv1 256)) (= x28 (bvand x173 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (x16 (_ bv160 256)) x205) (= (x147 x53) x176) (= (bvadd (_ bv64 256) x205) x52) (bvuge x134 (_ bv1 256)) (= x197 (x246 (_ bv128 256))) (= x74 (bvadd (bvneg x176) x77)) (= (bvadd (_ bv1 256) x53) x105) (= x173 (x66 x196)) (= x149 (x159 x105)) (bvule x176 (_ bv340282366920938463463374607431768211455 256)) (= x20 (x16 (_ bv160 256))) (= (bvadd x20 (_ bv32 256)) x27) (= x127 (x16 (_ bv160 256))) (= x78 (x246 (_ bv128 256))) (= x193 (x66 x52)) (= (x157 x27) x198) (= (x187 (_ bv64 256) x28 (_ bv60 256)) x53) (= (x246 (_ bv128 256)) x134))) (and (=> (and (not x175) (= x149 x33)) x6) (=> (and x175 (and (or (and (= (= x77 x176) x5) (not x236)) (and x236 (= x236 x5))) (and (= (ite (= x220 (_ bv0 256)) (= x220 (_ bv0 256)) (= x198 (_ bv0 256))) x236) (bvule x220 (_ bv340282366920938463463374607431768211455 256)) (= (x178 x53) x220)))) x206))) (=> (not x136) x135)))))
(assert (= (x48 (_ bv4294967295 256)) (_ bv0 256)))
(assert (bvult (_ bv10000 256) (x187 (_ bv64 256) x8 (_ bv60 256))))
(assert (= (or x43 x12) x250))
(assert (= (and x160 (not x23)) x43))
(assert (x156 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x238 (and x41 x119)))
(assert (= (=> (and (or x217 (not x217)) (= (= x149 x164) x217)) x158) x103))
(assert (= (x42 (x187 (_ bv64 256) x112 (_ bv60 256))) (_ bv64 256)))
(assert (= x25 (or x231 x40)))
(assert (= x143 (or x142 x25)))
(assert (=> (bvuge (_ bv10000 256) x115) (= (x48 x115) (_ bv0 256))))
(assert (= (x24 (x187 (_ bv64 256) x11 (_ bv60 256))) x11))
(assert (not (x156 (x187 (_ bv64 256) x11 (_ bv60 256)))))
(assert (= (=> (and (and (= x93 x125) (= x31 (_ bv68 256)) (= x99 x50)) (and (and (and (= x50 x115) (= x115 x167) (= x133 (_ bv36 256)) (= x121 (_ bv1817583341 256)) (= (x187 (_ bv64 256) x115 x96) x227) (bvuge x235 (_ bv1 256)) (= (x32 x227) x223) (= (x171 x248) x235) (= x79 x93) (= x169 x108) (= x35 (x187 (_ bv64 256) x108 (_ bv60 256))) (= x96 (bvadd (_ bv2 256) x35))) (and (= x184 (x171 x248)) (bvule (_ bv1 256) x184) (= x192 (x187 (_ bv64 256) x112 (_ bv60 256))) (= x86 (bvadd x192 (_ bv1 256))) (= x2 (bvule x223 x126)) (= x29 (_ bv2727740892 256)) (= x112 x19) (= (x215 x86) x126) (= x79 x112))) (= x108 x125))) x2) x135))
(assert (= (x48 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (x156 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)))
(assert (bvult (_ bv10000 256) (x187 (_ bv64 256) x115 x96)))
(assert (= (x71 (x187 (_ bv64 256) x108 (_ bv60 256))) (_ bv60 256)))
(assert (=> (bvuge (_ bv10000 256) x28) (= (_ bv0 256) (x48 x28))))
(assert (= (x48 (bvadd x45 (_ bv2 256))) (x48 x45)))
(assert (not (x156 (x187 (_ bv64 256) x108 (_ bv60 256)))))
(assert (=> (bvule x245 (_ bv10000 256)) (= (x48 x245) (_ bv0 256))))
(assert (= (and x168 (not x236)) x166))
(assert (x156 (_ bv1817583341 256)))
(assert (= (and (not x177) x151) x40))
(assert (=> (bvuge (_ bv10000 256) x155) (= (_ bv0 256) (x48 x155))))
(assert (not (x156 (x187 (_ bv64 256) x8 (_ bv60 256)))))
(assert (= (_ bv0 256) (x48 (_ bv1000000000000000000 256))))
(assert (= x115 (x24 (x187 (_ bv64 256) x115 x96))))
(assert (= (and x151 x177) x231))
(assert (= (_ bv0 256) (x48 (_ bv2727740892 256))))
(assert (bvugt (x187 (_ bv64 256) x11 (_ bv60 256)) (_ bv10000 256)))
(assert (= true x41))
(assert (= (x48 (x187 (_ bv64 256) x11 (_ bv60 256))) (x187 (_ bv64 256) x11 (_ bv60 256))))
(assert (= (x48 x192) (x48 (bvadd (_ bv1 256) x192))))
(assert (= x112 (x24 (x187 (_ bv64 256) x112 (_ bv60 256)))))
(assert (= (_ bv0 256) (x48 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (bvult (_ bv10000 256) (x187 (_ bv64 256) x155 x34)))
(assert (=> (bvule x252 (_ bv10000 256)) (= (x48 x252) (_ bv0 256))))
(assert (x156 (_ bv2727740892 256)))
(assert (= x111 (or x55 x214)))
(assert (= (x48 (x187 (_ bv64 256) x28 (_ bv60 256))) (x187 (_ bv64 256) x28 (_ bv60 256))))
(assert (not x118))
(assert (= (_ bv0 256) (x48 (_ bv1817583341 256))))
(assert (= x214 (and x154 (not x175))))
(assert (= (x48 x35) (x48 (bvadd (_ bv2 256) x35))))
(assert (x156 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)))
(assert (=> (bvule x108 (_ bv10000 256)) (= (_ bv0 256) (x48 x108))))
(assert (x156 (_ bv2997214202 256)))
(assert (= (=> (and (or (bvuge x3 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256)) (bvule x3 (_ bv18446744073709551519 256))) (= (bvadd (_ bv32 256) x3) x240) (= x165 (not (bvult (bvadd x226 (_ bv32 256)) x243))) (bvule (_ bv132 256) x7) (not (bvult x14 x3)) (bvuge (_ bv18446744073709551615 256) x3) (bvule x189 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)) (= (x106 x230) x144) (= (bvadd x3 (_ bv96 256)) x14) (bvule (_ bv96 256) x189) (bvuge (_ bv340282366920938463463374607431768211455 256) x144) (= (bvadd (_ bv32 256) x240) x37) (= (x106 x148) x62) (bvule x92 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x189 (bvadd (bvneg x230) x7)) (or (bvule (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639840 256) x3) (bvuge (_ bv18446744073709551519 256) x3)) (bvule x3 (_ bv18446744073709551615 256)) (= x226 (bvadd (_ bv32 256) x148)) (= x148 (bvadd x230 (_ bv32 256))) (= x92 (x106 x226)) (bvule x7 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))) (and x165 x94)) x234))
(assert (= (x48 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)) (_ bv0 256)))
(assert (= (x48 (_ bv18446744073709551519 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x48 (_ bv18446744073709551487 256))))
(assert (= (x71 (x187 (_ bv64 256) x11 (_ bv60 256))) (_ bv60 256)))
(assert (= x153 (=> (and (= (bvmul x91 (_ bv1000000000000000000 256)) x202) (x137 x220 x97) (bvule x30 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x208 (bvadd x132 x149)) (= (= x91 (_ bv0 256)) x72) (= x208 x164) (or x72 x89) (bvule (_ bv0 256) x30) (= x97 (bvadd (bvneg x176) x123)) (= (bvudiv x202 x198) x132) (= (bvudiv x202 x91) x194) (= x89 (= (_ bv1000000000000000000 256) x194)) (= x91 x30) (= x30 (bvmul x220 x97)) (not (bvult x123 x97)) (not (bvugt x132 (bvadd x132 x149))) (bvuge x198 (_ bv1 256))) x103)))
(assert (= x118 (=> (and (and (= x4 x8) (and (and (= x34 (bvadd (_ bv2 256) x45)) (= (_ bv36 256) x120) (= x139 (x32 x61)) (= x8 x249) (= (_ bv1817583341 256) x181) (= x155 x239) (= x45 (x187 (_ bv64 256) x8 (_ bv60 256))) (bvule (_ bv1 256) x18) (= x93 x180) (= x190 x155) (= (x171 x248) x18) (= x61 (x187 (_ bv64 256) x155 x34))) (and (and (= x95 x51) (and (= x77 x225) (and (bvugt x7 x254) (bvuge (_ bv18446744073709551615 256) x212) (= x131 x232) (= x254 (bvadd (_ bv31 256) x210)) (= (bvand x209 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639904 256)) x161) (= x150 (_ bv128 256)) (bvule x161 (_ bv18446744073709551487 256)) (= x243 (bvadd x221 x230)) (= x110 x83) (not (bvult x7 x243)) (= x95 x245) (= x230 (bvadd (_ bv32 256) x210)) (= x57 (bvmul (_ bv32 256) x212)) (= x119 (bvult x230 x243)) (= x209 (bvadd (_ bv63 256) x57)) (= x49 (_ bv2997214202 256)) (= x15 (x171 x248)) (= (x116 x245) x131) (= x210 (bvadd (_ bv4 256) x163)) (= (bvadd x161 (_ bv128 256)) x3) (= (x87 x248) x83) (= x221 (bvmul x212 (_ bv96 256))) (= (x106 x210) x212) (bvule (_ bv1 256) x15)))) (and (= x180 x11) (= (_ bv2727740892 256) x179) x185 (= (bvadd (_ bv1 256) x237) x191) (= (x159 x191) x247) (= x185 (bvuge x247 x139)) (= x163 (x188 (_ bv4 256))) (= (x187 (_ bv64 256) x11 (_ bv60 256)) x237) (= x163 x36) (bvule x163 (_ bv18446744073709551615 256)) (bvule (_ bv1 256) x44) (= (x171 x248) x44) (= x11 x233))))) (and (bvuge x225 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x186) (= x162 (bvult (_ bv0 256) (x171 x248))) (bvule (_ bv1 256) x252) (= (_ bv0 256) x229) (bvule x152 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x65 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x88 (_ bv68 256)) (bvuge x69 (_ bv0 256)) (bvule x93 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (bvugt (x171 x252) (_ bv0 256)) x54) (not (= x248 x252)) (bvule (_ bv0 256) x219) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x248) (= x93 x4) x54 (bvuge x7 (_ bv68 256)) (= x239 x99) (bvuge x93 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x95) (bvuge x186 (_ bv0 256)) (bvuge x65 (_ bv0 256)) (bvuge x85 (_ bv0 256)) (bvuge x1 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x56) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x225) (bvule (_ bv0 256) x152) (bvule x85 (_ bv4294967295 256)) (bvule (_ bv0 256) x95) x162 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x99) (bvuge x248 (_ bv1 256)) (bvule x252 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x56) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x219) (bvule (_ bv0 256) x122) (bvule x69 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x1) (bvule (_ bv0 256) x99) (bvule x122 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x7 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))) (and (=> x119 x234) (=> (not x119) x94)))))
(assert (= (x71 (x187 (_ bv64 256) x28 (_ bv60 256))) (_ bv60 256)))
(assert (= (and x143 (not x217)) x47))
(assert (= (x187 (_ bv64 256) x112 (_ bv60 256)) (x48 (x187 (_ bv64 256) x112 (_ bv60 256)))))
(assert (= x82 (and x217 x143)))
(assert (= (=> (and (= (not (bvugt x251 (_ bv1 256))) x80) (= (x246 (_ bv128 256)) x73) (bvule (_ bv1 256) x73) (= (bvadd (_ bv32 256) x10) x207) (= (x246 (_ bv128 256)) x251) (= x10 (x16 (_ bv160 256)))) (and x80 x64)) x67))
(assert (= (x71 (x187 (_ bv64 256) x155 x34)) x34))
(assert (= (and (not x119) x41) x90))
(assert (= x168 (and x175 x154)))
(assert (x156 (_ bv18446744073709551487 256)))
(assert (= (and x160 x23) x12))
(assert (= (x42 (x187 (_ bv64 256) x115 x96)) (_ bv64 256)))
(assert (= (x187 (_ bv64 256) x8 (_ bv60 256)) (x48 (x187 (_ bv64 256) x8 (_ bv60 256)))))
(assert (= (x48 (x187 (_ bv64 256) x115 x96)) (x187 (_ bv64 256) x115 x96)))
(assert (= (_ bv0 256) (x48 (_ bv2997214202 256))))
(assert (=> (bvuge (_ bv10000 256) x11) (= (_ bv0 256) (x48 x11))))
(assert (= x142 (and x242 x228)))
(assert (x156 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)))
(assert (=> (bvuge (_ bv10000 256) x8) (= (_ bv0 256) (x48 x8))))
(assert (= (_ bv0 256) (x48 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (x48 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819931 256)) (_ bv0 256)))
(assert (x156 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not (x156 (x187 (_ bv64 256) x155 x34))))
(assert (= (_ bv0 256) (x48 (_ bv18446744073709551615 256))))
(assert (= x6 (=> (and (= x128 (x246 (_ bv128 256))) (bvuge x39 (_ bv1 256)) (bvule (_ bv1 256) x98) (= (x246 (_ bv128 256)) x39) (bvuge x128 (_ bv1 256)) (= (x246 (_ bv128 256)) x98) (= (x246 (_ bv128 256)) x174) (= x75 (not (bvult (_ bv1 256) x174))) (= (x16 (_ bv160 256)) x222) (= (x113 x222) x244) (= (bvand (_ bv340282366920938463463374607431768211455 256) x244) x183)) (and x135 x75))))
(assert (= x55 (or x47 x82)))
(assert (= x130 (and x236 x168)))
(assert (not (x156 (x187 (_ bv64 256) x28 (_ bv60 256)))))
(assert (= (=> (and (= x84 (x246 (_ bv128 256))) (= x138 x51) (= x23 (bvult (_ bv0 256) x84)) (= x138 (bvand x224 (_ bv1461501637330902918203684832716283019655932542975 256)))) (and (=> x23 x67) (=> (not x23) x64))) x94))
(assert (= (x42 (x187 (_ bv64 256) x155 x34)) (_ bv64 256)))
(assert (=> (bvule x248 (_ bv10000 256)) (= (_ bv0 256) (x48 x248))))
(assert (= (x71 (x187 (_ bv64 256) x115 x96)) x96))
(assert (x156 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (_ bv64 256) (x42 (x187 (_ bv64 256) x11 (_ bv60 256)))))
(assert (= (and (not x136) x250) x253))
(assert (= (_ bv64 256) (x42 (x187 (_ bv64 256) x108 (_ bv60 256)))))
(assert (= (x24 (x187 (_ bv64 256) x28 (_ bv60 256))) x28))
(assert (bvugt (x187 (_ bv64 256) x28 (_ bv60 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x187 (_ bv64 256) x112 (_ bv60 256))))
(assert (= (x187 (_ bv64 256) x108 (_ bv60 256)) (x48 (x187 (_ bv64 256) x108 (_ bv60 256)))))
(assert (x156 (_ bv340282366920938463463374607431768211455 256)))
(assert (not (x156 (x187 (_ bv64 256) x115 x96))))
(assert (= (x48 x237) (x48 (bvadd (_ bv1 256) x237))))
(assert (x156 (_ bv18446744073709551615 256)))
(assert (= (x71 (x187 (_ bv64 256) x8 (_ bv60 256))) (_ bv60 256)))
(check-sat)
(exit)
