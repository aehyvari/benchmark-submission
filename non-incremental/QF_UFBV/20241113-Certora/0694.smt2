(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x246 () Bool)
(declare-fun x201 () Bool)
(declare-fun x289 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x128 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x302 () (_ BitVec 256))
(declare-fun x211 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x259 () Bool)
(declare-fun x228 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x114 () Bool)
(declare-fun x269 () (_ BitVec 256))
(declare-fun x121 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x208 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x218 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x265 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x130 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x84 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x4 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x30 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x65 () (_ BitVec 256))
(declare-fun x284 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x252 () Bool)
(declare-fun x141 () (_ BitVec 256))
(declare-fun x285 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x61 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x32 () Bool)
(declare-fun x182 () Bool)
(declare-fun x273 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x224 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x38 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x239 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x76 () Bool)
(declare-fun x274 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x240 () Bool)
(declare-fun x258 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x43 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x198 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x18 () Bool)
(declare-fun x299 () (_ BitVec 256))
(declare-fun x57 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x260 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x23 () Bool)
(declare-fun x219 () Bool)
(declare-fun x263 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x102 () Bool)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x56 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x262 () Bool)
(declare-fun x5 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x33 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x191 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x288 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x253 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x237 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x222 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x78 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x40 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x275 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x266 () (_ BitVec 256))
(declare-fun x176 ((_ BitVec 256)) Bool)
(declare-fun x85 () Bool)
(declare-fun x120 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x95 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x281 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x280 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x19 () Bool)
(declare-fun x234 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x62 () Bool)
(declare-fun x268 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x81 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x206 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x140 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x213 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x50 () Bool)
(declare-fun x193 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x118 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x150 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x296 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x96 () (_ BitVec 256))
(define-fun x92 ((x28 (_ BitVec 256)) (x142 (_ BitVec 256))) Bool (= x28 (bvudiv (bvmul x142 x28) x142)))
(define-fun x161 ((x28 (_ BitVec 256)) (x142 (_ BitVec 256))) Bool (= x28 (bvsdiv (bvmul x28 x142) x142)))
(define-fun x170 ((x28 (_ BitVec 256)) (x142 (_ BitVec 256))) Bool (= x28 (bvsdiv (bvmul x142 x28) x142)))
(define-fun x124 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x174 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x162 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x216 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x179 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x126 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x241 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x137 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x107 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x133 ((x233 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x82 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 x269) x7 (x43 x233)))
(define-fun x169 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 x217) x1 (x82 x233)))
(define-fun x261 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv128 256)) (_ bv1 256) (x124 x233)))
(define-fun x297 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv192 256)) (_ bv0 256) (x162 x233)))
(define-fun x177 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv224 256)) (_ bv0 256) (x179 x233)))
(define-fun x251 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x233) (_ bv0 256) (x241 x233)))
(define-fun x132 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv160 256)) (_ bv192 256) (x107 x233)))
(define-fun x232 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x233) x217 (x297 x233)))
(define-fun x36 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv320 256)) x250 (x177 x233)))
(define-fun x45 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv352 256)) x293 (x251 x233)))
(define-fun x255 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x233) (_ bv288 256) (x132 x233)))
(define-fun x72 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x254 x233) x123 (x169 x233)))
(define-fun x119 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 x217) x24 (x72 x233)))
(define-fun x104 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x128 x233) x135 (x119 x233)))
(define-fun x156 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x233) (_ bv1 256) (x174 x233)))
(define-fun x190 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv192 256)) (_ bv0 256) (x216 x233)))
(define-fun x91 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv224 256)) (_ bv0 256) (x126 x233)))
(define-fun x73 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv256 256)) (_ bv0 256) (x137 x233)))
(define-fun x172 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x233) (_ bv192 256) (x133 x233)))
(define-fun x181 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= x233 (_ bv288 256)) x217 (x190 x233)))
(define-fun x99 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x233) x141 (x91 x233)))
(define-fun x303 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x233) x293 (x73 x233)))
(define-fun x155 ((x233 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x233) (_ bv288 256) (x172 x233)))
(assert (= (=> (and (bvule x275 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (or x203 x201) (x92 x194 x226) (= (bvadd x180 x79) x301) (= (= x105 (_ bv1000000000000000000 256)) x203) (= x201 (= x97 (_ bv0 256))) (= x275 x97) (= (bvudiv x289 x97) x105) (= x222 x301) (not (bvugt x79 (bvadd x79 x180))) (= x289 (bvmul (_ bv1000000000000000000 256) x97)) (bvuge x275 (_ bv0 256)) (= x275 (bvmul x226 x194)) (bvuge x75 (_ bv1 256)) (= x226 (bvadd x263 (bvneg x256))) (not (bvult x263 x226)) (= x79 (bvudiv x289 x75))) x84) x153))
(assert (= (_ bv0 256) (x260 (x130 (_ bv64 256) x187 (_ bv0 256)))))
(assert (= (x296 (x130 (_ bv64 256) x116 (_ bv60 256))) (_ bv64 256)))
(assert (not (x176 (x130 (_ bv64 256) x12 (_ bv0 256)))))
(assert (bvult (_ bv10000 256) (x130 (_ bv64 256) x12 (_ bv0 256))))
(assert (= (or x210 x182) x148))
(assert (= x291 (and x15 x290)))
(assert (= (=> (and (and (and (and (and (= x117 x65) (and (and (= x77 x199) (and (and (= x128 x65) (= x284 x88) (= x227 (x130 (_ bv64 256) x77 (_ bv0 256))) (bvuge (_ bv20282409603651670423947251286015 256) x141) (= x141 (x281 x227)) (= x135 (x119 x128)) (= x144 (x156 (_ bv128 256))) (bvule (_ bv1 256) x101) (= x58 (_ bv128 256)) (= x249 x135) (= x60 x77) (= x290 (bvult (_ bv0 256) x144)) (= x101 (x57 x217)) (= (_ bv2378104546 256) x136) (= (x104 x217) x284)) (= x294 x258))) (and (= (_ bv1 256) x3) (= x123 x271) (= (x72 x217) x230) (= x157 x199) (= x117 x247) (= x247 (x38 x183)) (bvule x247 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x245 (_ bv2069565783 256)) (= x24 x230) (= x65 x254) (= (_ bv36 256) x47) (bvuge x14 (_ bv1 256)) (= x167 x248) (= x14 (x57 x217)) (= x183 (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256))) (= (x169 x254) x123)))) (and (= (bvule x159 x147) x213) (= (_ bv1889567281 256) x48) (= x248 x52) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x165) (bvuge x165 (_ bv36 256)) (= (x57 x10) x63) (= x52 (x198 (_ bv4 256))) x213 (= x274 (x130 (_ bv64 256) x110 (_ bv2 256))) (= x217 x110) (bvule (_ bv1 256) x63) (= x110 x29) (= (x208 x274) x147))) (and (= x16 (_ bv1289409798 256)) (= x189 x293) (bvule x31 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x189 x238) (= x206 (x57 x217)) (= (_ bv36 256) x25) (bvuge x31 (_ bv1 256)) (= x209 x189) (= (bvudiv x113 (_ bv1000000000000000000 256)) x238) (bvuge x206 (_ bv1 256)) (= (bvmul x189 (_ bv1000000000000000000 256)) x113) (= (bvudiv x113 x31) x159))) (and (= x93 x12) (= (_ bv4 256) x149) (= (_ bv36 256) x235) (= (x57 x217) x44) (bvuge x44 (_ bv1 256)) (= (_ bv404098525 256) x244) (bvuge (_ bv20282409603651670423947251286015 256) x292) (= (x130 (_ bv64 256) x12 (_ bv0 256)) x215) (bvule (_ bv1 256) x129) (= x120 (bvuge x293 x292)) x120 (= x13 (_ bv1889567281 256)) (= x292 (x281 x215)) (= x129 (x57 x217)) (= x6 x12))) (and (= x122 (_ bv4 256)) (= (_ bv404098525 256) x158) (= (_ bv36 256) x35) (= x157 x93) (= (x57 x217) x299) (= x287 x202) (= x71 (x150 x41)) (= x287 (bvadd x71 x109)) (= x41 (x130 (_ bv64 256) x187 (_ bv61 256))) (not (bvugt x71 (bvadd x109 x71))) (bvule (_ bv1 256) x299) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x293))) (and (=> (and x290 (and (or (and (= x262 (= x258 x70)) (not x115)) (and x115 (= x262 x115))) (and (= (x118 x140) x280) (bvuge (_ bv340282366920938463463374607431768211455 256) x70) (= x160 (bvand x34 (_ bv1461501637330902918203684832716283019655932542975 256))) (= x283 (x155 (_ bv160 256))) (= x125 (x303 x108)) (= (bvadd x53 (_ bv64 256)) x108) (= x53 (x155 (_ bv160 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x280) (= x80 (bvadd x140 (_ bv1 256))) (= (x81 x80) x67) (= (x239 x140) x70) (= x140 (x130 (_ bv64 256) x160 (_ bv60 256))) (= (ite (= (_ bv0 256) x280) (= (_ bv0 256) x280) (= (_ bv0 256) x125)) x115) (= x34 (x181 x283))))) x9) (=> (and (= x4 (_ bv0 256)) (not x290)) x273))) x85))
(assert (=> (bvuge (_ bv10000 256) x269) (= (_ bv0 256) (x33 x269))))
(assert (x176 (_ bv2378104546 256)))
(assert (= x110 (x40 (x130 (_ bv64 256) x110 (_ bv2 256)))))
(assert (= (_ bv2 256) (x260 (x130 (_ bv64 256) x110 (_ bv2 256)))))
(assert (= (_ bv64 256) (x296 (x130 (_ bv64 256) x160 (_ bv60 256)))))
(assert (bvugt (x130 (_ bv64 256) x110 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x33 (x130 (_ bv64 256) x116 (_ bv60 256))) (x130 (_ bv64 256) x116 (_ bv60 256))))
(assert (= (x296 (x130 (_ bv64 256) x12 (_ bv0 256))) (_ bv64 256)))
(assert (= (and (not x111) x148) x127))
(assert (= (x33 (x130 (_ bv64 256) x160 (_ bv60 256))) (x130 (_ bv64 256) x160 (_ bv60 256))))
(assert (= x76 (and (not x32) x127)))
(assert (= (x33 (x130 (_ bv64 256) x77 (_ bv0 256))) (x130 (_ bv64 256) x77 (_ bv0 256))))
(assert (= (x33 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (x296 (x130 (_ bv64 256) x110 (_ bv2 256))) (_ bv64 256)))
(assert (= x259 (and x17 (not x223))))
(assert (= (or x192 x56) x17))
(assert (= (x33 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (= (x130 (_ bv64 256) x187 x89) (x33 (x130 (_ bv64 256) x187 x89))))
(assert (x176 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (bvugt (x130 (_ bv64 256) x77 x264) (_ bv10000 256)))
(assert (= (x130 (_ bv64 256) x110 (_ bv2 256)) (x33 (x130 (_ bv64 256) x110 (_ bv2 256)))))
(assert (= (x296 (x130 (_ bv64 256) x187 (_ bv0 256))) (_ bv64 256)))
(assert (= x131 (and x17 x223)))
(assert (not (x176 (x130 (_ bv64 256) x187 (_ bv61 256)))))
(assert (= (_ bv64 256) (x296 (x130 (_ bv64 256) x77 x264))))
(assert (= (or x246 x76) x103))
(assert (= (and (not x78) x237) x212))
(assert (not (x176 (x130 (_ bv64 256) x77 x264))))
(assert (not x219))
(assert (bvugt (x130 (_ bv64 256) x77 (_ bv61 256)) (_ bv10000 256)))
(assert (= (x260 (x130 (_ bv64 256) x187 (_ bv61 256))) (_ bv61 256)))
(assert (= x15 (or x212 x50)))
(assert (= (x260 (x130 (_ bv64 256) x187 x89)) x89))
(assert (= (x33 (x130 (_ bv64 256) x187 (_ bv0 256))) (x130 (_ bv64 256) x187 (_ bv0 256))))
(assert (= (x33 (bvadd (_ bv1 256) x140)) (x33 x140)))
(assert (= (and x102 x282) x192))
(assert (= (x40 (x130 (_ bv64 256) x77 x264)) x77))
(assert (= (_ bv0 256) (x33 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (=> (bvuge (_ bv10000 256) x110) (= (x33 x110) (_ bv0 256))))
(assert (= (and (not x270) x259) x240))
(assert (= x160 (x40 (x130 (_ bv64 256) x160 (_ bv60 256)))))
(assert (= (_ bv0 256) (x33 (_ bv20282409603651670423947251286015 256))))
(assert (bvult (_ bv10000 256) (x130 (_ bv64 256) x77 (_ bv0 256))))
(assert (= (and (not x290) x15) x121))
(assert (not (x176 (x130 (_ bv64 256) x110 (_ bv2 256)))))
(assert (x176 (_ bv20282409603651670423947251286015 256)))
(assert (= (and x127 x32) x246))
(assert (= (_ bv0 256) (x33 (_ bv340282366920938463463374607431768211455 256))))
(assert (= (x33 (x130 (_ bv64 256) x77 x264)) (x130 (_ bv64 256) x77 x264)))
(assert (= x12 (x40 (x130 (_ bv64 256) x12 (_ bv0 256)))))
(assert (= (x260 (x130 (_ bv64 256) x160 (_ bv60 256))) (_ bv60 256)))
(assert (= x56 (and (not x282) x102)))
(assert (= (x33 x214) (x33 (bvadd x214 (_ bv1 256)))))
(assert (= (_ bv69 256) (x260 (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256)))))
(assert (=> (bvuge (_ bv10000 256) x217) (= (_ bv0 256) (x33 x217))))
(assert (x176 (_ bv404098525 256)))
(assert (= x187 (x40 (x130 (_ bv64 256) x187 (_ bv61 256)))))
(assert (=> (bvuge (_ bv10000 256) x254) (= (x33 x254) (_ bv0 256))))
(assert (= (x33 (x130 (_ bv64 256) x12 (_ bv0 256))) (x130 (_ bv64 256) x12 (_ bv0 256))))
(assert (= (x33 x80) (x33 (bvadd (_ bv1 256) x80))))
(assert (= (x296 (x130 (_ bv64 256) x77 (_ bv0 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x33 (_ bv1289409798 256))))
(assert (= (_ bv60 256) (x260 (x130 (_ bv64 256) x116 (_ bv60 256)))))
(assert (=> (bvuge (_ bv10000 256) x160) (= (_ bv0 256) (x33 x160))))
(assert (= x219 (=> (and (and (= x187 x285) (and (= x173 x294) (and (= x145 x1) (= x228 (x130 (_ bv64 256) x187 (_ bv0 256))) (= (x43 x269) x7) (= x269 x65) (= (x281 x228) x250) (= x207 x187) (bvule x250 (_ bv20282409603651670423947251286015 256)) (= (x261 (_ bv128 256)) x220) (= (x57 x217) x229) (= x78 (bvugt x220 (_ bv0 256))) (bvule (_ bv1 256) x229) (= x7 x288) (= x145 (x82 x217)) (= (_ bv128 256) x234) (= (_ bv2378104546 256) x87)))) (and (bvule x193 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x18 (bvule (_ bv0 256) x294) (not (= x217 x10)) (bvuge (_ bv4294967295 256) x20) (bvule x65 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x185 x10)) (bvule (_ bv0 256) x193) (bvuge x157 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x217) (bvuge x10 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x164) (bvuge x65 (_ bv0 256)) (= x298 (_ bv0 256)) (bvule (_ bv0 256) x257) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x294) (bvule x185 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x2 (_ bv0 256)) (= (bvugt (x57 x10) (_ bv0 256)) x18) (= (_ bv36 256) x46) (not (= x185 x217)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x186) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x295) (bvule (_ bv0 256) x164) x152 (bvule x11 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x171 (bvult (_ bv0 256) (x57 x185))) (= (bvult (_ bv0 256) (x57 x217)) x152) (bvuge x20 (_ bv0 256)) (= x157 x285) x171 (bvule x196 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x295 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x10) (bvuge x186 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x2) (bvule (_ bv0 256) x196) (bvuge x11 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x157) (bvuge x217 (_ bv1 256)) (bvule x257 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x185 (_ bv1 256)))) (and (=> (and (and (and (= x224 (bvadd (_ bv64 256) x184)) (= x214 (x130 (_ bv64 256) x116 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x194) (= x75 (x45 x224)) (= x116 (bvand x27 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x194 (_ bv0 256)) (= x194 (_ bv0 256)) (= x75 (_ bv0 256))) x282) (= x188 (bvadd (_ bv1 256) x214)) (= x256 (x239 x214)) (bvuge (_ bv340282366920938463463374607431768211455 256) x256) (= x184 (x255 (_ bv160 256))) (= x180 (x81 x188)) (= x194 (x118 x214)) (= (x232 x221) x27) (= (x255 (_ bv160 256)) x221)) (or (and x282 (= x282 x74)) (and (not x282) (= x74 (= x173 x256))))) x78) x242) (=> (and (= x109 (_ bv0 256)) (not x78)) x85)))))
(assert (not (x176 (x130 (_ bv64 256) x160 (_ bv60 256)))))
(assert (= (x33 x188) (x33 (bvadd x188 (_ bv1 256)))))
(assert (not (x176 (x130 (_ bv64 256) x116 (_ bv60 256)))))
(assert (= x166 (or x197 x240)))
(assert (= (x33 (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256))) (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256))))
(assert (= x9 (=> (= (ite x262 x262 (not (bvugt x55 x70))) x111) (and (=> (and (= x22 x67) x111) x49) (=> (and (not x111) (and (= x32 (bvult x55 x258)) (or (and (not x32) (= x258 x51)) (and (= x55 x51) x32)))) x86)))))
(assert (= x77 (x40 (x130 (_ bv64 256) x77 (_ bv0 256)))))
(assert (= (and x259 x270) x197))
(assert (not (x176 (x130 (_ bv64 256) x77 (_ bv0 256)))))
(assert (= x84 (=> (and (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x66) (= (x253 x112) x96) (bvule (_ bv0 256) x66) (not (bvult x222 x168)) (= (x130 (_ bv64 256) x187 x89) x112) (= (x261 (_ bv128 256)) x265) (= x66 (bvmul x42 x168)) (= (not (bvugt x265 (_ bv1 256))) x236) (x92 x42 x168) (= (bvadd (bvneg x96) x222) x168) (= (x255 (_ bv160 256)) x94) (= (bvudiv x66 (_ bv1000000000000000000 256)) x139) (= x195 (bvadd (_ bv32 256) x94)) (= (x36 x195) x42) (= x89 (bvadd (_ bv1 256) x188))) (and x236 (=> (= x109 x139) x85)))))
(assert (x176 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (=> (bvule x77 (_ bv10000 256)) (= (x33 x77) (_ bv0 256))))
(assert (= (x33 (_ bv2378104546 256)) (_ bv0 256)))
(assert (bvult (_ bv10000 256) (x130 (_ bv64 256) x187 (_ bv61 256))))
(assert (= (_ bv0 256) (x33 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (not (x176 (x130 (_ bv64 256) x187 (_ bv0 256)))))
(assert (= x273 (=> (and (= x277 (x130 (_ bv64 256) x77 (_ bv61 256))) (= x175 x211) (= x211 (bvadd x106 x4)) (= (x150 x277) x106) (= x39 (bvule x202 x175)) (not (bvugt x106 (bvadd x4 x106)))) x39)))
(assert (bvult (_ bv10000 256) (x130 (_ bv64 256) x116 (_ bv60 256))))
(assert (bvult (_ bv10000 256) (x130 (_ bv64 256) x160 (_ bv60 256))))
(assert (not (x176 (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256)))))
(assert (=> (bvuge (_ bv10000 256) x10) (= (_ bv0 256) (x33 x10))))
(assert (= (x33 (x130 (_ bv64 256) x77 (_ bv61 256))) (x130 (_ bv64 256) x77 (_ bv61 256))))
(assert (= (_ bv0 256) (x260 (x130 (_ bv64 256) x12 (_ bv0 256)))))
(assert (= (x33 (x130 (_ bv64 256) x187 (_ bv61 256))) (x130 (_ bv64 256) x187 (_ bv61 256))))
(assert (x176 (_ bv4294967295 256)))
(assert (= (x40 (x130 (_ bv64 256) x187 x89)) x187))
(assert (=> (bvuge (_ bv10000 256) x128) (= (x33 x128) (_ bv0 256))))
(assert (= (x296 (x130 (_ bv64 256) x77 (_ bv61 256))) (_ bv64 256)))
(assert (x176 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= x49 (=> (and (= (x130 (_ bv64 256) x77 x264) x146) (= x151 (not (bvugt x90 (_ bv1 256)))) (not (bvult x22 x21)) (= (x156 (_ bv128 256)) x90) (= (bvadd (_ bv1 256) x80) x264) (= x205 (bvadd (_ bv32 256) x178)) (= (bvudiv x154 (_ bv1000000000000000000 256)) x279) (bvule x154 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x231 (x253 x146)) (= (x155 (_ bv160 256)) x178) (= (x99 x205) x134) (= (bvmul x21 x134) x154) (= x21 (bvadd (bvneg x231) x22)) (x92 x134 x21) (bvule (_ bv0 256) x154)) (and x151 (=> (= x279 x4) x273)))))
(assert (= x95 (or x138 x121)))
(assert (= (_ bv0 256) (x33 (_ bv2069565783 256))))
(assert (= (_ bv0 256) (x260 (x130 (_ bv64 256) x77 (_ bv0 256)))))
(assert (=> (bvule x185 (_ bv10000 256)) (= (x33 x185) (_ bv0 256))))
(assert (= (x296 (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256))) (_ bv64 256)))
(assert (= (x260 (x130 (_ bv64 256) x77 (_ bv61 256))) (_ bv61 256)))
(assert (x176 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x176 (_ bv1000000000000000000 256)))
(assert (= x116 (x40 (x130 (_ bv64 256) x116 (_ bv60 256)))))
(assert (= x210 (and x291 (not x115))))
(assert (bvult (_ bv10000 256) (x130 (_ bv64 256) x187 x89)))
(assert (not (x176 (x130 (_ bv64 256) x77 (_ bv61 256)))))
(assert (=> (bvuge (_ bv10000 256) x187) (= (x33 x187) (_ bv0 256))))
(assert (= (=> (and (= (bvadd (bvneg x70) x51) x98) (= x302 x100) (= x37 (bvudiv x68 x302)) (= x26 x22) (= x26 (bvadd x67 x69)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x100) (not (bvugt x98 x51)) (or x252 x64) (bvule (_ bv1 256) x125) (= (bvmul x280 x98) x100) (= x252 (= x302 (_ bv0 256))) (not (bvult (bvadd x67 x69) x69)) (bvule (_ bv0 256) x100) (x92 x280 x98) (= (bvudiv x68 x125) x69) (= (= x37 (_ bv1000000000000000000 256)) x64) (= x68 (bvmul (_ bv1000000000000000000 256) x302))) x49) x86))
(assert (x176 (_ bv1889567281 256)))
(assert (x176 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x33 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (x33 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (or x103 x200) x138))
(assert (= (x33 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (and x111 x148) x200))
(assert (= x77 (x40 (x130 (_ bv64 256) x77 (_ bv61 256)))))
(assert (= x242 (=> (= (ite x74 x74 (not (bvult x256 x55))) x223) (and (=> (and (not x223) (and (or (and (not x270) (= x173 x263)) (and x270 (= x55 x263))) (= x270 (bvugt x173 x55)))) x153) (=> (and x223 (= x222 x180)) x84)))))
(assert (= (x33 (_ bv404098525 256)) (_ bv0 256)))
(assert (= true x237))
(assert (= (x33 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (x40 (x130 (_ bv64 256) x187 (_ bv0 256))) x187))
(assert (bvugt (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256)) (_ bv10000 256)))
(assert (= (x296 (x130 (_ bv64 256) x187 x89)) (_ bv64 256)))
(assert (x176 (_ bv2069565783 256)))
(assert (x176 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (or x131 x166) x50))
(assert (bvugt (x130 (_ bv64 256) x187 (_ bv0 256)) (_ bv10000 256)))
(assert (not (x176 (x130 (_ bv64 256) x187 x89))))
(assert (= (x296 (x130 (_ bv64 256) x187 (_ bv61 256))) (_ bv64 256)))
(assert (= (_ bv1 256) (x40 (x130 (_ bv64 256) (_ bv1 256) (_ bv69 256)))))
(assert (= (and x115 x291) x182))
(assert (= (and x78 x237) x102))
(assert (x176 (_ bv1289409798 256)))
(assert (=> (bvuge (_ bv10000 256) x12) (= (x33 x12) (_ bv0 256))))
(assert (= (x260 (x130 (_ bv64 256) x77 x264)) x264))
(assert (=> (bvule x116 (_ bv10000 256)) (= (_ bv0 256) (x33 x116))))
(check-sat)
(exit)
