(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x31 () Bool)
(declare-fun x296 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x397 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x357 () Bool)
(declare-fun x342 () Bool)
(declare-fun x433 () (_ BitVec 256))
(declare-fun x441 () Bool)
(declare-fun x61 () Bool)
(declare-fun x376 () Bool)
(declare-fun x23 () Bool)
(declare-fun x91 () Bool)
(declare-fun x395 () Bool)
(declare-fun x303 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x85 () Bool)
(declare-fun x407 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x408 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x334 () (_ BitVec 256))
(declare-fun x428 () Bool)
(declare-fun x254 () (_ BitVec 256))
(declare-fun x279 () Bool)
(declare-fun x275 () Bool)
(declare-fun x363 () Bool)
(declare-fun x179 () Bool)
(declare-fun x454 () Bool)
(declare-fun x332 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x243 () Bool)
(declare-fun x285 () Bool)
(declare-fun x6 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x386 () (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x53 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x426 () (_ BitVec 256))
(declare-fun x396 () Bool)
(declare-fun x300 () Bool)
(declare-fun x398 () Bool)
(declare-fun x127 () Bool)
(declare-fun x108 () Bool)
(declare-fun x348 () Bool)
(declare-fun x258 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x390 () Bool)
(declare-fun x186 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x83 () Bool)
(declare-fun x336 () Bool)
(declare-fun x350 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x117 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x358 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x393 () Bool)
(declare-fun x301 () Bool)
(declare-fun x211 () Bool)
(declare-fun x35 () Bool)
(declare-fun x212 () Bool)
(declare-fun x322 () (_ BitVec 256))
(declare-fun x347 () Bool)
(declare-fun x323 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x9 () Bool)
(declare-fun x276 () Bool)
(declare-fun x206 () Bool)
(declare-fun x294 () Bool)
(declare-fun x157 () Bool)
(declare-fun x339 () Bool)
(declare-fun x364 () Bool)
(declare-fun x418 () Bool)
(declare-fun x356 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x394 () Bool)
(declare-fun x18 () Bool)
(declare-fun x142 () Bool)
(declare-fun x225 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x452 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x94 () Bool)
(declare-fun x262 () Bool)
(declare-fun x120 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x251 () Bool)
(declare-fun x14 () Bool)
(declare-fun x183 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x46 () Bool)
(declare-fun x47 () (_ BitVec 256))
(declare-fun x82 () Bool)
(declare-fun x218 () Bool)
(declare-fun x65 () Bool)
(declare-fun x100 () Bool)
(declare-fun x240 () Bool)
(declare-fun x430 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x410 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x381 () Bool)
(declare-fun x88 () Bool)
(declare-fun x380 () (_ BitVec 256))
(declare-fun x242 () Bool)
(declare-fun x208 () Bool)
(declare-fun x247 () Bool)
(declare-fun x420 () Bool)
(declare-fun x144 () Bool)
(declare-fun x369 () (_ BitVec 256))
(declare-fun x387 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x367 () Bool)
(declare-fun x302 () Bool)
(declare-fun x253 () Bool)
(declare-fun x92 () Bool)
(declare-fun x220 () Bool)
(declare-fun x204 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x29 () (_ BitVec 256))
(declare-fun x185 () Bool)
(declare-fun x26 () Bool)
(declare-fun x248 () Bool)
(declare-fun x305 () Bool)
(declare-fun x415 () Bool)
(declare-fun x76 () Bool)
(declare-fun x425 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x399 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x455 () (_ BitVec 256))
(declare-fun x241 ((_ BitVec 256)) Bool)
(declare-fun x315 () Bool)
(declare-fun x147 () Bool)
(declare-fun x62 () Bool)
(declare-fun x268 () Bool)
(declare-fun x368 () (_ BitVec 256))
(declare-fun x317 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x236 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x448 () Bool)
(declare-fun x260 () Bool)
(declare-fun x169 () Bool)
(declare-fun x412 () Bool)
(declare-fun x343 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x346 () (_ BitVec 256))
(declare-fun x421 () Bool)
(declare-fun x118 () Bool)
(declare-fun x427 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x354 () Bool)
(declare-fun x353 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x344 () (_ BitVec 256))
(declare-fun x313 () Bool)
(declare-fun x67 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x438 () Bool)
(declare-fun x298 () Bool)
(declare-fun x17 () Bool)
(declare-fun x182 () Bool)
(declare-fun x50 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x270 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x330 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x261 () Bool)
(declare-fun x319 () Bool)
(declare-fun x190 () Bool)
(declare-fun x318 () Bool)
(declare-fun x384 () Bool)
(declare-fun x160 () Bool)
(declare-fun x385 () (_ BitVec 256))
(declare-fun x56 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 () Bool)
(declare-fun x291 () Bool)
(declare-fun x138 () Bool)
(declare-fun x338 () Bool)
(declare-fun x282 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x321 () Bool)
(declare-fun x320 () Bool)
(declare-fun x401 () Bool)
(declare-fun x311 () (_ BitVec 256))
(declare-fun x379 () Bool)
(declare-fun x437 () (_ BitVec 256))
(declare-fun x199 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x116 () Bool)
(declare-fun x335 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x329 () Bool)
(declare-fun x146 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x442 () Bool)
(declare-fun x331 () Bool)
(declare-fun x403 () Bool)
(declare-fun x326 () Bool)
(declare-fun x219 () Bool)
(declare-fun x77 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x202 () Bool)
(declare-fun x197 () Bool)
(declare-fun x447 () (_ BitVec 256))
(declare-fun x333 () Bool)
(declare-fun x424 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x312 () Bool)
(declare-fun x416 () Bool)
(declare-fun x373 () Bool)
(declare-fun x20 () Bool)
(declare-fun x60 () Bool)
(declare-fun x392 () (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x173 () Bool)
(declare-fun x274 () Bool)
(declare-fun x124 () Bool)
(declare-fun x341 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x1 () Bool)
(declare-fun x196 () (_ BitVec 256))
(declare-fun x366 () Bool)
(declare-fun x411 () Bool)
(declare-fun x429 () (_ BitVec 256))
(declare-fun x371 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x49 () Bool)
(declare-fun x165 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x295 () Bool)
(declare-fun x290 () Bool)
(declare-fun x139 () Bool)
(declare-fun x11 () (_ BitVec 256))
(declare-fun x405 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x40 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x349 () (_ BitVec 256))
(declare-fun x422 () (_ BitVec 256))
(declare-fun x435 () Bool)
(declare-fun x375 () Bool)
(declare-fun x362 () (_ BitVec 256))
(declare-fun x161 () Bool)
(declare-fun x216 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x324 () Bool)
(declare-fun x383 () Bool)
(declare-fun x104 () Bool)
(declare-fun x436 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x12 () Bool)
(declare-fun x81 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x113 () (_ BitVec 256))
(declare-fun x413 () Bool)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x78 () Bool)
(declare-fun x43 () Bool)
(declare-fun x431 () Bool)
(declare-fun x255 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x252 () Bool)
(declare-fun x400 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x352 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x188 () Bool)
(declare-fun x105 () Bool)
(declare-fun x143 () Bool)
(declare-fun x414 () Bool)
(declare-fun x74 () Bool)
(declare-fun x38 () (_ BitVec 256))
(declare-fun x227 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x310 () Bool)
(declare-fun x351 () Bool)
(declare-fun x417 () Bool)
(declare-fun x289 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x444 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x249 () (_ BitVec 256))
(declare-fun x406 () Bool)
(declare-fun x293 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x377 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x345 () Bool)
(declare-fun x419 () Bool)
(declare-fun x221 () Bool)
(declare-fun x70 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x75 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x409 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x404 () (_ BitVec 256))
(declare-fun x89 () Bool)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x370 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x337 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x95 () Bool)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x340 () (_ BitVec 256))
(declare-fun x271 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x107 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x80 () Bool)
(declare-fun x359 () (_ BitVec 256))
(declare-fun x309 () Bool)
(declare-fun x136 () Bool)
(declare-fun x284 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x439 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x111 () Bool)
(declare-fun x128 () Bool)
(declare-fun x33 () Bool)
(declare-fun x355 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x327 () (_ BitVec 256))
(declare-fun x365 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x36 () Bool)
(declare-fun x7 () Bool)
(declare-fun x16 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x297 () Bool)
(declare-fun x205 () Bool)
(declare-fun x194 () Bool)
(declare-fun x192 () Bool)
(declare-fun x453 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x189 () Bool)
(declare-fun x155 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x446 () (_ BitVec 256))
(declare-fun x402 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x263 () Bool)
(declare-fun x423 () Bool)
(declare-fun x148 () Bool)
(declare-fun x177 () Bool)
(declare-fun x174 () Bool)
(declare-fun x99 () Bool)
(declare-fun x193 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x238 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x102 () Bool)
(declare-fun x382 () Bool)
(declare-fun x361 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x374 () Bool)
(declare-fun x162 () (_ BitVec 256))
(declare-fun x451 () Bool)
(declare-fun x316 () (_ BitVec 256))
(declare-fun x449 () Bool)
(declare-fun x440 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x328 () Bool)
(declare-fun x378 () Bool)
(declare-fun x269 () Bool)
(declare-fun x151 () Bool)
(declare-fun x432 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x257 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x391 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x207 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x450 () Bool)
(declare-fun x278 () (_ BitVec 256))
(define-fun x234 ((x230 (_ BitVec 256)) (x235 (_ BitVec 256))) Bool (= x230 (bvudiv (bvmul x235 x230) x235)))
(define-fun x172 ((x230 (_ BitVec 256)) (x235 (_ BitVec 256))) Bool (= x230 (bvsdiv (bvmul x230 x235) x235)))
(define-fun x445 ((x230 (_ BitVec 256)) (x235 (_ BitVec 256))) Bool (= x230 (bvsdiv (bvmul x235 x230) x235)))
(define-fun x360 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x434 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x86 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x456 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x299 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x114 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x306 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x264 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x308 ((x372 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x222 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x98) x237 (x399 x372)))
(define-fun x25 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x391) x437 (x107 x372)))
(define-fun x239 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x450 (x107 x372) (ite x261 (x107 x372) (ite x435 (x107 x372) (x25 x372)))))
(define-fun x176 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x410) x408 (x239 x372)))
(define-fun x64 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x83 (x239 x372) (ite x354 (x239 x372) (ite x111 (x239 x372) (x176 x372)))))
(define-fun x443 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x48 x372) x123 (x64 x372)))
(define-fun x69 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x169 (ite x88 (x64 x372) (x443 x372)) (x107 x372)))
(define-fun x129 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x391 x372) x54 (x407 x372)))
(define-fun x71 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x450 (x407 x372) (ite x261 (x407 x372) (ite x435 (x407 x372) (x129 x372)))))
(define-fun x233 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x391 x372) x350 (x257 x372)))
(define-fun x307 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x391) x349 (x233 x372)))
(define-fun x32 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x450 (x257 x372) (ite x261 (x257 x372) (ite x435 (x257 x372) (x307 x372)))))
(define-fun x4 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x391 x372) x133 (x356 x372)))
(define-fun x15 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x391) x28 (x4 x372)))
(define-fun x325 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x450 (x356 x372) (ite x261 (x356 x372) (ite x435 (x356 x372) (x15 x372)))))
(define-fun x388 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x410) x287 (x325 x372)))
(define-fun x224 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x410) x110 (x388 x372)))
(define-fun x201 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x83 (x325 x372) (ite x354 (x325 x372) (ite x111 (x325 x372) (x224 x372)))))
(define-fun x288 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x410 x372) x178 (x32 x372)))
(define-fun x45 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x410) x150 (x288 x372)))
(define-fun x389 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite x83 (x32 x372) (ite x354 (x32 x372) (ite x111 (x32 x372) (x45 x372)))))
(define-fun x228 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x372 x48) x335 (x201 x372)))
(define-fun x87 ((x372 (_ BitVec 256))) (_ BitVec 256) (ite (= x48 x372) x162 (x389 x372)))
(assert (= x303 (and x317 x104)))
(assert (= x88 (and x108 x336)))
(assert (= (or x139 x451) x52))
(assert (= x100 (=> (= x181 x180) x218)))
(assert (= (=> (and (bvuge (_ bv4722366482869645213695 256) x293) (= (x56 (_ bv64 256) x249 (_ bv0 256)) x48) (= (x64 x48) x123) (bvule x13 (_ bv4722366482869645213695 256)) (bvule x123 (_ bv20282409603651670423947251286015 256)) (= (x228 x48) x293) (= (x87 x48) x13)) x12) x442))
(assert (= (or x77 x132) x50))
(assert (= (x56 (_ bv64 256) x249 (_ bv66 256)) (x40 (x56 (_ bv64 256) x249 (_ bv66 256)))))
(assert (= (x56 (_ bv64 256) x37 (_ bv0 256)) (x40 (x56 (_ bv64 256) x37 (_ bv0 256)))))
(assert (= x175 (=> (and (= x66 (ite x199 (_ bv1 256) (_ bv0 256))) (= x426 (ite x84 (_ bv1 256) (_ bv0 256))) (= (= x84 x199) x108)) (and (=> (not x108) (and (=> (and (not x199) (= (= x137 (_ bv0 256)) x438)) (and (=> (and (= (= x272 (_ bv1 256)) x309) x438) (and (=> (and x309 (= (_ bv0 256) x149)) x394) (=> (and (not x309) (and (= (= x272 (_ bv3 256)) x247) (or (and (= x58 (_ bv2 256)) x247) (and (= x58 x272) (not x247))))) x313))) (=> (and (not x438) (= (= (_ bv2 256) x272) x454)) (and (=> (and (not x454) (and (= x192 (= (_ bv3 256) x272)) (or (and (= x68 x272) (not x192)) (and (= x68 (_ bv1 256)) x192)))) x116) (=> (and (= (_ bv0 256) x215) x454) x290))))) (=> (and (= (= x137 (_ bv0 256)) x347) x199) (and (=> (and (= (= (_ bv0 256) x272) x105) x347) (and (=> (and (not x105) (and (= x269 (= x272 (_ bv2 256))) (or (and (= x63 (_ bv3 256)) x269) (and (= x272 x63) (not x269))))) x252) (=> (and (= x117 (_ bv1 256)) x105) x141))) (=> (and (= (= x272 (_ bv0 256)) x253) (not x347)) (and (=> (and (= (_ bv2 256) x314) x253) x243) (=> (and (not x253) (and (or (and x266 (= x30 (_ bv3 256))) (and (= x30 x272) (not x266))) (= (= x272 (_ bv1 256)) x266))) x67))))))) (=> x108 x12)))))
(assert (= (x271 (x56 (_ bv64 256) x273 (_ bv0 256))) (_ bv64 256)))
(assert (= x142 (or x143 x73)))
(assert (= (_ bv64 256) (x271 (x56 (_ bv64 256) x6 (_ bv0 256)))))
(assert (= (or x364 x212) x74))
(assert (= x331 (=> (and (= x437 (x107 x391)) (bvuge (_ bv4722366482869645213695 256) x349) (bvuge (_ bv20282409603651670423947251286015 256) x437) (bvuge (_ bv4722366482869645213695 256) x28) (= (_ bv768 256) x122) (= (x233 x391) x349) (= x28 (x4 x391)) (= (x56 (_ bv64 256) x392 (_ bv0 256)) x391)) x94)))
(assert (= x395 (and x219 x403)))
(assert (= (_ bv0 256) (x40 (_ bv1889567281 256))))
(assert (= (or x202 x425) x279))
(assert (= x262 (and x199 x80)))
(assert (= (x284 (x56 (_ bv64 256) x249 (_ bv67 256))) x249))
(assert (= (x40 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (and (not x124) x371) x390))
(assert (= x427 (and x398 (not x253))))
(assert (= (and (not x199) x80) x216))
(assert (= x206 (=> (= x11 x121) x312)))
(assert (= (and x170 (not x295)) x402))
(assert (= (and (not x26) x292) x414))
(assert (= (_ bv0 256) (x40 (_ bv4294967295 256))))
(assert (= (_ bv0 256) (x53 (x56 (_ bv64 256) x273 (_ bv0 256)))))
(assert (= x132 (and x427 x266)))
(assert (= (and x375 x430) x111))
(assert (= x227 (and x339 x192)))
(assert (= x417 (and x190 (not x49))))
(assert (= x397 (and x207 (not x168))))
(assert (x241 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (or x208 x89) x194))
(assert (= (and x383 x84) x440))
(assert (=> (bvule x273 (_ bv10000 256)) (= (x40 x273) (_ bv0 256))))
(assert (= (and (not x305) x448) x92))
(assert (= x208 (or x412 x189)))
(assert (= (and x336 (not x108)) x80))
(assert (= (and x305 x448) x354))
(assert (not x118))
(assert (= x363 (and x207 x168)))
(assert (= (or x279 x401) x151))
(assert (= x166 (or x194 x147)))
(assert (= (and x199 x52) x255))
(assert (= x313 (=> (= x58 x149) x394)))
(assert (= x381 (=> (= x311 x282) x418)))
(assert (= x169 (or x88 x166)))
(assert (= x249 (x284 (x56 (_ bv64 256) x249 (_ bv0 256)))))
(assert (= x411 (and x51 (not x294))))
(assert (= (or x329 x74) x170))
(assert (=> (bvule x98 (_ bv10000 256)) (= (x40 x98) (_ bv0 256))))
(assert (= x22 (=> (and (= x295 (bvult (_ bv0 256) x214)) (= (bvadd x37 (bvneg x392)) x214)) (and (=> (and (and (= (not (= (_ bv0 256) x392)) x84) (= x199 (not (= (_ bv0 256) x37))) (bvule x131 (_ bv20282409603651670423947251286015 256)) (= (x107 x343) x131) (= (x56 (_ bv64 256) x249 (_ bv0 256)) x343)) x295) (and (=> (and (and (= x61 (= (_ bv0 256) x392)) (= (_ bv0 256) x167)) x84) (and (=> (and (not x61) (= (= (_ bv0 256) x131) x294)) (and (=> (and (= x122 (_ bv448 256)) x294) x94) (=> (and (not x294) (and (and (= (_ bv672 256) x444) (= x280 (bvudiv x131 (_ bv10000000000 256))) (bvule x93 (_ bv4722366482869645213695 256)) (= x433 (_ bv0 256)) (= x322 (_ bv0 256)) (= (x407 x184) x54) (= x330 (x356 x184)) (= (x107 x184) x109) (bvuge (_ bv4722366482869645213695 256) x330) (= x184 (x56 (_ bv64 256) x392 (_ bv0 256))) (bvule x109 (_ bv20282409603651670423947251286015 256)) (= (= (_ bv0 256) x137) x226) (bvuge (_ bv3 256) x54) (= (x257 x184) x93)) (or (and (and (= (bvand x277 (_ bv4722366482869645213695 256)) x334) (not (bvult x330 x280)) (= x277 (bvadd (bvneg x280) x330)) (= x334 x133) (= x350 x93)) (not x226)) (and x226 (and (= (bvadd (bvneg x280) x93) x191) (not (bvugt x280 x93)) (= x350 x101) (= (bvand x191 (_ bv4722366482869645213695 256)) x101) (= x133 x330)))))) x331))) (=> (and (= (_ bv448 256) x122) x61) x94))) (=> (and (not x84) (= x377 (_ bv448 256))) x179))) (=> (not x295) x416)))))
(assert (= x441 (=> (= x134 x121) x312)))
(assert (= x268 (=> (and (and (= (= x137 (_ bv0 256)) x403) (= x316 (ite (= x37 x249) (_ bv0 256) x37))) (or (not x403) x403)) x175)))
(assert (=> (bvule x392 (_ bv10000 256)) (= (_ bv0 256) (x40 x392))))
(assert (= x432 (and (not x104) x317)))
(assert (= (=> (= x368 x57) x345) x182))
(assert (= x190 true))
(assert (= (_ bv0 256) (x53 (x56 (_ bv64 256) x37 (_ bv0 256)))))
(assert (= x251 (=> (= x358 x311) x418)))
(assert (= x193 (and x52 (not x199))))
(assert (= (x40 (_ bv4722366482869645213695 256)) (_ bv0 256)))
(assert (= (x271 (x56 (_ bv64 256) x392 (_ bv0 256))) (_ bv64 256)))
(assert (= x165 (and x92 (not x400))))
(assert (= x248 (or x5 x227)))
(assert (= (or x174 x395) x336))
(assert (= x412 (and x62 x318)))
(assert (= x62 (and x193 x419)))
(assert (= x183 (and (not x309) x285)))
(assert (= (and x255 (not x286)) x374))
(assert (= (_ bv0 256) (x40 (_ bv3700653596 256))))
(assert (= x177 (or x142 x332)))
(assert (bvugt (x56 (_ bv64 256) x273 (_ bv0 256)) (_ bv10000 256)))
(assert (= (and (not x192) x339) x5))
(assert (= (and (not x454) x275) x339))
(assert (= x383 (and x170 x295)))
(assert (= x261 (and x51 x294)))
(assert (= (x40 (x56 (_ bv64 256) x6 (_ bv0 256))) (x56 (_ bv64 256) x6 (_ bv0 256))))
(assert (= x320 (or x102 x213)))
(assert (not (x241 (x56 (_ bv64 256) x249 (_ bv66 256)))))
(assert (= (_ bv0 256) (x53 (x56 (_ bv64 256) x6 (_ bv0 256)))))
(assert (= x67 (=> (= x30 x314) x243)))
(assert (= (and x440 (not x61)) x51))
(assert (= x292 (and x190 x49)))
(assert (= x140 (and x253 x398)))
(assert (=> (bvule x6 (_ bv10000 256)) (= (x40 x6) (_ bv0 256))))
(assert (= x141 (=> (= x117 x358) x251)))
(assert (= x158 (=> (= x55 x392) x22)))
(assert (= x367 (and x286 x255)))
(assert (= x398 (and (not x347) x262)))
(assert (= (or x165 x357) x431))
(assert (= x212 (and x321 x417)))
(assert (= (and (not x84) x383) x450))
(assert (= (_ bv0 256) (x40 (_ bv10000000000 256))))
(assert (= x102 (and x374 x366)))
(assert (= (=> (= x121 x344) x442) x312))
(assert (= (or x351 x14) x23))
(assert (=> (bvule x429 (_ bv10000 256)) (= (x40 x429) (_ bv0 256))))
(assert (= (and (not x269) x265) x143))
(assert (= x189 (or x432 x303)))
(assert (= x203 (or x393 x185)))
(assert (= (_ bv66 256) (x53 (x56 (_ bv64 256) x249 (_ bv66 256)))))
(assert (x241 (_ bv4294967295 256)))
(assert (= (and x417 (not x321)) x364))
(assert (= x120 x268))
(assert (= (_ bv0 256) (x53 (x56 (_ bv64 256) x249 (_ bv0 256)))))
(assert (= x73 (and x269 x265)))
(assert (= (and x411 (not x226)) x14))
(assert (= (=> (= x90 x11) x206) x60))
(assert (= (and x219 (not x403)) x174))
(assert (not (x241 (x56 (_ bv64 256) x37 (_ bv0 256)))))
(assert (= x118 (=> (and (and (and (bvuge (_ bv1 256) x137) (= x362 x244) (= x137 (x155 (_ bv36 256))) (= x6 x424) (bvule (_ bv68 256) x29) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x29) (= (x56 (_ bv64 256) x6 (_ bv0 256)) x404) (= x195 (x155 (_ bv4 256))) (= x362 (x107 x404)) (= x327 (_ bv1889567281 256)) (= (x75 x429) x238) (bvuge (_ bv20282409603651670423947251286015 256) x362) (= x365 x195) (bvule x195 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x238) (= x386 x6) (= x137 x38)) (and (and (bvule x335 (_ bv4722366482869645213695 256)) (= (x257 x198) x162) (= x112 x245) (= x98 x296) (= x49 (= x137 (_ bv0 256))) (= x237 (x399 x98)) (= (x407 x198) x272) (bvuge (_ bv4722366482869645213695 256) x162) (= x47 (_ bv3700653596 256)) (bvuge (_ bv3 256) x272) (= (x56 (_ bv64 256) x249 (_ bv0 256)) x198) (= x38 x217) (bvule (_ bv1 256) x126) (bvule x246 (_ bv20282409603651670423947251286015 256)) (= x126 (x75 x429)) (= x245 (x222 x429)) (= x335 (x356 x198)) (= x254 (_ bv352 256)) (= x246 (x107 x198)) (= (ite (= x249 x195) (_ bv0 256) x195) x37) (= x365 x369) (= x152 x237)) (= x249 x296))) (and (bvule x429 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x79 false) (= x125 (_ bv3700653596 256)) (= false x153) (= x18 false) (bvule x455 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x353 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x209 (_ bv0 256)) (= x145 (_ bv2 256)) (bvule (_ bv0 256) x355) (bvule (_ bv0 256) x409) (= (_ bv36 256) x42) (= x157 true) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x355) (bvule x446 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x353 (_ bv0 256)) (bvule x409 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x187) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x304) (bvule x256 (_ bv4294967295 256)) (bvuge x446 (_ bv0 256)) (= x200 x429) (bvuge x304 (_ bv0 256)) x263 (bvule (_ bv0 256) x296) (= (_ bv0 256) x323) (bvule (_ bv0 256) x21) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x21) (= (bvult (_ bv0 256) (x75 x429)) x263) (bvule x439 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x455 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x209) (bvule x296 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x439) (bvule (_ bv0 256) x187) (bvule (_ bv1 256) x429) (bvuge x256 (_ bv0 256)) (= x439 x386) (= false x41))) (and (=> (and (and (and (= (bvand x272 (_ bv1 256)) x258) (= x26 (= (_ bv0 256) x258))) (or (and x26 (= x97 (_ bv0 256))) (and (and (= x405 x97) (= (x56 (_ bv64 256) x249 (_ bv66 256)) x370) (= (x352 x370) x405) (bvule x405 (_ bv1461501637330902918203684832716283019655932542975 256))) (not x26)))) x49) x82) (=> (and (not x49) (and (= x321 (bvugt (_ bv2 256) x272)) (or (and (not x321) (and (bvule x204 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x55 x204) (= x2 (x56 (_ bv64 256) x249 (_ bv67 256))) (= (x16 x2) x204))) (and x321 (= (_ bv0 256) x55))))) x158)))))
(assert (= (_ bv0 256) (x40 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (not (x241 (x56 (_ bv64 256) x249 (_ bv67 256)))))
(assert (= (and x216 (not x438)) x275))
(assert (= x273 (x284 (x56 (_ bv64 256) x273 (_ bv0 256)))))
(assert (= (and x193 (not x419)) x371))
(assert (= (_ bv0 256) (x40 (_ bv20282409603651670423947251286015 256))))
(assert (= x392 (x284 (x56 (_ bv64 256) x392 (_ bv0 256)))))
(assert (= (x53 (x56 (_ bv64 256) x249 (_ bv67 256))) (_ bv67 256)))
(assert (= x428 (and x275 x454)))
(assert (x241 (_ bv4722366482869645213695 256)))
(assert (= x213 (or x397 x363)))
(assert (x241 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x284 (x56 (_ bv64 256) x37 (_ bv0 256))) x37))
(assert (= x202 (and x183 (not x247))))
(assert (= (or x91 x151) x451))
(assert (= (and x430 (not x375)) x448))
(assert (= (and x374 (not x366)) x207))
(assert (= x283 (=> (= x134 x380) x441)))
(assert (= (or x414 x128) x329))
(assert (= (and x319 (not x105)) x265))
(assert (= (and x371 x124) x148))
(assert (= x242 (or x449 x300)))
(assert (= x24 (or x203 x379)))
(assert (= x91 (or x248 x428)))
(assert (= x76 (=> (and (= (x239 x410) x408) (= (x288 x410) x150) (bvuge (_ bv20282409603651670423947251286015 256) x408) (bvuge (_ bv4722366482869645213695 256) x110) (bvuge (_ bv4722366482869645213695 256) x150) (= (x388 x410) x110) (= (x56 (_ bv64 256) x37 (_ bv0 256)) x410)) x120)))
(assert (= x223 (=> (= x281 x57) x182)))
(assert (= (and (=> (and (= x419 (= (_ bv0 256) x137)) (not x199)) (and (=> (and (not x419) (= (= (_ bv2 256) x311) x124)) (and (=> (and (not x124) (and (or (and (= x90 (_ bv1 256)) x85) (and (= x90 x311) (not x85))) (= (= (_ bv3 256) x311) x85))) x60) (=> (and x124 (= x11 (_ bv0 256))) x206))) (=> (and (= x318 (= (_ bv1 256) x311)) x419) (and (=> (and (not x318) (and (= (= (_ bv3 256) x311) x104) (or (and (= x311 x380) (not x104)) (and x104 (= x380 (_ bv2 256)))))) x283) (=> (and (= (_ bv0 256) x134) x318) x441))))) (=> (and x199 (= x286 (= x137 (_ bv0 256)))) (and (=> (and x286 (= (= x311 (_ bv0 256)) x78)) (and (=> (and (= x57 (_ bv1 256)) x78) x182) (=> (and (and (or (and (not x326) (= x281 x311)) (and (= x281 (_ bv3 256)) x326)) (= (= (_ bv2 256) x311) x326)) (not x78)) x223))) (=> (and (not x286) (= x366 (= (_ bv0 256) x311))) (and (=> (and (and (or (and (= x181 (_ bv3 256)) x168) (and (= x181 x311) (not x168))) (= (= (_ bv1 256) x311) x168)) (not x366)) x100) (=> (and (= (_ bv2 256) x180) x366) x218)))))) x418))
(assert (= (x40 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= (=> (= x68 x215) x290) x116))
(assert (= (or x431 x111 x354) x415))
(assert (= (and (not x266) x427) x77))
(assert (x241 (_ bv3700653596 256)))
(assert (= x219 (or x415 x83)))
(assert (not (x241 (x56 (_ bv64 256) x392 (_ bv0 256)))))
(assert (= (and (not x318) x62) x317))
(assert (= x220 (or x169 x402)))
(assert (= x416 x12))
(assert (= (x56 (_ bv64 256) x273 (_ bv0 256)) (x40 (x56 (_ bv64 256) x273 (_ bv0 256)))))
(assert (= (and x247 x183) x425))
(assert (= (and x367 x78) x379))
(assert (x241 (_ bv20282409603651670423947251286015 256)))
(assert (= (and x221 x326) x185))
(assert (= (x53 (x56 (_ bv64 256) x392 (_ bv0 256))) (_ bv0 256)))
(assert (= x435 (and x440 x61)))
(assert (= x128 (and x292 x26)))
(assert (bvugt (x56 (_ bv64 256) x249 (_ bv66 256)) (_ bv10000 256)))
(assert (= (and x319 x105) x332))
(assert (= x6 (x284 (x56 (_ bv64 256) x6 (_ bv0 256)))))
(assert (= (and x92 x400) x357))
(assert (not (x241 (x56 (_ bv64 256) x273 (_ bv0 256)))))
(assert (= (and x216 x438) x285))
(assert (= (_ bv64 256) (x271 (x56 (_ bv64 256) x249 (_ bv0 256)))))
(assert (= (and x347 x262) x319))
(assert (= (=> (and (and (= (_ bv1889567281 256) x196) (= (x69 x163) x447) (= x163 (x56 (_ bv64 256) x273 (_ bv0 256))) (= x436 x273) (= x447 x250) (bvule x447 (_ bv20282409603651670423947251286015 256)) (= x273 x422) (bvule (_ bv1 256) x359) (= x342 (= x250 x244)) (= (x75 x429) x359)) (and (= x439 x422) (= x96 (_ bv36 256)))) x342) x416))
(assert (= (and x309 x285) x401))
(assert (= (x40 (x56 (_ bv64 256) x249 (_ bv0 256))) (x56 (_ bv64 256) x249 (_ bv0 256))))
(assert (= (_ bv64 256) (x271 (x56 (_ bv64 256) x37 (_ bv0 256)))))
(assert (x241 (_ bv1889567281 256)))
(assert (= (and x199 x9) x430))
(assert (bvugt (x56 (_ bv64 256) x392 (_ bv0 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x56 (_ bv64 256) x249 (_ bv0 256))))
(assert (bvult (_ bv10000 256) (x56 (_ bv64 256) x37 (_ bv0 256))))
(assert (= (=> (= x180 x368) x345) x218))
(assert (= x449 (and (not x85) x390)))
(assert (= x252 (=> (= x117 x63) x141)))
(assert (= x345 (=> (= x344 x368) x442)))
(assert (bvugt (x56 (_ bv64 256) x249 (_ bv67 256)) (_ bv10000 256)))
(assert (= x147 (or x320 x24)))
(assert (x241 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x271 (x56 (_ bv64 256) x249 (_ bv66 256))) (_ bv64 256)))
(assert (bvugt (x56 (_ bv64 256) x6 (_ bv0 256)) (_ bv10000 256)))
(assert (=> (bvule x37 (_ bv10000 256)) (= (x40 x37) (_ bv0 256))))
(assert (= x139 (or x177 x361)))
(assert (= (x56 (_ bv64 256) x392 (_ bv0 256)) (x40 (x56 (_ bv64 256) x392 (_ bv0 256)))))
(assert (=> (bvule x249 (_ bv10000 256)) (= (_ bv0 256) (x40 x249))))
(assert (not (x241 (x56 (_ bv64 256) x249 (_ bv0 256)))))
(assert (= x393 (and (not x326) x221)))
(assert (= (and x390 x85) x300))
(assert (= (=> (= x215 x282) x381) x290))
(assert (= (or x450 x274) x9))
(assert (= x82 (=> (= x97 x392) x22)))
(assert (= x274 (or x435 x23 x261)))
(assert (= (=> (= x149 x282) x381) x394))
(assert (= x243 (=> (= x314 x358) x251)))
(assert (= (or x140 x50) x361))
(assert (= (=> (= x122 x377) x179) x94))
(assert (= (x271 (x56 (_ bv64 256) x249 (_ bv67 256))) (_ bv64 256)))
(assert (not (x241 (x56 (_ bv64 256) x6 (_ bv0 256)))))
(assert (= (and (not x78) x367) x221))
(assert (= (x284 (x56 (_ bv64 256) x249 (_ bv66 256))) x249))
(assert (= x351 (and x411 x226)))
(assert (= (x40 (x56 (_ bv64 256) x249 (_ bv67 256))) (x56 (_ bv64 256) x249 (_ bv67 256))))
(assert (= (and (not x199) x9) x83))
(assert (= (or x242 x148) x89))
(assert (x241 (_ bv10000000000 256)))
(assert (= x179 (and (=> (and x199 (and (= x229 (_ bv0 256)) (= (= (_ bv0 256) x37) x375))) (and (=> (and (not x375) (and (= (= (_ bv0 256) x113) x305) (= x113 (bvadd (bvneg x131) (_ bv0 256))))) (and (=> x305 x120) (=> (and (and (and (= x232 (x325 x19)) (= (x32 x19) x119) (= x289 (x71 x19)) (= x267 (_ bv0 256)) (bvuge (_ bv3 256) x289) (bvuge (_ bv20282409603651670423947251286015 256) x135) (= x19 (x56 (_ bv64 256) x37 (_ bv0 256))) (= (bvadd x210 (_ bv128 256)) x340) (bvule x119 (_ bv4722366482869645213695 256)) (= x400 (= x137 (_ bv0 256))) (= x278 (_ bv0 256)) (= x210 (bvadd (_ bv96 256) x377)) (= x385 (bvudiv x131 (_ bv10000000000 256))) (= (x239 x19) x135) (bvule x232 (_ bv4722366482869645213695 256))) (or (and (not x400) (and (= (bvadd x385 x232) x70) (bvuge (_ bv4722366482869645213695 256) x70) (= x119 x178) (bvule (_ bv0 256) x70) (= x70 x287))) (and (and (= x171 (bvadd x385 x119)) (= x287 x232) (bvule (_ bv0 256) x171) (= x171 x178) (bvuge (_ bv4722366482869645213695 256) x171)) x400))) (not x305)) x76))) (=> x375 x120))) (=> (not x199) x268))))
(check-sat)
(exit)
