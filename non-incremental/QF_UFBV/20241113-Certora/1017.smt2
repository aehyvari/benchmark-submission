(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x220 () Bool)
(declare-fun x63 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x34 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x210 () Bool)
(declare-fun x23 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x9 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x32 () Bool)
(declare-fun x275 () Bool)
(declare-fun x238 () Bool)
(declare-fun x147 () Bool)
(declare-fun x249 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x121 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x138 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x186 () Bool)
(declare-fun x157 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x258 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x244 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x202 () (_ BitVec 256))
(declare-fun x243 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x163 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x250 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x82 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x294 () Bool)
(declare-fun x137 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x70 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x235 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x22 () (_ BitVec 256))
(declare-fun x231 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x17 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x36 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x129 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x283 () Bool)
(declare-fun x83 () Bool)
(declare-fun x18 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x108 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x176 () Bool)
(declare-fun x111 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x195 () (_ BitVec 256))
(declare-fun x291 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x248 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x58 () (_ BitVec 256))
(declare-fun x218 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x165 () (_ BitVec 256))
(declare-fun x96 () Bool)
(declare-fun x73 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x10 () Bool)
(declare-fun x194 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x209 () Bool)
(declare-fun x272 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x45 () Bool)
(declare-fun x252 () Bool)
(declare-fun x274 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x101 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x254 () Bool)
(declare-fun x264 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x293 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x289 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x100 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x207 () Bool)
(declare-fun x116 () Bool)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x239 () Bool)
(declare-fun x287 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x3 () Bool)
(declare-fun x75 () Bool)
(declare-fun x126 () Bool)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x142 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x92 () Bool)
(declare-fun x68 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x189 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x97 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x288 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x247 () (_ BitVec 256))
(declare-fun x26 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x192 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x230 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x122 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x4 () Bool)
(declare-fun x150 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x267 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x225 () Bool)
(declare-fun x282 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x290 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x276 () (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x201 () Bool)
(declare-fun x174 () Bool)
(declare-fun x271 () Bool)
(declare-fun x120 ((_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x57 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x175 () Bool)
(declare-fun x241 () (_ BitVec 256))
(declare-fun x62 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x21 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x76 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x178 ((_ BitVec 256)) Bool)
(declare-fun x72 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x153 () Bool)
(declare-fun x93 () Bool)
(define-fun x234 ((x46 (_ BitVec 256)) (x136 (_ BitVec 256))) Bool (= x46 (bvudiv (bvmul x136 x46) x136)))
(define-fun x200 ((x46 (_ BitVec 256)) (x136 (_ BitVec 256))) Bool (= x46 (bvsdiv (bvmul x46 x136) x136)))
(define-fun x198 ((x46 (_ BitVec 256)) (x136 (_ BitVec 256))) Bool (= x46 (bvsdiv (bvmul x136 x46) x136)))
(define-fun x281 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x237 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x144 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x115 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x133 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x266 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x261 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x47 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x148 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x181 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x213 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x253 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x85 ((x260 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x20 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= x260 x73) x277 (x17 x260)))
(define-fun x257 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= x260 (_ bv512 256)) (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) (x133 x260)))
(define-fun x286 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= x260 (_ bv516 256)) x108 (x257 x260)))
(define-fun x185 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= x260 (_ bv512 256)) x90 (x286 x260)))
(define-fun x279 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= x260 (_ bv512 256)) (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256) (x185 x260)))
(define-fun x168 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv516 256) x260) x165 (x279 x260)))
(define-fun x54 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= x260 (_ bv548 256)) x44 (x168 x260)))
(define-fun x151 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv580 256) x260) x113 (x54 x260)))
(define-fun x5 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x260 (_ bv544 256)) (bvule (_ bv512 256) x260)) (x258 (bvadd x260 (bvneg (_ bv512 256)))) (x151 x260)))
(define-fun x228 ((x260 (_ BitVec 256))) (_ BitVec 256) (ite x201 (x5 x260) (x151 x260)))
(define-fun x67 ((x107 (_ BitVec 256))) Bool (or (= (bvadd (_ bv1 256) x107) (x129 (x111 x107))) (not (and (bvult x107 x135) (bvule (_ bv0 256) x107))) (not (and (bvuge x107 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x107)))))
(define-fun x270 ((x232 (_ BitVec 256))) Bool (or (and (bvule (x129 x232) x135) (and (= x232 (x111 (bvadd (x129 x232) (bvneg (_ bv1 256))))) (bvule (_ bv1 256) (x129 x232)))) (= (_ bv0 256) (x129 x232)) (not (and (bvule (_ bv0 256) x232) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x232)))))
(define-fun x219 ((x291 (_ BitVec 256)) (x18 (_ BitVec 256))) Bool (or (or (not (and (bvuge x18 (_ bv0 256)) (bvule x18 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (= (x157 x291 (x120 x291 x18)) (bvadd (_ bv1 256) x18)) (not (and (bvuge x18 (_ bv0 256)) (bvult x18 (x122 x291))))) (not (and (bvule (_ bv0 256) x291) (bvule x291 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x221 ((x227 (_ BitVec 256)) (x149 (_ BitVec 256))) Bool (or (not (and (bvuge x227 (_ bv0 256)) (bvule x227 (_ bv1461501637330902918203684832716283019655932542975 256)))) (or (= (x157 x227 x149) (_ bv0 256)) (and (bvule (x157 x227 x149) (x122 x227)) (and (= x149 (x120 x227 (bvadd (bvneg (_ bv1 256)) (x157 x227 x149)))) (bvule (_ bv1 256) (x157 x227 x149)))) (not (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x149) (bvule (_ bv0 256) x149))))))
(define-fun x98 ((x259 (_ BitVec 256)) (x163 (_ BitVec 256))) Bool (or (or (not (and (bvule (_ bv0 256) x163) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x163))) (not (and (bvuge x163 (_ bv0 256)) (bvugt (x138 x259) x163))) (= (bvadd x163 (_ bv1 256)) (x36 x259 (x231 x259 x163)))) (not (and (bvule x259 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x259)))))
(define-fun x15 ((x50 (_ BitVec 256)) (x290 (_ BitVec 256))) Bool (or (or (= (_ bv0 256) (x36 x50 x290)) (not (and (bvule x290 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x290 (_ bv0 256)))) (and (and (= x290 (x231 x50 (bvadd (bvneg (_ bv1 256)) (x36 x50 x290)))) (bvuge (x36 x50 x290) (_ bv1 256))) (bvule (x36 x50 x290) (x138 x50)))) (not (and (bvuge x50 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x50)))))
(define-fun x33 ((x43 (_ BitVec 256)) (x71 (_ BitVec 256))) Bool (or (or (not (= (_ bv0 256) (x129 x71))) (not (and (bvuge x71 (_ bv0 256)) (bvule x71 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) (not (or (not (= (_ bv0 256) (x36 x43 x71))) (not (= (x157 x43 x71) (_ bv0 256)))))) (not (and (bvule (_ bv0 256) x43) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x43)))))
(define-fun x246 ((x272 (_ BitVec 256))) Bool (or (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x272) (bvule (_ bv0 256) x272))) (bvult (x122 x272) (_ bv340282366920938463463374607431768211455 256))))
(define-fun x53 ((x256 (_ BitVec 256))) Bool (or (bvugt (_ bv340282366920938463463374607431768211455 256) (x138 x256)) (not (and (bvule (_ bv0 256) x256) (bvule x256 (_ bv1461501637330902918203684832716283019655932542975 256))))))
(define-fun x27 () Bool (x67 (bvadd (x129 x95) (bvneg (_ bv1 256)))))
(define-fun x215 () Bool x27)
(define-fun x78 () Bool (x270 x95))
(define-fun x52 () Bool x78)
(define-fun x251 () Bool (x219 x19 (bvadd (bvneg (_ bv1 256)) (x157 x19 x95))))
(define-fun x191 () Bool x251)
(define-fun x51 () Bool (x221 x19 x95))
(define-fun x223 () Bool x51)
(define-fun x14 () Bool (x98 x19 (bvadd (x36 x19 x95) (bvneg (_ bv1 256)))))
(define-fun x125 () Bool x14)
(define-fun x197 () Bool (x15 x19 x95))
(define-fun x55 () Bool x197)
(define-fun x206 () Bool (x33 x19 x95))
(define-fun x245 () Bool (x33 x19 x95))
(define-fun x159 () Bool (and x206 x245))
(define-fun x188 () Bool (x246 x19))
(define-fun x269 () Bool x188)
(define-fun x59 () Bool (x53 x19))
(define-fun x30 () Bool x59)
(assert (= (=> (= (or (or (not (and (bvule (_ bv0 256) x95) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x95))) (not (or (not (= (_ bv0 256) (x36 x19 x95))) (not (= (_ bv0 256) (x157 x19 x95))))) (not (= (_ bv0 256) (x129 x95)))) (not (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x19) (bvuge x19 (_ bv0 256))))) x83) x83) x114))
(assert (x178 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x119 (and x235 (not x126))))
(assert (= (and x239 x60) x70))
(assert (bvugt (_ bv340282366920938463463374607431768211455 256) x135))
(assert (= (x26 (x218 (_ bv64 256) x108 (_ bv103 256))) (_ bv103 256)))
(assert (= (_ bv0 256) (x142 (_ bv1889567281 256))))
(assert (x178 (_ bv1000000000000000 256)))
(assert (= x205 (or x61 x38)))
(assert (bvugt (x218 (_ bv64 256) x108 (_ bv103 256)) (_ bv10000 256)))
(assert (= (and x106 (not x187)) x102))
(assert (=> (bvule x1 (_ bv10000 256)) (= (_ bv0 256) (x142 x1))))
(assert (x178 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (and x235 x126) x201))
(assert (= (and x254 (not x118)) x252))
(assert (= (x142 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (x101 (x218 (_ bv64 256) x41 (_ bv169 256))) x41))
(assert (=> (bvule x41 (_ bv10000 256)) (= (x142 x41) (_ bv0 256))))
(assert (= x254 (or x201 x119)))
(assert (= (and (not x91) x10) x61))
(assert (= x38 (and x91 x10)))
(assert (= (x142 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (=> (bvuge (_ bv10000 256) x123) (= (_ bv0 256) (x142 x123))))
(assert (=> (bvule x172 (_ bv10000 256)) (= (x142 x172) (_ bv0 256))))
(assert (=> (bvule x242 (_ bv10000 256)) (= (_ bv0 256) (x142 x242))))
(assert (= (x26 (x218 (_ bv64 256) x41 (_ bv169 256))) (_ bv169 256)))
(assert (not (x178 (x218 (_ bv64 256) x41 (_ bv169 256)))))
(assert (= (x101 (x218 (_ bv64 256) x108 (_ bv103 256))) x108))
(assert (x178 (_ bv1000000000000000000 256)))
(assert (=> (bvule x177 (_ bv10000 256)) (= (_ bv0 256) (x142 x177))))
(assert (x178 (_ bv4294967295 256)))
(assert (not (x178 (x218 (_ bv64 256) x108 (_ bv103 256)))))
(assert (= (_ bv0 256) (x142 (_ bv340282366920938463463374607431768211455 256))))
(assert (=> (bvuge (_ bv10000 256) x108) (= (x142 x108) (_ bv0 256))))
(assert (= x16 (and (not x239) x60)))
(assert (= x174 true))
(assert x30)
(assert (= (_ bv0 256) (x142 (_ bv398450620 256))))
(assert (= x263 (and x68 x205)))
(assert (x178 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)))
(assert (= x106 (or x9 x263)))
(assert (= (_ bv64 256) (x121 (x218 (_ bv64 256) x41 (_ bv169 256)))))
(assert (= (x142 (x218 (_ bv64 256) x41 (_ bv169 256))) (x218 (_ bv64 256) x41 (_ bv169 256))))
(assert (= x60 (or x230 x275)))
(assert (= (_ bv0 256) (x142 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (=> (bvuge (_ bv10000 256) x87) (= (_ bv0 256) (x142 x87))))
(assert (= (=> (and (or (and (and (= (bvadd x171 (_ bv1 256)) x184) (= x116 (= x211 (_ bv0 256))) (= (x274 x184) x211)) (not x239)) (and x239 (= x116 x239))) (and (= (= x141 (_ bv0 256)) x239) (= (x267 x171) x141) (= x171 (x218 (_ bv64 256) x41 (_ bv169 256))))) x294) x212))
(assert (=> (bvuge (_ bv10000 256) x280) (= (_ bv0 256) (x142 x280))))
(assert (= (x142 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= x275 (or x102 x76)))
(assert (= (_ bv0 256) (x142 (_ bv4294967295 256))))
(assert (= x192 (or x16 x70)))
(assert (= (or x105 x210) x282))
(assert (x178 (_ bv340282366920938463463374607431768211455 256)))
(assert (bvult (_ bv10000 256) (x218 (_ bv64 256) x41 (_ bv169 256))))
(assert (= x105 (or x93 x79)))
(assert (= (and x192 x116) x210))
(assert (=> (bvule x73 (_ bv10000 256)) (= (_ bv0 256) (x142 x73))))
(assert (= x204 (and (not x116) x192)))
(assert (x178 (_ bv398450620 256)))
(assert (= (x218 (_ bv64 256) x108 (_ bv103 256)) (x142 (x218 (_ bv64 256) x108 (_ bv103 256)))))
(assert (= (=> (and (and (= (x228 (_ bv512 256)) x180) (= x233 (_ bv512 256)) (= x118 (= (_ bv0 256) x180)) (= (bvadd (bvneg x80) x173) x94) (bvuge x289 (_ bv1 256)) (bvule x180 (_ bv1000000000000000 256)) (not (bvugt x80 x173))) (or (and x118 (= (_ bv0 256) x31)) (and (and (= x31 x104) (= x104 (bvmul x94 x180)) (x234 x180 x94)) (not x118)))) x147) x96))
(assert (= x127 (=> (and (or (and (= (_ bv0 256) x84) x68) (and (and (= x84 x82) (= (bvmul x40 x183) x82) (x234 x40 x183)) (not x68))) (and (not (bvult (bvadd x44 x183) x183)) (= (_ bv576 256) x77) (= x68 (= x40 (_ bv0 256))) (= (bvudiv x167 (_ bv1000000000000000000 256)) x183) (= (bvadd x183 x44) x193) (= (_ bv1000000000000000000 256) x29))) x75)))
(assert (= (and x174 x3) x230))
(assert (= (x121 (x218 (_ bv64 256) x108 (_ bv103 256))) (_ bv64 256)))
(assert (= x235 (and (not x3) x174)))
(assert (= x294 (and (=> (and (and (and (bvule (_ bv1 256) x146) (= x268 (bvadd x171 (_ bv1 256))) (= x69 (= x143 (_ bv0 256))) (= (x267 x171) x143) (= (x274 x268) x146)) (or (and x69 (= (_ bv0 256) x169)) (and (and (= (bvmul x217 x143) x12) (= x169 x12) (x234 x143 x217)) (not x69)))) (not x116)) x209) (=> (and (= x295 (_ bv0 256)) x116) x114))))
(assert (= (=> (and (and (= (_ bv1000000000000000000 256) x179) (= x66 (bvadd x278 x113)) (= x278 (bvudiv x84 (_ bv1000000000000000000 256))) (= (= x31 (_ bv0 256)) x187) (not (bvult (bvadd x278 x113) x278)) (= x208 (_ bv640 256))) (or (and (= x293 (_ bv0 256)) x187) (and (and (= x293 x182) (x234 x31 x156) (= (bvmul x31 x156) x182)) (not x187)))) x264) x75))
(assert (= (and (not x68) x205) x9))
(assert (not x8))
(assert (x178 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256)))
(assert (= (=> (and (= x292 x217) (= (bvudiv x293 (_ bv1000000000000000000 256)) x88) (= x22 (_ bv704 256)) (= x292 (bvadd x156 x88)) (= (_ bv768 256) x124) (not (bvult (bvadd x88 x156) x88)) (= x109 (bvadd x88 x156))) x212) x264))
(assert (= x76 (and x187 x106)))
(assert (= (=> (and (= (_ bv1 256) x240) (= x236 (bvadd x146 (bvneg (_ bv1 256)))) (= (bvadd x169 x236) x145) (= (bvudiv x145 x146) x162) (not (bvugt x169 (bvadd x169 x236))) (= x162 x295) (= (bvadd x124 (_ bv64 256)) x158)) x114) x209))
(assert (= (and (not x69) x204) x93))
(assert (= x147 (=> (and (or (and (= (_ bv0 256) x167) x91) (and (and (x234 x31 x44) (= x202 x167) (= (bvmul x31 x44) x202)) (not x91))) (and (= x91 (= x31 (_ bv0 256))) (= (_ bv1000000000000000000 256) x97))) x127)))
(assert x269)
(assert (= (or x252 x32) x10))
(assert (= (and x204 x69) x79))
(assert (= (x142 x171) (x142 (bvadd x171 (_ bv1 256)))))
(assert (= (and x254 x118) x32))
(assert (= x8 (=> (and (and (= x196 x173) (and (= x277 (x17 x73)) (= x73 x155) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x42) x41) (not (= x65 (_ bv2 256))) (= (x20 x108) x229) (bvule (_ bv1 256) x152) (= x265 x229) (= x214 (_ bv398450620 256)) (= x48 x277) (= x3 (= x80 x173)) (= (x137 x108) x152))) (and (not (= x177 x1)) (bvule x172 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x177 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x177 x172)) (not (= x108 x1)) (bvuge x28 (_ bv0 256)) (not (= x172 x280)) (not (= x248 x13)) (bvule x13 (_ bv1461501637330902918203684832716283019655932542975 256)) x128 (not (= x1 x13)) (bvule x34 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x25 (_ bv0 256)) (bvuge x87 (_ bv1 256)) (not (= x280 x248)) (bvuge x172 (_ bv1 256)) (not (= x108 x87)) x285 (not (= x87 x172)) (bvule (_ bv1 256) x49) (bvule (_ bv0 256) x155) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x100) (not (= x13 x108)) (bvule (_ bv1 256) x242) (= x159 x207) (= x225 x215) (bvuge x64 (_ bv1 256)) (bvule (_ bv0 256) x112) (not (= x1 x172)) (= (x57 (_ bv4 256)) x42) (= x283 (bvugt (x137 x87) (_ bv0 256))) (not (= x177 x248)) (bvule (_ bv1 256) x100) (not (= x242 x1)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x1) (= x45 x223) (bvule (_ bv1 256) x177) (bvule (_ bv0 256) x241) (= x222 (bvult (_ bv0 256) (x137 x248))) (bvule x226 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x13 (_ bv1 256)) (bvuge x248 (_ bv1 256)) (bvuge x280 (_ bv1 256)) x132 (bvuge x247 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x87) (not (= x172 x248)) (bvule x276 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x139 (_ bv1461501637330902918203684832716283019655932542975 256)) x7 x207 (not (= x87 x177)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x49) (bvule x108 (_ bv1461501637330902918203684832716283019655932542975 256)) x4 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x131) (bvuge x139 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x241) (= x125 x4) (not (= x242 x248)) (not (= x280 x13)) (not (= x108 x248)) (not (= x242 x177)) (not (= x280 x1)) (bvule (_ bv1 256) x1) (not (= x108 x177)) x249 x45 (= x216 (bvult (_ bv0 256) (x137 x1))) (= (bvult (_ bv0 256) (x137 x172)) x7) x225 (= x191 x140) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x280) x283 x238 (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x6) (not (= x13 x87)) (bvule x64 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv1 256) x108) (= x249 (bvult (_ bv0 256) (x137 x177))) (bvule (_ bv0 256) x74) (not (= x13 x177)) (= x132 x55) (bvule x242 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x172 x242)) (= x238 (bvugt (x137 x242) (_ bv0 256))) (not (= x248 x1)) (bvule (_ bv0 256) x276) (not (= x172 x13)) (= x52 x285) (not (= x248 x87)) (bvuge x150 (_ bv0 256)) (bvule x247 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x131 x1) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x155) (not (= x172 x108)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x150) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x28) (= x42 x194) (not (= x242 x13)) (bvuge x196 (_ bv0 256)) (= x176 (bvugt (x137 x108) (_ bv0 256))) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x74) (= x172 x64) (not (= x108 x242)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x248) (bvuge x131 (_ bv1 256)) (bvuge (_ bv4294967295 256) x112) x11 (= x100 x172) (= x49 x87) x176 x216 (= x11 (bvult (_ bv0 256) (x137 x280))) (= x128 (bvult (_ bv0 256) (x137 x13))) x140 (bvule (_ bv0 256) x226) (not (= x177 x280)) (not (= x280 x108)) (not (= x280 x87)) (bvule (_ bv36 256) x6) (= x13 x139) (not (= x242 x87)) (not (= x242 x280)) (bvuge x34 (_ bv0 256)) (not (= x87 x1)) x222 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x196))) (and (=> (and x3 (and (= x217 x156) (= (_ bv128 256) x124))) x212) (=> (and (and (or (and x126 (and (bvuge x287 (_ bv32 256)) (= (_ bv1 256) x289) (bvule x287 (_ bv4294967295 256)))) (and (= x72 x289) (not x126))) (and (= (x185 (_ bv512 256)) x165) (= x86 (_ bv512 256)) (bvuge x287 (_ bv32 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x123) (= x199 (x218 (_ bv64 256) x108 (_ bv103 256))) (= (bvult (_ bv0 256) x72) x126) (bvule (_ bv1 256) x154) (= x35 (_ bv512 256)) (= x108 x166) (bvule x166 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x250 (x137 x123)) (= (x62 x199) x90) (= x108 x99) (bvuge x250 (_ bv1 256)) (= x154 (x137 x166)) (bvuge x166 (_ bv1 256)) (= x161 x99) (= x134 (_ bv36 256)) (bvuge x273 (_ bv1 256)) (= (x137 x108) x273) (= x23 (_ bv1889567281 256)) (= (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256) x189))) (not x3)) x96)))))
(assert (x178 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (_ bv0 256) (x142 (_ bv9926590759366731133184464140911154174177107315504433282334229972011911741440 256))))
(assert (=> (bvuge (_ bv10000 256) x13) (= (x142 x13) (_ bv0 256))))
(assert (= (x142 (_ bv1000000000000000 256)) (_ bv0 256)))
(assert (x178 (_ bv1889567281 256)))
(assert (=> (bvule x166 (_ bv10000 256)) (= (x142 x166) (_ bv0 256))))
(assert (= (x142 (_ bv50942633119752846454219349998365661925608737367104304655302372697894809501696 256)) (_ bv0 256)))
(assert (=> (bvule x248 (_ bv10000 256)) (= (_ bv0 256) (x142 x248))))
(check-sat)
(exit)
