(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x198 () Bool)
(declare-fun x187 () (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x300 () Bool)
(declare-fun x246 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x207 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x68 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x122 () (_ BitVec 256))
(declare-fun x106 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x263 () Bool)
(declare-fun x93 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x256 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x176 () Bool)
(declare-fun x36 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x231 () Bool)
(declare-fun x128 () Bool)
(declare-fun x270 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x278 () Bool)
(declare-fun x90 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x234 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x204 () Bool)
(declare-fun x243 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x52 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x3 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x113 () Bool)
(declare-fun x86 () Bool)
(declare-fun x211 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x91 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x274 ((_ BitVec 256)) Bool)
(declare-fun x12 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x138 () (_ BitVec 256))
(declare-fun x248 () Bool)
(declare-fun x258 () Bool)
(declare-fun x65 () Bool)
(declare-fun x30 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x104 () (_ BitVec 256))
(declare-fun x254 () Bool)
(declare-fun x47 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x175 () Bool)
(declare-fun x214 () Bool)
(declare-fun x70 () Bool)
(declare-fun x154 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x290 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x17 () Bool)
(declare-fun x192 () (_ BitVec 256))
(declare-fun x193 () Bool)
(declare-fun x153 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x265 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x296 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x205 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x237 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x79 () Bool)
(declare-fun x77 () (_ BitVec 256))
(declare-fun x155 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x117 () Bool)
(declare-fun x277 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x216 () (_ BitVec 256))
(declare-fun x7 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x255 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x303 () (_ BitVec 256))
(declare-fun x83 () (_ BitVec 256))
(declare-fun x298 () Bool)
(declare-fun x250 () Bool)
(declare-fun x273 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x179 () (_ BitVec 256))
(declare-fun x297 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x226 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x98 () Bool)
(declare-fun x181 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x272 () Bool)
(declare-fun x71 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x97 () Bool)
(declare-fun x39 () (_ BitVec 256))
(declare-fun x230 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x280 () Bool)
(declare-fun x196 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x228 () (_ BitVec 256))
(declare-fun x148 () Bool)
(declare-fun x130 () (_ BitVec 256))
(declare-fun x219 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x249 () (_ BitVec 256))
(declare-fun x119 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x20 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x292 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x223 () (_ BitVec 256))
(declare-fun x247 () Bool)
(declare-fun x229 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x162 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x245 () Bool)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x21 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x271 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x66 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x275 () Bool)
(declare-fun x285 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x72 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x118 () Bool)
(declare-fun x266 () Bool)
(declare-fun x4 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x294 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x295 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x127 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x131 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x232 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x57 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x108 () Bool)
(declare-fun x220 () (_ BitVec 256))
(declare-fun x151 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x276 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x267 () (_ BitVec 256))
(declare-fun x235 () (_ BitVec 256))
(declare-fun x279 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x46 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x264 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x96 () (_ BitVec 256))
(define-fun x189 ((x133 (_ BitVec 256)) (x76 (_ BitVec 256))) Bool (= x133 (bvudiv (bvmul x76 x133) x76)))
(define-fun x173 ((x133 (_ BitVec 256)) (x76 (_ BitVec 256))) Bool (= x133 (bvsdiv (bvmul x133 x76) x76)))
(define-fun x109 ((x133 (_ BitVec 256)) (x76 (_ BitVec 256))) Bool (= x133 (bvsdiv (bvmul x76 x133) x76)))
(define-fun x301 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x284 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x174 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x78 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x43 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x253 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x42 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x145 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x82 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x15 ((x293 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x29 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 x73) x205 (x127 x293)))
(define-fun x283 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 x232) x269 (x29 x293)))
(define-fun x95 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv128 256)) (_ bv1 256) (x301 x293)))
(define-fun x139 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv192 256)) (_ bv0 256) (x174 x293)))
(define-fun x89 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv224 256)) (_ bv0 256) (x43 x293)))
(define-fun x64 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x293) (_ bv0 256) (x42 x293)))
(define-fun x33 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv160 256)) (_ bv192 256) (x82 x293)))
(define-fun x236 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x293) x232 (x139 x293)))
(define-fun x180 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv320 256)) x105 (x89 x293)))
(define-fun x135 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv352 256)) x179 (x64 x293)))
(define-fun x224 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x293) (_ bv288 256) (x33 x293)))
(define-fun x222 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x54 x293) x287 (x283 x293)))
(define-fun x18 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 x232) x240 (x222 x293)))
(define-fun x186 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x256 x293) x296 (x18 x293)))
(define-fun x225 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x293) (_ bv1 256) (x284 x293)))
(define-fun x260 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv192 256)) (_ bv0 256) (x78 x293)))
(define-fun x48 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv224 256)) (_ bv0 256) (x253 x293)))
(define-fun x62 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv256 256)) (_ bv0 256) (x145 x293)))
(define-fun x206 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x293) (_ bv192 256) (x15 x293)))
(define-fun x262 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= x293 (_ bv288 256)) x232 (x260 x293)))
(define-fun x282 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x293) x243 (x48 x293)))
(define-fun x165 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x293) x179 (x62 x293)))
(define-fun x202 ((x293 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x293) (_ bv288 256) (x206 x293)))
(assert (x274 (_ bv340282366920938463463374607431768211455 256)))
(assert (=> (bvuge (_ bv10000 256) x256) (= (x207 x256) (_ bv0 256))))
(assert (= (x207 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= (_ bv64 256) (x47 (x21 (_ bv64 256) x267 (_ bv61 256)))))
(assert (bvult (_ bv10000 256) (x21 (_ bv64 256) x268 (_ bv0 256))))
(assert (= (_ bv0 256) (x207 (_ bv4294967295 256))))
(assert (bvult (_ bv10000 256) (x21 (_ bv64 256) x268 x100)))
(assert (= (x21 (_ bv64 256) x242 (_ bv2 256)) (x207 (x21 (_ bv64 256) x242 (_ bv2 256)))))
(assert (= (x21 (_ bv64 256) x56 (_ bv60 256)) (x207 (x21 (_ bv64 256) x56 (_ bv60 256)))))
(assert (= (x47 (x21 (_ bv64 256) x268 (_ bv0 256))) (_ bv64 256)))
(assert (bvult (_ bv10000 256) (x21 (_ bv64 256) x267 x216)))
(assert (=> (bvule x73 (_ bv10000 256)) (= (_ bv0 256) (x207 x73))))
(assert (=> (bvule x56 (_ bv10000 256)) (= (x207 x56) (_ bv0 256))))
(assert (= (=> (and (= (bvudiv x244 x93) x116) (= x261 (bvadd (bvneg x281) x144)) (= (bvudiv x244 x90) x238) (or x113 x204) (not (bvugt x261 x144)) (= (= x90 (_ bv0 256)) x204) (bvule x31 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (x189 x38 x261) (= x31 (bvmul x38 x261)) (= (bvadd x116 x178) x16) (not (bvugt x116 (bvadd x116 x178))) (bvule (_ bv1 256) x93) (bvuge x31 (_ bv0 256)) (= x191 x16) (= x31 x90) (= (= x238 (_ bv1000000000000000000 256)) x113) (= x244 (bvmul x90 (_ bv1000000000000000000 256)))) x25) x70))
(assert (= x65 (and x247 x271)))
(assert (=> (bvuge (_ bv10000 256) x268) (= (x207 x268) (_ bv0 256))))
(assert (= (_ bv64 256) (x47 (x21 (_ bv64 256) x156 (_ bv0 256)))))
(assert (= (=> (and (= (= (_ bv1000000000000000000 256) x23) x106) (= x237 (bvmul x297 (_ bv1000000000000000000 256))) (bvuge x147 (_ bv0 256)) (not (bvugt x49 (bvadd x49 x125))) (= x157 (bvadd x125 x49)) (= x147 (bvmul x132 x192)) (= x147 x297) (or x129 x106) (= (bvudiv x237 x190) x49) (x189 x132 x192) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x147) (= (= (_ bv0 256) x297) x129) (not (bvult x153 x192)) (= (bvadd x153 (bvneg x203)) x192) (= x23 (bvudiv x237 x297)) (= x6 x157) (bvuge x190 (_ bv1 256))) x176) x118))
(assert (= (x207 (_ bv157198259 256)) (_ bv0 256)))
(assert (not (x274 (x21 (_ bv64 256) x156 (_ bv0 256)))))
(assert (= (or x8 x57) x210))
(assert (= x53 (and (not x247) x271)))
(assert (= (_ bv60 256) (x20 (x21 (_ bv64 256) x56 (_ bv60 256)))))
(assert (= (x207 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (x21 (_ bv64 256) x267 x216) (x207 (x21 (_ bv64 256) x267 x216))))
(assert (= (x20 (x21 (_ bv64 256) x267 (_ bv61 256))) (_ bv61 256)))
(assert (not x37))
(assert (= (and (not x300) x148) x55))
(assert (= (or x98 x272) x8))
(assert (= x25 (=> (and (bvuge x200 (_ bv0 256)) (= x265 (x180 x146)) (= (x12 x208) x59) (= (bvudiv x200 (_ bv1000000000000000000 256)) x166) (= x67 (bvadd x191 (bvneg x59))) (= x250 (not (bvult (_ bv1 256) x45))) (not (bvult x191 x67)) (= x216 (bvadd (_ bv1 256) x134)) (= (x95 (_ bv128 256)) x45) (= (bvmul x67 x265) x200) (x189 x265 x67) (= (x21 (_ bv64 256) x267 x216) x208) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x200) (= (x224 (_ bv160 256)) x249) (= (bvadd (_ bv32 256) x249) x146)) (and x250 (=> (= x166 x115) x181)))))
(assert (=> (bvule x130 (_ bv10000 256)) (= (x207 x130) (_ bv0 256))))
(assert (=> (bvule x279 (_ bv10000 256)) (= (_ bv0 256) (x207 x279))))
(assert (= (_ bv0 256) (x207 (_ bv115792089237316195423570985008687907853269984665640564039457 256))))
(assert (= x290 (=> (= x258 (ite x30 x30 (not (bvult x203 x234)))) (and (=> (and (= x6 x125) x258) x176) (=> (and (not x258) (and (= x300 (bvugt x50 x234)) (or (and (not x300) (= x50 x153)) (and x300 (= x234 x153))))) x118)))))
(assert (= (x20 (x21 (_ bv64 256) x268 (_ bv0 256))) (_ bv0 256)))
(assert (= (x21 (_ bv64 256) x268 (_ bv0 256)) (x207 (x21 (_ bv64 256) x268 (_ bv0 256)))))
(assert (= x108 true))
(assert (= (_ bv64 256) (x47 (x21 (_ bv64 256) x268 (_ bv61 256)))))
(assert (= x176 (=> (and (= x117 (not (bvult (_ bv1 256) x110))) (not (bvult x6 x154)) (bvuge x80 (_ bv0 256)) (= x68 (x12 x187)) (= (bvmul x154 x185) x80) (= x187 (x21 (_ bv64 256) x268 x100)) (= (x225 (_ bv128 256)) x110) (= x100 (bvadd x72 (_ bv1 256))) (= x28 (bvadd x107 (_ bv32 256))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x80) (= (bvadd (bvneg x68) x6) x154) (x189 x185 x154) (= x5 (bvudiv x80 (_ bv1000000000000000000 256))) (= (x282 x28) x185) (= (x202 (_ bv160 256)) x107)) (and (=> (= x94 x5) x198) x117))))
(assert (x274 (_ bv404098525 256)))
(assert (= (and x52 (not x258)) x148))
(assert (=> (bvule x54 (_ bv10000 256)) (= (x207 x54) (_ bv0 256))))
(assert (= (or x11 x219) x128))
(assert (= (x207 x104) (x207 (bvadd x104 (_ bv1 256)))))
(assert (not (x274 (x21 (_ bv64 256) x267 (_ bv0 256)))))
(assert (= (x20 (x21 (_ bv64 256) x267 (_ bv0 256))) (_ bv0 256)))
(assert (= x156 (x151 (x21 (_ bv64 256) x156 (_ bv0 256)))))
(assert (bvugt (x21 (_ bv64 256) x220 (_ bv60 256)) (_ bv10000 256)))
(assert (= (and (not x278) x108) x79))
(assert (not (x274 (x21 (_ bv64 256) x268 x100))))
(assert (= (and (not x275) x86) x219))
(assert (x274 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (x274 (_ bv1289409798 256)))
(assert (x274 (_ bv1889567281 256)))
(assert (= (_ bv64 256) (x47 (x21 (_ bv64 256) x267 x216))))
(assert (bvugt (x21 (_ bv64 256) x56 (_ bv60 256)) (_ bv10000 256)))
(assert (= (x207 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= x268 (x151 (x21 (_ bv64 256) x268 (_ bv0 256)))))
(assert (= (x47 (x21 (_ bv64 256) x220 (_ bv60 256))) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x220) (= (x207 x220) (_ bv0 256))))
(assert (= (and x211 (not x111)) x272))
(assert (= x57 (and x184 x168)))
(assert (not (x274 (x21 (_ bv64 256) x56 (_ bv60 256)))))
(assert (= (x207 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (and x17 (not x214)) x10))
(assert (= (and x211 x111) x98))
(assert (= (x207 (x21 (_ bv64 256) x220 (_ bv60 256))) (x21 (_ bv64 256) x220 (_ bv60 256))))
(assert (x274 (_ bv157198259 256)))
(assert (= (x207 (bvadd (_ bv1 256) x134)) (x207 x134)))
(assert (bvult (_ bv10000 256) (x21 (_ bv64 256) x242 (_ bv2 256))))
(assert (= (or x53 x65) x52))
(assert (= x267 (x151 (x21 (_ bv64 256) x267 (_ bv0 256)))))
(assert (= (x20 (x21 (_ bv64 256) x242 (_ bv2 256))) (_ bv2 256)))
(assert (= x37 (=> (and (and (= x267 x120) (and (= x295 x188) (and (= x209 x269) (= x136 (x21 (_ bv64 256) x267 (_ bv0 256))) (= (x127 x73) x205) (= x73 x170) (= (x46 x136) x105) (= x246 x267) (bvule x105 (_ bv20282409603651670423947251286015 256)) (= (x95 (_ bv128 256)) x164) (= (x276 x232) x3) (= x278 (bvugt x164 (_ bv0 256))) (bvule (_ bv1 256) x3) (= x205 x138) (= x209 (x29 x232)) (= (_ bv128 256) x228) (= (_ bv2378104546 256) x289)))) (and (bvule x112 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x141 (bvule (_ bv0 256) x188) (not (= x232 x130)) (bvuge (_ bv4294967295 256) x167) (bvule x170 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x279 x130)) (bvule (_ bv0 256) x112) (bvuge x218 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x232) (bvuge x130 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x169) (bvuge x170 (_ bv0 256)) (= x230 (_ bv0 256)) (bvule (_ bv0 256) x177) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x188) (bvule x279 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x273 (_ bv0 256)) (= (bvugt (x276 x130) (_ bv0 256)) x141) (= (_ bv36 256) x131) (not (= x279 x232)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x195) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x101) (bvule (_ bv0 256) x169) x196 (bvule x212 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x280 (bvult (_ bv0 256) (x276 x279))) (= (bvult (_ bv0 256) (x276 x232)) x196) (bvuge x167 (_ bv0 256)) (= x218 x120) x280 (bvule x26 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x101 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x130) (bvuge x195 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x273) (bvule (_ bv0 256) x26) (bvuge x212 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x218) (bvuge x232 (_ bv1 256)) (bvule x177 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x279 (_ bv1 256)))) (and (=> (and (and (and (= x34 (bvadd (_ bv64 256) x259)) (= x288 (x21 (_ bv64 256) x56 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x38) (= x93 (x135 x34)) (= x56 (bvand x292 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x38 (_ bv0 256)) (= x38 (_ bv0 256)) (= x93 (_ bv0 256))) x214) (= x134 (bvadd (_ bv1 256) x288)) (= x281 (x91 x288)) (bvuge (_ bv340282366920938463463374607431768211455 256) x281) (= x259 (x224 (_ bv160 256))) (= x178 (x66 x134)) (= x38 (x36 x288)) (= (x236 x257) x292) (= (x224 (_ bv160 256)) x257)) (or (and x214 (= x214 x291)) (and (not x214) (= x291 (= x295 x281))))) x278) x61) (=> (and (= x115 (_ bv0 256)) (not x278)) x181)))))
(assert (= x100 (x20 (x21 (_ bv64 256) x268 x100))))
(assert (= (x207 x288) (x207 (bvadd (_ bv1 256) x288))))
(assert (= x216 (x20 (x21 (_ bv64 256) x267 x216))))
(assert (bvugt (x21 (_ bv64 256) x267 (_ bv61 256)) (_ bv10000 256)))
(assert (= x152 (or x270 x55)))
(assert (x274 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (x274 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x270 (and x300 x148)))
(assert (= x220 (x151 (x21 (_ bv64 256) x220 (_ bv60 256)))))
(assert (= (x21 (_ bv64 256) x268 x100) (x207 (x21 (_ bv64 256) x268 x100))))
(assert (= x271 (and x86 x275)))
(assert (bvult (_ bv10000 256) (x21 (_ bv64 256) x156 (_ bv0 256))))
(assert (not (x274 (x21 (_ bv64 256) x267 x216))))
(assert (= x198 (=> (and (not (bvugt x121 (bvadd x121 x94))) (= x9 (bvadd x121 x94)) (= x121 (x162 x60)) (= x266 (bvule x13 x223)) (= (x21 (_ bv64 256) x268 (_ bv61 256)) x60) (= x223 x9)) x266)))
(assert (= (x207 (x21 (_ bv64 256) x267 (_ bv61 256))) (x21 (_ bv64 256) x267 (_ bv61 256))))
(assert (= (and x258 x52) x75))
(assert (= x268 (x151 (x21 (_ bv64 256) x268 x100))))
(assert (x274 (_ bv2378104546 256)))
(assert (x274 (_ bv20282409603651670423947251286015 256)))
(assert (= (_ bv0 256) (x20 (x21 (_ bv64 256) x156 (_ bv0 256)))))
(assert (= (x20 (x21 (_ bv64 256) x268 (_ bv61 256))) (_ bv61 256)))
(assert (= (_ bv0 256) (x207 (_ bv1289409798 256))))
(assert (= (or x75 x152) x11))
(assert (= (x207 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (or x210 x79) x86))
(assert (= (x207 (_ bv2378104546 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x207 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (x47 (x21 (_ bv64 256) x267 (_ bv0 256))) (_ bv64 256)))
(assert (= x193 (and x214 x17)))
(assert (= (x207 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= (x207 (_ bv404098525 256)) (_ bv0 256)))
(assert (bvult (_ bv10000 256) (x21 (_ bv64 256) x267 (_ bv0 256))))
(assert (= (x47 (x21 (_ bv64 256) x268 x100)) (_ bv64 256)))
(assert (=> (bvuge (_ bv10000 256) x267) (= (x207 x267) (_ bv0 256))))
(assert (= (x207 (x21 (_ bv64 256) x268 (_ bv61 256))) (x21 (_ bv64 256) x268 (_ bv61 256))))
(assert (= (or x193 x10) x184))
(assert (= (x151 (x21 (_ bv64 256) x267 (_ bv61 256))) x267))
(assert (= (_ bv0 256) (x207 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (= x181 (=> (and (and (and (= x35 x156) (= (_ bv4 256) x137) (= (_ bv36 256) x233) (= (x276 x232) x217) (bvuge x217 (_ bv1 256)) (= (_ bv404098525 256) x24) (bvuge (_ bv20282409603651670423947251286015 256) x213) (= (x21 (_ bv64 256) x156 (_ bv0 256)) x85) (bvule (_ bv1 256) x235) (= x158 (bvuge x179 x213)) x158 (= x2 (_ bv1889567281 256)) (= x213 (x46 x85)) (= x235 (x276 x232)) (= x264 x156)) (and (and (= x199 (_ bv1289409798 256)) (= x161 x179) (bvule x124 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x161 x159) (= x96 (x276 x232)) (= (_ bv36 256) x303) (bvuge x124 (_ bv1 256)) (= x197 x161) (= (bvudiv x215 (_ bv1000000000000000000 256)) x159) (bvuge x96 (_ bv1 256)) (= (bvmul x161 (_ bv1000000000000000000 256)) x215) (= (bvudiv x215 x124) x69)) (and (and (bvule (_ bv1 256) x71) x4 (= (_ bv1889567281 256) x41) (= (bvule x69 x88) x4) (bvule x99 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv68 256) x201) (= (x7 x252) x88) (bvuge x170 (_ bv1 256)) (= x226 x299) (= x232 x242) (= (x276 x130) x71) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x201) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x170) (= x99 (x294 (_ bv4 256))) (= x299 (x294 (_ bv36 256))) (= x252 (x21 (_ bv64 256) x242 (_ bv2 256))) (= x99 x227) (= x242 x302) (bvuge x99 (_ bv1 256))) (and (and (and (and (and (= (x276 x232) x194) (= x142 x172) (= x285 (x225 (_ bv128 256))) (bvule (_ bv1 256) x194) (= x241 x268) (= x14 x296) (bvuge (_ bv20282409603651670423947251286015 256) x243) (= x170 x256) (= x103 (_ bv128 256)) (= x19 (x21 (_ bv64 256) x268 (_ bv0 256))) (= (x186 x232) x172) (= (bvugt x285 (_ bv0 256)) x275) (= x243 (x46 x19)) (= (x18 x256) x296) (= (_ bv2378104546 256) x58)) (= x50 x188)) (= x268 x122)) (and (= x54 x170) (= x102 x287) (= x74 x227) (= (_ bv36 256) x123) (= x229 (_ bv157198259 256)) (= x84 (x222 x232)) (= (x283 x54) x287) (= x226 x182) (= (_ bv1 256) x171) (= x84 x240) (bvuge x32 (_ bv1 256)) (= x32 (x276 x232)) (= x218 x122))) (= x170 x255))))) (and (= x81 (_ bv4 256)) (= (_ bv404098525 256) x143) (= (_ bv36 256) x221) (= x218 x35) (= (x276 x232) x77) (= x149 x13) (= x114 (x162 x251)) (= x149 (bvadd x114 x115)) (= x251 (x21 (_ bv64 256) x267 (_ bv61 256))) (not (bvugt x114 (bvadd x115 x114))) (bvule (_ bv1 256) x77) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x179))) (and (=> (and (and (or (and (= x247 x30) x247) (and (not x247) (= x30 (= x203 x50)))) (and (= x72 (bvadd (_ bv1 256) x104)) (= (x66 x72) x125) (bvule x203 (_ bv340282366920938463463374607431768211455 256)) (= x150 (x262 x83)) (bvuge (_ bv340282366920938463463374607431768211455 256) x132) (= x247 (ite (= x132 (_ bv0 256)) (= x132 (_ bv0 256)) (= x190 (_ bv0 256)))) (= (x165 x126) x190) (= (x202 (_ bv160 256)) x83) (= (bvand (_ bv1461501637330902918203684832716283019655932542975 256) x150) x220) (= x132 (x36 x104)) (= (bvadd x163 (_ bv64 256)) x126) (= (x202 (_ bv160 256)) x163) (= (x91 x104) x203) (= x104 (x21 (_ bv64 256) x220 (_ bv60 256))))) x275) x290) (=> (and (not x275) (= (_ bv0 256) x94)) x198)))))
(assert (= (and x108 x278) x17))
(assert (not (x274 (x21 (_ bv64 256) x268 (_ bv0 256)))))
(assert (= (and (not x168) x184) x211))
(assert (not (x274 (x21 (_ bv64 256) x220 (_ bv60 256)))))
(assert (not (x274 (x21 (_ bv64 256) x268 (_ bv61 256)))))
(assert (x274 (_ bv4294967295 256)))
(assert (= x242 (x151 (x21 (_ bv64 256) x242 (_ bv2 256)))))
(assert (= x61 (=> (= (ite x291 x291 (not (bvugt x234 x281))) x168) (and (=> (and (= x191 x178) x168) x25) (=> (and (not x168) (and (= x111 (bvugt x295 x234)) (or (and (= x234 x144) x111) (and (= x295 x144) (not x111))))) x70)))))
(assert (= (x21 (_ bv64 256) x267 (_ bv0 256)) (x207 (x21 (_ bv64 256) x267 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x242) (= (_ bv0 256) (x207 x242))))
(assert (= (_ bv60 256) (x20 (x21 (_ bv64 256) x220 (_ bv60 256)))))
(assert (x274 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (not (x274 (x21 (_ bv64 256) x242 (_ bv2 256)))))
(assert (not (x274 (x21 (_ bv64 256) x267 (_ bv61 256)))))
(assert (= (x47 (x21 (_ bv64 256) x242 (_ bv2 256))) (_ bv64 256)))
(assert (x274 (_ bv1000000000000000000 256)))
(assert (=> (bvule x232 (_ bv10000 256)) (= (x207 x232) (_ bv0 256))))
(assert (bvugt (x21 (_ bv64 256) x268 (_ bv61 256)) (_ bv10000 256)))
(assert (= (x21 (_ bv64 256) x156 (_ bv0 256)) (x207 (x21 (_ bv64 256) x156 (_ bv0 256)))))
(assert (= (x47 (x21 (_ bv64 256) x56 (_ bv60 256))) (_ bv64 256)))
(assert (x274 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (= (x151 (x21 (_ bv64 256) x268 (_ bv61 256))) x268))
(assert (=> (bvule x156 (_ bv10000 256)) (= (x207 x156) (_ bv0 256))))
(assert (= (x151 (x21 (_ bv64 256) x267 x216)) x267))
(assert (= (x207 (bvadd (_ bv1 256) x72)) (x207 x72)))
(assert (= (x151 (x21 (_ bv64 256) x56 (_ bv60 256))) x56))
(check-sat)
(exit)
