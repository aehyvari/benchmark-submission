(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x259 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x300 () (_ BitVec 256))
(declare-fun x60 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x19 () Bool)
(declare-fun x227 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x207 () (_ BitVec 256))
(declare-fun x210 () (_ BitVec 256))
(declare-fun x223 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x164 () Bool)
(declare-fun x147 () (_ BitVec 256))
(declare-fun x212 () Bool)
(declare-fun x105 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x233 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x298 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x205 () Bool)
(declare-fun x178 () Bool)
(declare-fun x279 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x232 () Bool)
(declare-fun x255 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x120 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x257 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x193 () Bool)
(declare-fun x5 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x293 () (_ BitVec 256))
(declare-fun x152 () Bool)
(declare-fun x168 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x256 () Bool)
(declare-fun x292 () (_ BitVec 256))
(declare-fun x200 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x265 () Bool)
(declare-fun x73 () Bool)
(declare-fun x295 () (_ BitVec 256))
(declare-fun x241 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x106 () Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x6 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x59 () Bool)
(declare-fun x276 () (_ BitVec 256))
(declare-fun x68 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x137 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x284 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x289 () (_ BitVec 256))
(declare-fun x288 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x254 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x303 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x239 () (_ BitVec 256))
(declare-fun x148 () (_ BitVec 256))
(declare-fun x49 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x242 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x134 () Bool)
(declare-fun x28 () (_ BitVec 256))
(declare-fun x282 () (_ BitVec 256))
(declare-fun x238 () (_ BitVec 256))
(declare-fun x263 () (_ BitVec 256))
(declare-fun x9 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x67 () Bool)
(declare-fun x252 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x11 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x125 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x206 ((_ BitVec 256)) Bool)
(declare-fun x199 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x100 () Bool)
(declare-fun x112 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x248 () (_ BitVec 256))
(declare-fun x186 () Bool)
(declare-fun x64 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x124 () (_ BitVec 256))
(declare-fun x183 () Bool)
(declare-fun x296 () (_ BitVec 256))
(declare-fun x209 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x301 () Bool)
(declare-fun x167 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x244 () (_ BitVec 256))
(declare-fun x274 () Bool)
(declare-fun x83 () (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x143 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x225 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x1 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x250 () Bool)
(declare-fun x231 () (_ BitVec 256))
(declare-fun x114 () (_ BitVec 256))
(declare-fun x277 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x185 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x275 () (_ BitVec 256))
(declare-fun x266 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x170 () Bool)
(declare-fun x86 () (_ BitVec 256))
(declare-fun x269 () (_ BitVec 256))
(declare-fun x213 () Bool)
(declare-fun x113 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x188 () Bool)
(declare-fun x110 () Bool)
(declare-fun x297 () Bool)
(declare-fun x171 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x90 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x30 () Bool)
(declare-fun x215 () (_ BitVec 256))
(declare-fun x13 () Bool)
(declare-fun x25 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x260 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x197 () (_ BitVec 256))
(declare-fun x251 () (_ BitVec 256))
(declare-fun x135 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x290 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x268 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x174 () Bool)
(declare-fun x98 () (_ BitVec 256))
(declare-fun x169 () Bool)
(declare-fun x278 () (_ BitVec 256))
(declare-fun x208 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x136 () Bool)
(declare-fun x291 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x71 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x175 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x180 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x245 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x243 () Bool)
(declare-fun x271 () (_ BitVec 256))
(declare-fun x127 () Bool)
(declare-fun x99 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x89 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x299 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x202 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x287 () (_ BitVec 256))
(declare-fun x48 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x189 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x264 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x286 () Bool)
(declare-fun x247 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x236 () (_ BitVec 256))
(declare-fun x55 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x281 () Bool)
(declare-fun x234 () Bool)
(declare-fun x267 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(define-fun x235 ((x87 (_ BitVec 256)) (x119 (_ BitVec 256))) Bool (= x87 (bvudiv (bvmul x119 x87) x119)))
(define-fun x7 ((x87 (_ BitVec 256)) (x119 (_ BitVec 256))) Bool (= x87 (bvsdiv (bvmul x87 x119) x119)))
(define-fun x61 ((x87 (_ BitVec 256)) (x119 (_ BitVec 256))) Bool (= x87 (bvsdiv (bvmul x119 x87) x119)))
(define-fun x272 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x66 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x150 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x39 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x179 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x96 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x280 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x159 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x121 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x219 ((x22 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x35 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 x151) x25 (x60 x22)))
(define-fun x50 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 x125) x9 (x35 x22)))
(define-fun x203 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv128 256)) (_ bv1 256) (x272 x22)))
(define-fun x224 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv192 256)) (_ bv0 256) (x150 x22)))
(define-fun x249 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv224 256)) (_ bv0 256) (x179 x22)))
(define-fun x12 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv256 256) x22) (_ bv0 256) (x280 x22)))
(define-fun x72 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv160 256)) (_ bv192 256) (x121 x22)))
(define-fun x155 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv288 256) x22) x125 (x224 x22)))
(define-fun x217 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv320 256)) x190 (x249 x22)))
(define-fun x237 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv352 256)) x95 (x12 x22)))
(define-fun x270 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x22) (_ bv288 256) (x72 x22)))
(define-fun x240 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x158 x22) x49 (x50 x22)))
(define-fun x31 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 x125) x142 (x240 x22)))
(define-fun x216 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x225 x22) x143 (x31 x22)))
(define-fun x82 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x22) (_ bv1 256) (x66 x22)))
(define-fun x33 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv192 256)) (_ bv0 256) (x39 x22)))
(define-fun x38 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv224 256)) (_ bv0 256) (x96 x22)))
(define-fun x94 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv256 256)) (_ bv0 256) (x159 x22)))
(define-fun x177 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x22) (_ bv192 256) (x219 x22)))
(define-fun x21 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= x22 (_ bv288 256)) x125 (x33 x22)))
(define-fun x122 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv320 256) x22) x299 (x38 x22)))
(define-fun x54 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv352 256) x22) x95 (x94 x22)))
(define-fun x52 ((x22 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x22) (_ bv288 256) (x177 x22)))
(assert (x206 (_ bv1289409798 256)))
(assert (= x156 (=> (= x24 (ite x213 x213 (not (bvugt x244 x65)))) (and (=> (and (= x167 x180) x24) x73) (=> (and (and (or (and (= x303 x244) x170) (and (= x140 x303) (not x170))) (= x170 (bvugt x140 x244))) (not x24)) x106)))))
(assert (= (x247 (_ bv64 256) x37 (_ bv0 256)) (x68 (x247 (_ bv64 256) x37 (_ bv0 256)))))
(assert (= (_ bv0 256) (x68 (_ bv20282409603651670423947251286015 256))))
(assert (= (x6 (x247 (_ bv64 256) x28 x83)) x83))
(assert (= (=> (and (= (= (_ bv0 256) x20) x120) (= x20 x132) (x235 x58 x294) (= x180 x282) (not (bvugt x294 x303)) (= x294 (bvadd x303 (bvneg x65))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x132) (= (bvmul x20 (_ bv1000000000000000000 256)) x252) (bvuge x132 (_ bv0 256)) (= (bvudiv x252 x231) x53) (= (bvmul x294 x58) x132) (= x266 (= (_ bv1000000000000000000 256) x74)) (or x266 x120) (not (bvugt x53 (bvadd x167 x53))) (= x282 (bvadd x53 x167)) (bvule (_ bv1 256) x231) (= (bvudiv x252 x20) x74)) x73) x106))
(assert (= (=> (and (= (x247 (_ bv64 256) x28 (_ bv61 256)) x245) (= x209 x277) (= x273 (x208 x245)) (not (bvugt x273 (bvadd x273 x101))) (= x277 (bvadd x101 x273)) (= (bvule x40 x209) x59)) x59) x67))
(assert (x206 (_ bv1000000000000000000 256)))
(assert (bvult (_ bv10000 256) (x247 (_ bv64 256) x28 (_ bv0 256))))
(assert (=> (bvuge (_ bv10000 256) x37) (= (x68 x37) (_ bv0 256))))
(assert (= (or x70 x186) x79))
(assert (=> (bvule x262 (_ bv10000 256)) (= (x68 x262) (_ bv0 256))))
(assert (= (x6 (x247 (_ bv64 256) x28 (_ bv61 256))) (_ bv61 256)))
(assert (bvugt (x247 (_ bv64 256) x37 (_ bv0 256)) (_ bv10000 256)))
(assert (= (x68 (bvadd (_ bv1 256) x128)) (x68 x128)))
(assert (x206 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (and (not x24) x291) x198))
(assert (x206 (_ bv2378104546 256)))
(assert (=> (bvuge (_ bv10000 256) x28) (= (x68 x28) (_ bv0 256))))
(assert (= (and (not x29) x71) x243))
(assert (= x2 (and x104 x188)))
(assert (not (x206 (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (bvult (_ bv10000 256) (x247 (_ bv64 256) x269 (_ bv61 256))))
(assert (= (and x198 (not x170)) x186))
(assert (not x230))
(assert (=> (bvuge (_ bv10000 256) x158) (= (x68 x158) (_ bv0 256))))
(assert (= (and x30 x163) x100))
(assert (x206 (_ bv1889567281 256)))
(assert (= (_ bv69 256) (x6 (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (x206 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (not (x206 (x247 (_ bv64 256) x28 x83))))
(assert (= (and x163 (not x30)) x19))
(assert (= (_ bv0 256) (x68 (_ bv1946230614 256))))
(assert (= (or x2 x15) x183))
(assert (= x163 (and x71 x29)))
(assert (x206 (_ bv1946230614 256)))
(assert (= (x68 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= (=> (and (not (bvult x81 x18)) (bvule x139 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (x235 x131 x18) (bvule (_ bv0 256) x139) (= x233 (x247 (_ bv64 256) x28 x83)) (= (bvudiv x139 (_ bv1000000000000000000 256)) x78) (= x145 (x52 (_ bv160 256))) (= (bvadd x144 (_ bv1 256)) x83) (= (x227 x233) x114) (= (not (bvugt x57 (_ bv1 256))) x64) (= (bvmul x131 x18) x139) (= x18 (bvadd x81 (bvneg x114))) (= (bvadd (_ bv32 256) x145) x4) (= (x82 (_ bv128 256)) x57) (= (x122 x4) x131)) (and x64 (=> (= x101 x78) x67))) x205))
(assert (= (and (not x104) x188) x265))
(assert (= (and x24 x291) x13))
(assert (= (x68 (_ bv1289409798 256)) (_ bv0 256)))
(assert (= (or x136 x228) x291))
(assert (x206 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= x97 (=> (= (ite x169 x169 (not (bvugt x244 x154))) x104) (and (=> (and x104 (= x81 x34)) x205) (=> (and (not x104) (and (or (and (= x289 x244) x281) (and (not x281) (= x173 x289))) (= (bvugt x173 x244) x281))) x285)))))
(assert (= (x290 (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (_ bv0 256)))
(assert (= x37 (x290 (x247 (_ bv64 256) x37 (_ bv0 256)))))
(assert (= (_ bv64 256) (x112 (x247 (_ bv64 256) x28 x83))))
(assert (= (=> (and (not (bvult (bvadd x34 x275) x275)) (= x234 (= x46 (_ bv0 256))) (= (bvadd (bvneg x154) x289) x75) (or x174 x234) (= (bvudiv x62 x46) x268) (= x275 (bvudiv x62 x192)) (x235 x220 x75) (= x62 (bvmul x46 (_ bv1000000000000000000 256))) (not (bvugt x75 x289)) (= x160 (bvmul x220 x75)) (= x46 x160) (bvuge x192 (_ bv1 256)) (= (bvadd x34 x275) x171) (= x174 (= (_ bv1000000000000000000 256) x268)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x160) (= x81 x171) (bvule (_ bv0 256) x160)) x205) x285))
(assert (= (_ bv64 256) (x112 (x247 (_ bv64 256) x10 (_ bv60 256)))))
(assert (bvult (_ bv10000 256) (x247 (_ bv64 256) x262 (_ bv60 256))))
(assert (= x71 (or x110 x107)))
(assert (= (and x198 x170) x70))
(assert (= (_ bv0 256) (x68 (_ bv1889567281 256))))
(assert (=> (bvule x125 (_ bv10000 256)) (= (x68 x125) (_ bv0 256))))
(assert (= (x247 (_ bv64 256) x269 x215) (x68 (x247 (_ bv64 256) x269 x215))))
(assert (x206 (_ bv404098525 256)))
(assert (= (x6 (x247 (_ bv64 256) x262 (_ bv60 256))) (_ bv60 256)))
(assert (= (x290 (x247 (_ bv64 256) x262 (_ bv60 256))) x262))
(assert (= x28 (x290 (x247 (_ bv64 256) x28 (_ bv61 256)))))
(assert (not (x206 (x247 (_ bv64 256) x269 (_ bv0 256)))))
(assert (=> (bvuge (_ bv10000 256) x225) (= (_ bv0 256) (x68 x225))))
(assert (= x10 (x290 (x247 (_ bv64 256) x10 (_ bv60 256)))))
(assert (x206 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= x188 (or x100 x19)))
(assert (= (_ bv64 256) (x112 (x247 (_ bv64 256) x302 (_ bv2 256)))))
(assert (= (x68 (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256))))
(assert (= (x68 x288) (x68 (bvadd (_ bv1 256) x288))))
(assert (= (x68 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (x68 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (and x284 (not x189)) x107))
(assert (= (x247 (_ bv64 256) x28 (_ bv61 256)) (x68 (x247 (_ bv64 256) x28 (_ bv61 256)))))
(assert (= (x68 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= x164 (and x284 x189)))
(assert (= (x68 x144) (x68 (bvadd (_ bv1 256) x144))))
(assert (= (_ bv0 256) (x6 (x247 (_ bv64 256) x269 (_ bv0 256)))))
(assert (= (x247 (_ bv64 256) x10 (_ bv60 256)) (x68 (x247 (_ bv64 256) x10 (_ bv60 256)))))
(assert (x206 (_ bv4294967295 256)))
(assert (not (x206 (x247 (_ bv64 256) x269 x215))))
(assert (bvult (_ bv10000 256) (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256))))
(assert (= x215 (x6 (x247 (_ bv64 256) x269 x215))))
(assert (= (x112 (x247 (_ bv64 256) x28 (_ bv61 256))) (_ bv64 256)))
(assert (= (x6 (x247 (_ bv64 256) x10 (_ bv60 256))) (_ bv60 256)))
(assert (= x250 (=> (and (and (= x133 (_ bv4 256)) (= (_ bv404098525 256) x93) (= (_ bv36 256) x254) (= x295 x3) (= (x135 x125) x141) (= x123 x40) (= x117 (x208 x129)) (= x123 (bvadd x117 x124)) (= x129 (x247 (_ bv64 256) x269 (_ bv61 256))) (not (bvugt x117 (bvadd x124 x117))) (bvule (_ bv1 256) x141) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x95)) (and (and (and (and (and (and (= x28 x168) (and (and (= x225 x181) (= (x135 x125) x161) (= x63 (_ bv128 256)) (bvule (_ bv1 256) x161) (= x27 x76) (= x172 (x82 (_ bv128 256))) (= x259 (_ bv2378104546 256)) (= x28 x32) (= x143 (x31 x225)) (= x143 x153) (bvuge (_ bv20282409603651670423947251286015 256) x299) (= x29 (bvugt x172 (_ bv0 256))) (= x299 (x264 x126)) (= (x216 x125) x76) (= x126 (x247 (_ bv64 256) x28 (_ bv0 256)))) (= x176 x173))) (and (= x197 (x135 x125)) (= (_ bv1946230614 256) x300) (= x168 x295) (= (x50 x158) x49) (= x181 x158) (= (_ bv36 256) x14) (= x204 (_ bv0 256)) (= x115 x138) (= x48 (x223 x191)) (= x191 (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (= x80 (x240 x125)) (bvule x48 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x49 x47) (bvule (_ bv1 256) x197) (= x142 x80) (= x48 x166))) (= x181 x166)) (and x105 (bvuge x298 (_ bv36 256)) (= x292 (x247 (_ bv64 256) x302 (_ bv2 256))) (bvule (_ bv1 256) x102) (bvuge (_ bv9999 256) x44) (= x125 x302) (= x44 (x279 (_ bv4 256))) (= (x135 x113) x102) (= (x202 x292) x8) (= (_ bv1889567281 256) x255) (= (bvule x43 x8) x105) (= x138 x44) (= x302 x229) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x298))) (and (= x45 (_ bv1289409798 256)) (= x211 x95) (bvule x251 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x211 x91) (= x221 (x135 x125)) (= (_ bv36 256) x296) (bvuge x251 (_ bv1 256)) (= x69 x211) (= (bvudiv x258 (_ bv1000000000000000000 256)) x91) (bvuge x221 (_ bv1 256)) (= (bvmul x211 (_ bv1000000000000000000 256)) x258) (= (bvudiv x258 x251) x43))) (and (= x3 x37) (= (_ bv4 256) x238) (= (_ bv36 256) x88) (= (x135 x125) x261) (bvuge x261 (_ bv1 256)) (= (_ bv404098525 256) x260) (bvuge (_ bv20282409603651670423947251286015 256) x99) (= (x247 (_ bv64 256) x37 (_ bv0 256)) x287) (bvule (_ bv1 256) x195) (= x103 (bvuge x95 x99)) x103 (= x56 (_ bv1889567281 256)) (= x99 (x264 x287)) (= x195 (x135 x125)) (= x293 x37)))) (and (=> (and (not x29) (= (_ bv0 256) x101)) x67) (=> (and x29 (and (and (= (x90 x288) x220) (= x30 (ite (= (_ bv0 256) x220) (= x220 (_ bv0 256)) (= (_ bv0 256) x192))) (= x111 (x52 (_ bv160 256))) (= (bvadd (_ bv1 256) x288) x144) (= (x137 x144) x34) (= (x52 (_ bv160 256)) x248) (= x185 (bvadd x248 (_ bv64 256))) (= x154 (x199 x288)) (= x116 (x21 x111)) (= x288 (x247 (_ bv64 256) x10 (_ bv60 256))) (= x10 (bvand x116 (_ bv1461501637330902918203684832716283019655932542975 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x154) (= (x54 x185) x192) (bvule x220 (_ bv340282366920938463463374607431768211455 256))) (or (and (= x169 x30) x30) (and (= (= x173 x154) x169) (not x30))))) x97)))))
(assert (= (_ bv2 256) (x6 (x247 (_ bv64 256) x302 (_ bv2 256)))))
(assert (= (_ bv64 256) (x112 (x247 (_ bv64 256) x269 x215))))
(assert (= (=> (and (= x207 (x270 (_ bv160 256))) (x235 x84 x148) (= (x247 (_ bv64 256) x269 x215) x257) (= x84 (x217 x147)) (= (bvadd x207 (_ bv32 256)) x147) (bvule x239 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (x203 (_ bv128 256)) x283) (= (bvadd x180 (bvneg x1)) x148) (= x239 (bvmul x84 x148)) (= (bvudiv x239 (_ bv1000000000000000000 256)) x242) (= (bvadd (_ bv1 256) x200) x215) (bvule (_ bv0 256) x239) (= (not (bvult (_ bv1 256) x283)) x149) (= (x227 x257) x1) (not (bvult x180 x148))) (and x149 (=> (= x124 x242) x250))) x73))
(assert (= (x290 (x247 (_ bv64 256) x269 (_ bv0 256))) x269))
(assert (=> (bvule x151 (_ bv10000 256)) (= (x68 x151) (_ bv0 256))))
(assert (= (_ bv64 256) (x112 (x247 (_ bv64 256) x269 (_ bv0 256)))))
(assert (= (x68 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (x290 (x247 (_ bv64 256) x302 (_ bv2 256))) x302))
(assert (= x274 (and x281 x265)))
(assert (x206 (_ bv340282366920938463463374607431768211455 256)))
(assert (x206 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not (x206 (x247 (_ bv64 256) x28 (_ bv61 256)))))
(assert (= (x6 (x247 (_ bv64 256) x269 (_ bv61 256))) (_ bv61 256)))
(assert (= (_ bv0 256) (x68 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (bvult (_ bv10000 256) (x247 (_ bv64 256) x269 (_ bv0 256))))
(assert (= (_ bv0 256) (x68 (_ bv1000000000000000000 256))))
(assert (= true x284))
(assert (= (x290 (x247 (_ bv64 256) x269 x215)) x269))
(assert (not (x206 (x247 (_ bv64 256) x28 (_ bv0 256)))))
(assert (bvugt (x247 (_ bv64 256) x302 (_ bv2 256)) (_ bv10000 256)))
(assert (= (x68 (x247 (_ bv64 256) x302 (_ bv2 256))) (x247 (_ bv64 256) x302 (_ bv2 256))))
(assert (x206 (_ bv20282409603651670423947251286015 256)))
(assert (not (x206 (x247 (_ bv64 256) x302 (_ bv2 256)))))
(assert (= (_ bv0 256) (x6 (x247 (_ bv64 256) x28 (_ bv0 256)))))
(assert (= (x68 (x247 (_ bv64 256) x28 x83)) (x247 (_ bv64 256) x28 x83)))
(assert (= (x247 (_ bv64 256) x28 (_ bv0 256)) (x68 (x247 (_ bv64 256) x28 (_ bv0 256)))))
(assert (= (or x243 x183) x134))
(assert (= (_ bv0 256) (x68 (_ bv2378104546 256))))
(assert (= x269 (x290 (x247 (_ bv64 256) x269 (_ bv61 256)))))
(assert (= (x112 (x247 (_ bv64 256) x28 (_ bv0 256))) (_ bv64 256)))
(assert (bvugt (x247 (_ bv64 256) x10 (_ bv60 256)) (_ bv10000 256)))
(assert (bvult (_ bv10000 256) (x247 (_ bv64 256) x28 x83)))
(assert (= (x68 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (= (and x212 x164) x228))
(assert (bvult (_ bv10000 256) (x247 (_ bv64 256) x28 (_ bv61 256))))
(assert (= (x112 (x247 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (_ bv64 256)))
(assert (= (_ bv0 256) (x6 (x247 (_ bv64 256) x37 (_ bv0 256)))))
(assert (=> (bvule x113 (_ bv10000 256)) (= (_ bv0 256) (x68 x113))))
(assert (= (x247 (_ bv64 256) x269 (_ bv61 256)) (x68 (x247 (_ bv64 256) x269 (_ bv61 256)))))
(assert (= (x112 (x247 (_ bv64 256) x262 (_ bv60 256))) (_ bv64 256)))
(assert (= (x68 (bvadd (_ bv1 256) x200)) (x68 x200)))
(assert (= (x290 (x247 (_ bv64 256) x28 (_ bv0 256))) x28))
(assert (= (or x222 x274) x15))
(assert (bvugt (x247 (_ bv64 256) x269 x215) (_ bv10000 256)))
(assert (= (x68 (x247 (_ bv64 256) x269 (_ bv0 256))) (x247 (_ bv64 256) x269 (_ bv0 256))))
(assert (=> (bvule x10 (_ bv10000 256)) (= (_ bv0 256) (x68 x10))))
(assert (= (x247 (_ bv64 256) x262 (_ bv60 256)) (x68 (x247 (_ bv64 256) x262 (_ bv60 256)))))
(assert (=> (bvuge (_ bv10000 256) x165) (= (x68 x165) (_ bv0 256))))
(assert (= x28 (x290 (x247 (_ bv64 256) x28 x83))))
(assert (not (x206 (x247 (_ bv64 256) x262 (_ bv60 256)))))
(assert (not (x206 (x247 (_ bv64 256) x37 (_ bv0 256)))))
(assert (= (_ bv0 256) (x68 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (= (_ bv64 256) (x112 (x247 (_ bv64 256) x269 (_ bv61 256)))))
(assert (= (x112 (x247 (_ bv64 256) x37 (_ bv0 256))) (_ bv64 256)))
(assert (= (and x265 (not x281)) x222))
(assert (not (x206 (x247 (_ bv64 256) x269 (_ bv61 256)))))
(assert (= (or x79 x13) x110))
(assert (= x230 (=> (and (and (= x269 x146) (and (= x140 x176) (and (= x263 x9) (= x175 (x247 (_ bv64 256) x269 (_ bv0 256))) (= (x60 x151) x25) (= x151 x181) (= (x264 x175) x190) (= x276 x269) (bvule x190 (_ bv20282409603651670423947251286015 256)) (= (x203 (_ bv128 256)) x201) (= (x135 x125) x26) (= x189 (bvugt x201 (_ bv0 256))) (bvule (_ bv1 256) x26) (= x25 x278) (= x263 (x35 x125)) (= (_ bv128 256) x271) (= (_ bv2378104546 256) x236)))) (and (bvule x98 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x187 (bvule (_ bv0 256) x176) (not (= x125 x113)) (bvuge (_ bv4294967295 256) x210) (bvule x181 (_ bv1461501637330902918203684832716283019655932542975 256)) (not (= x165 x113)) (bvule (_ bv0 256) x98) (bvuge x295 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x125) (bvuge x113 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x182) (bvuge x181 (_ bv0 256)) (= x157 (_ bv0 256)) (bvule (_ bv0 256) x42) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x176) (bvule x165 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x253 (_ bv0 256)) (= (bvugt (x135 x113) (_ bv0 256)) x187) (= (_ bv36 256) x118) (not (= x165 x125)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x267) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x194) (bvule (_ bv0 256) x182) x297 (bvule x41 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x184 (bvult (_ bv0 256) (x135 x165))) (= (bvult (_ bv0 256) (x135 x125)) x297) (bvuge x210 (_ bv0 256)) (= x295 x146) x184 (bvule x23 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x194 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x113) (bvuge x267 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x253) (bvule (_ bv0 256) x23) (bvuge x41 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x295) (bvuge x125 (_ bv1 256)) (bvule x42 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x165 (_ bv1 256)))) (and (=> (and (and (and (= x92 (bvadd (_ bv64 256) x85)) (= x128 (x247 (_ bv64 256) x262 (_ bv60 256))) (bvuge (_ bv340282366920938463463374607431768211455 256) x58) (= x231 (x237 x92)) (= x262 (bvand x241 (_ bv1461501637330902918203684832716283019655932542975 256))) (= (ite (= x58 (_ bv0 256)) (= x58 (_ bv0 256)) (= x231 (_ bv0 256))) x212) (= x200 (bvadd (_ bv1 256) x128)) (= x65 (x199 x128)) (bvuge (_ bv340282366920938463463374607431768211455 256) x65) (= x85 (x270 (_ bv160 256))) (= x167 (x137 x200)) (= x58 (x90 x128)) (= (x155 x246) x241) (= (x270 (_ bv160 256)) x246)) (or (and x212 (= x212 x213)) (and (not x212) (= x213 (= x140 x65))))) x189) x156) (=> (and (= x124 (_ bv0 256)) (not x189)) x250)))))
(assert (=> (bvuge (_ bv10000 256) x269) (= (_ bv0 256) (x68 x269))))
(assert (=> (bvuge (_ bv10000 256) x302) (= (x68 x302) (_ bv0 256))))
(assert (not (x206 (x247 (_ bv64 256) x10 (_ bv60 256)))))
(assert (= x136 (and (not x212) x164)))
(check-sat)
(exit)
