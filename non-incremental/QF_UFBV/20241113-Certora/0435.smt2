(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x143 () Bool)
(declare-fun x125 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x15 () Bool)
(declare-fun x8 () Bool)
(declare-fun x190 () Bool)
(declare-fun x43 () Bool)
(declare-fun x171 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x75 () (_ BitVec 256))
(declare-fun x90 () (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x188 () Bool)
(declare-fun x173 () Bool)
(declare-fun x187 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x54 () Bool)
(declare-fun x184 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x37 () Bool)
(declare-fun x145 () (_ BitVec 256))
(declare-fun x82 () (_ BitVec 256))
(declare-fun x141 () (_ BitVec 256))
(declare-fun x34 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x193 () (_ BitVec 256))
(declare-fun x202 () Bool)
(declare-fun x175 () Bool)
(declare-fun x72 () Bool)
(declare-fun x155 () Bool)
(declare-fun x170 () Bool)
(declare-fun x49 () Bool)
(declare-fun x14 () (_ BitVec 256))
(declare-fun x16 () Bool)
(declare-fun x23 () Bool)
(declare-fun x205 () Bool)
(declare-fun x22 () Bool)
(declare-fun x42 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x108 () Bool)
(declare-fun x195 () Bool)
(declare-fun x1 ((_ BitVec 256)) Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x57 () Bool)
(declare-fun x4 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x201 () Bool)
(declare-fun x203 () Bool)
(declare-fun x163 () Bool)
(declare-fun x104 () Bool)
(declare-fun x158 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x77 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x24 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x51 () Bool)
(declare-fun x81 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x116 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x17 () Bool)
(declare-fun x196 () Bool)
(declare-fun x119 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x153 () Bool)
(declare-fun x197 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x111 () Bool)
(declare-fun x65 () Bool)
(declare-fun x32 () Bool)
(declare-fun x78 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x9 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x161 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x178 () Bool)
(declare-fun x132 () Bool)
(declare-fun x209 () Bool)
(declare-fun x156 () (_ BitVec 256))
(declare-fun x112 () Bool)
(declare-fun x147 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x74 () Bool)
(declare-fun x134 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x138 () Bool)
(declare-fun x200 () (_ BitVec 256))
(declare-fun x164 () Bool)
(declare-fun x110 () Bool)
(declare-fun x89 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x114 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x167 () Bool)
(declare-fun x5 () (_ BitVec 256))
(declare-fun x165 () (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x150 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x208 () Bool)
(declare-fun x12 () Bool)
(declare-fun x66 () (_ BitVec 256))
(declare-fun x142 () Bool)
(declare-fun x185 () Bool)
(declare-fun x191 () Bool)
(declare-fun x48 () Bool)
(declare-fun x61 () Bool)
(declare-fun x41 () (_ BitVec 256))
(declare-fun x103 () Bool)
(declare-fun x29 () Bool)
(declare-fun x7 () Bool)
(declare-fun x98 () Bool)
(declare-fun x86 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x10 () Bool)
(declare-fun x28 () Bool)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x31 () (_ BitVec 256))
(declare-fun x53 () Bool)
(declare-fun x136 () Bool)
(declare-fun x87 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x56 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x93 () Bool)
(declare-fun x144 () (_ BitVec 256))
(declare-fun x88 () Bool)
(declare-fun x2 () (_ BitVec 256))
(declare-fun x174 () Bool)
(declare-fun x206 () Bool)
(declare-fun x50 () Bool)
(declare-fun x135 () Bool)
(declare-fun x159 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x30 () Bool)
(declare-fun x107 () Bool)
(declare-fun x160 () (_ BitVec 256))
(declare-fun x39 () Bool)
(declare-fun x76 () Bool)
(declare-fun x118 () Bool)
(declare-fun x115 () Bool)
(declare-fun x139 () Bool)
(declare-fun x199 () Bool)
(declare-fun x113 () Bool)
(declare-fun x123 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x214 () Bool)
(declare-fun x91 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x162 () Bool)
(declare-fun x148 () (_ BitVec 256))
(declare-fun x179 () Bool)
(declare-fun x117 () Bool)
(declare-fun x73 () Bool)
(declare-fun x19 () Bool)
(declare-fun x189 () Bool)
(declare-fun x96 () Bool)
(declare-fun x210 () Bool)
(declare-fun x198 () Bool)
(declare-fun x52 () Bool)
(declare-fun x168 () Bool)
(declare-fun x146 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x83 () Bool)
(declare-fun x207 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x149 () Bool)
(declare-fun x166 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x20 () Bool)
(declare-fun x192 () Bool)
(declare-fun x124 () Bool)
(declare-fun x69 () (_ BitVec 256))
(declare-fun x80 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x21 () Bool)
(declare-fun x79 () Bool)
(declare-fun x94 () (_ BitVec 256))
(define-fun x121 ((x38 (_ BitVec 256)) (x137 (_ BitVec 256))) Bool (= x38 (bvudiv (bvmul x137 x38) x137)))
(define-fun x186 ((x38 (_ BitVec 256)) (x137 (_ BitVec 256))) Bool (= x38 (bvsdiv (bvmul x38 x137) x137)))
(define-fun x64 ((x38 (_ BitVec 256)) (x137 (_ BitVec 256))) Bool (= x38 (bvsdiv (bvmul x137 x38) x137)))
(assert (x1 (_ bv1157920892373161954235709850086879078532699846656405640394575840079131296399 256)))
(assert (= x162 (=> (and (and (= (bvudiv x84 (_ bv10000 256)) x41) (and (= x211 x41) (= (x121 x116 (_ bv2 256)) x24))) (and (= x134 x213) (= x134 x180) (= (bvmul x80 x180) x84) (= x131 (_ bv10000 256)) (= x159 x80) (= x63 false) (= x213 (bvmul x100 x158)) (= x159 x120) (x121 x158 x100))) (and (=> (and (and (and (= x182 (bvmul x116 (_ bv2 256))) (= (bvslt x69 (_ bv0 256)) x22) (x121 x116 (_ bv2 256))) (or (and (= x106 x69) (not x22)) (and (and (= x81 x106) (= (bvadd (_ bv0 256) (bvneg x69)) x81)) x22))) x24) x206) (=> (not x24) x117)))))
(assert (= (x56 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x56 (_ bv10000000000000000000000 256))))
(assert (= x35 (or (and (not x11) x108) (and x110 (not x155)))))
(assert (= x118 (and x60 x170)))
(assert (= (=> (or x97 (not x97)) x140) x147))
(assert (= (x56 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (= x8 true))
(assert (= x102 (and x190 x133)))
(assert (= (x56 (_ bv79228162514264337593543950335 256)) (_ bv0 256)))
(assert (= x49 (and x192 x97)))
(assert (= (and x61 x93) x60))
(assert (= (or x35 (and x98 (not x138)) (and (not x74) x102) (and x83 x99) (and (not x167) x30) x179 (and (not x201) x164) (and (not x129) x210) (and x60 (not x170)) (and (not x199) x209) (and (not x119) x21) (and (not x19) x139) (and (not x24) x118) (and (not x17) x57) (and x8 (not x73))) x203))
(assert (x1 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (x1 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x57 (and x167 x30)))
(assert (= x142 (and x22 x16)))
(assert (= x68 (=> (and (= (bvmul (_ bv4 256) x89) x120) (= (x121 x89 x116) x61) (= x100 (bvadd (bvneg x116) (_ bv100 256)))) (and (=> (not x61) x117) (=> (and (and (= x170 (x121 x158 x100)) (= x9 x158) (= (bvmul x89 x116) x9) (x121 x89 x116)) x61) (and (=> (not x170) x117) (=> x170 x162)))))))
(assert (x1 (_ bv1000000000000000000 256)))
(assert (= (x56 (_ bv1157920892373161954235709850086879078532699846656405640394575840079131296399 256)) (_ bv0 256)))
(assert (= x168 (=> (and (and (= x152 x148) (= x145 x141) (= x212 x152) (= x59 (bvmul x66 (_ bv10000000000000000000000 256))) (= false x113) (= x177 (_ bv10000000000000000000000 256)) (= x141 x66)) (and (and (= x75 x154) (= x190 (bvugt x116 (_ bv50 256)))) (= (bvudiv x59 x212) x154))) (and (=> (and x190 (= x74 (x121 x116 (_ bv2 256)))) (and (=> (not x74) x117) (=> (and (and (= (bvadd (bvneg (_ bv100 256)) x144) x176) (x121 x116 (_ bv2 256)) (= x36 x176) (= (bvmul x116 (_ bv2 256)) x144)) x74) x197))) (=> (and (not x190) (= (x121 x116 (_ bv2 256)) x119)) (and (=> (and (and (= x114 x36) (= (bvmul x116 (_ bv2 256)) x166) (x121 x116 (_ bv2 256)) (= (bvadd (_ bv100 256) (bvneg x166)) x114)) x119) x197) (=> (not x119) x117)))))))
(assert (= x23 (and x201 x164)))
(assert (= (and (not x202) x28) x83))
(assert (= (x56 (_ bv4294967295 256)) (_ bv0 256)))
(assert (= x21 (and x133 (not x190))))
(assert (= (=> (and (= x67 x3) (= x3 (not x97))) x67) x140))
(assert (= (and x192 (not x97)) x195))
(assert (= x93 (or x115 x54)))
(assert (= x133 (and x57 x17)))
(assert (= (or x191 x23) x108))
(assert (= (or x39 x151) x110))
(assert (= (and x153 x178) x115))
(assert (= x187 (and x86 x190)))
(assert (= x174 (or x195 x49)))
(assert (= x117 x125))
(assert (= x86 (and x153 (not x178))))
(assert (= x151 (and x102 x74)))
(assert (x1 (_ bv79228162514264337593543950335 256)))
(assert (= x209 (and x110 x155)))
(assert (= (and (not x22) x16) x149))
(assert (= x197 (=> (and (= (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x146) x72) (= (bvmul x36 x89) x146) (= (x121 x36 x89) x189) (= (and x72 x189) x155)) (and (=> (and (and (= x2 x58) (x121 x36 x89) (= (x121 x2 (_ bv1000000000000000000 256)) x199) (bvule x36 (_ bv96 256)) (= x58 (bvmul x89 x36))) x155) (and (=> (not x199) x117) (=> (and (and (= x127 (bvmul x2 (_ bv1000000000000000000 256))) (x121 x2 (_ bv1000000000000000000 256)) (= x44 (bvudiv x127 (_ bv100 256))) (= (= (_ bv0 256) x36) x178)) x199) (and (=> (and (and (= (bvudiv x75 (_ bv1000000000000000000 256)) x184) (= x69 x184)) x178) x68) (=> (and (not x178) (or (and x190 (and (= x94 (bvadd x75 (bvneg x44))) (= x5 (ite (= (_ bv0 256) x94) (_ bv0 256) (ite (= (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x94) true) (bvudiv (ite (bvugt (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256) x94) x94 (bvadd (bvneg (bvadd (bvneg (_ bv1 256)) x94)) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv1000000000000000000 256)) (bvadd (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvneg (bvadd (bvudiv (ite (bvult x94 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)) x94 (bvadd (bvneg (bvadd (bvneg (_ bv1 256)) x94)) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))) (_ bv1000000000000000000 256)) (bvneg (_ bv1 256)))))))))) (and (not x190) (and (= (bvudiv (bvadd x44 x75) (_ bv1000000000000000000 256)) x92) (= x5 x92))))) x105))))) (=> (not x155) x125)))))
(assert (= x16 (and x24 x118)))
(assert (= (x56 (_ bv2821281694 256)) (_ bv0 256)))
(assert (x1 (_ bv10000000000000000000000 256)))
(assert (x1 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256)))
(assert (x1 (_ bv4294967295 256)))
(assert (=> (bvuge (_ bv10000 256) x123) (= (x56 x123) (_ bv0 256))))
(assert (= x39 (and x119 x21)))
(assert (= x117 (=> (and (= true x79) (= x97 x79)) x147)))
(assert (= x192 (or x29 x203)))
(assert (= (and x199 x209) x153))
(assert (= (and x19 x139) x98))
(assert (= (and x28 x202) x164))
(assert (= x20 (and (not x190) x86)))
(assert (= x28 (and x138 x98)))
(assert (= (=> (and (= (and x12 x52) x11) (= (bvmul (_ bv100 256) x87) x90) (= x52 (x121 x87 (_ bv100 256))) (= (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x90) x12)) (and (=> (not x11) x125) (=> (and (and (= (bvmul x87 (_ bv100 256)) x18) (bvuge (_ bv1157920892373161954235709850086879078532699846656405640394575840079131296399 256) x87) (= x42 (bvudiv x18 x182)) (x121 x87 (_ bv100 256)) (= x55 x97) (= (bvand (_ bv79228162514264337593543950335 256) x42) x194) (= false x55)) x11) x147))) x37))
(assert (= (and x11 x108) x29))
(assert (= (and (not x61) x93) x179))
(assert (= (x56 (_ bv79228162514264337593543950334 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x56 (_ bv1000000000000000000 256))))
(assert (= x185 (=> (and (and (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x82) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x204) (= x82 (bvmul x27 x160)) x132 (= x204 x160) (= (bvmul x193 x207) x70) (= x126 x204) (= x183 x200) (= x122 x204) (= x156 x204) (bvule x161 (bvadd x161 x211)) (= (bvadd x211 x161) x13) (= x124 (bvult x62 x70)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x13) (bvule (_ bv0 256) x82) (= x193 (bvadd (_ bv1 256) x122)) (bvuge x13 (_ bv0 256)) (bvule (_ bv0 256) x204) x124 (= (bvadd x156 (_ bv1 256)) x207) (= x27 x204) (= x157 x200) (= x132 (bvule x82 x183)) (= x62 x200) (= x157 x13)) (and (= x181 x126) (= (bvslt x69 (_ bv0 256)) x202))) (and (=> (and (not x202) (= (bvult x181 x106) x99)) (and (=> x99 x117) (=> (and (and (= (bvadd (bvneg x106) x181) x25) (= x87 x25)) (not x99)) x37))) (=> (and x202 (and (= (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) (bvadd x106 x181)) x198) (= (bvuge (bvadd x181 x106) x181) x65) (= (and x65 x198) x201))) (and (=> (not x201) x117) (=> (and (and (= x71 (bvadd x106 x181)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x71) (bvule (_ bv0 256) x71) (bvule x181 (bvadd x181 x106)) (= x71 x87)) x201) x37)))))))
(assert (= (=> (= x69 x5) x68) x105))
(assert (= x54 (or x20 x187)))
(assert (x1 (_ bv79228162514264337593543950334 256)))
(assert (= x191 (and x83 (not x99))))
(assert (= x210 (and x8 x73)))
(assert (= x139 (or x149 x142)))
(assert (= x206 (=> (and (= x78 (bvmul x106 x106)) (= (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x78) x7) (= (and x7 x104) x19) (= (x121 x106 x106) x104)) (and (=> (not x19) x117) (=> (and (and (= (bvmul x106 x106) x128) (x121 x106 x106) (bvuge x128 (_ bv0 256)) (= x136 (bvule x161 (bvadd x161 x211))) (bvule x128 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (= x161 x128) (= (and x196 x136) x138) (= x196 (bvule (bvadd x161 x211) (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))) x19) (and (=> (not x138) x117) (=> x138 x185)))))))
(assert (= (_ bv0 256) (x56 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819968 256))))
(assert (x1 (_ bv2821281694 256)))
(assert (not x32))
(assert (= x30 (and x129 x210)))
(assert (= x32 (=> (and (and (and (= x116 x91) (and (= x89 x165) (and (= x33 x148) (= x73 true) (= (x171 x123) x45) (bvule (_ bv1 256) x45) (= x150 (_ bv2821281694 256)) (= x145 x6)))) (= x26 x148)) (and (bvuge (_ bv79228162514264337593543950334 256) x14) (bvule (_ bv2 256) x46) (bvuge (_ bv98 256) x85) (= x101 x46) (= x40 (bvult (_ bv0 256) (x171 x123))) x40 (bvule x123 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv132 256) x95) x15 (= x15 (bvult x109 x101)) (= x91 x85) (bvuge x14 (_ bv1 256)) (bvule x46 (_ bv79228162514264337593543950335 256)) (= x169 x26) (bvule (_ bv2 256) x85) (bvuge (_ bv4294967295 256) x169) (= x14 x6) (= x109 x14) (bvule (_ bv1 256) x123) (bvule (_ bv1 256) x169) (= x165 x46))) (and (=> (not x73) x117) (=> (and (and (= x129 true) (= x31 x116)) x73) (and (=> (and x129 (and (= x89 x47) (= true x167))) (and (=> (not x167) x117) (=> (and (and (= x145 x172) (= x17 true)) x167) (and (=> x17 x168) (=> (not x17) x117))))) (=> (not x129) x117)))))))
(check-sat)
(exit)
