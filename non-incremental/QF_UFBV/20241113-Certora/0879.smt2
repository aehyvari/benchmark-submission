(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x245 () (_ BitVec 256))
(declare-fun x128 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x16 () (_ BitVec 256))
(declare-fun x132 () Bool)
(declare-fun x176 () Bool)
(declare-fun x45 () (_ BitVec 256))
(declare-fun x248 ((_ BitVec 256)) Bool)
(declare-fun x71 () Bool)
(declare-fun x122 () Bool)
(declare-fun x149 () (_ BitVec 256))
(declare-fun x272 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x60 () Bool)
(declare-fun x19 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x3 () Bool)
(declare-fun x36 () (_ BitVec 256))
(declare-fun x6 () Bool)
(declare-fun x252 () Bool)
(declare-fun x264 () (_ BitVec 256))
(declare-fun x283 () (_ BitVec 256))
(declare-fun x302 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x24 () (_ BitVec 256))
(declare-fun x320 () Bool)
(declare-fun x251 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x332 () Bool)
(declare-fun x236 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x130 () Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x5 () Bool)
(declare-fun x126 () Bool)
(declare-fun x115 () (_ BitVec 256))
(declare-fun x136 () (_ BitVec 256))
(declare-fun x322 () Bool)
(declare-fun x295 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x10 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x312 () (_ BitVec 256))
(declare-fun x20 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x260 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x187 () Bool)
(declare-fun x230 () Bool)
(declare-fun x121 () (_ BitVec 256))
(declare-fun x141 () Bool)
(declare-fun x1 () Bool)
(declare-fun x174 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x166 () Bool)
(declare-fun x217 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x124 () Bool)
(declare-fun x39 () Bool)
(declare-fun x15 () (_ BitVec 256))
(declare-fun x197 () Bool)
(declare-fun x82 () (_ BitVec 256))
(declare-fun x309 () Bool)
(declare-fun x191 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x262 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x250 () (_ BitVec 256))
(declare-fun x331 () (_ BitVec 256))
(declare-fun x286 () (_ BitVec 256))
(declare-fun x271 () Bool)
(declare-fun x51 () (_ BitVec 256))
(declare-fun x307 () (_ BitVec 256))
(declare-fun x276 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x129 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x225 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x306 () Bool)
(declare-fun x270 () Bool)
(declare-fun x222 () Bool)
(declare-fun x47 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x285 () Bool)
(declare-fun x17 () (_ BitVec 256))
(declare-fun x314 () (_ BitVec 256))
(declare-fun x253 () (_ BitVec 256))
(declare-fun x106 () (_ BitVec 256))
(declare-fun x219 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x23 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x321 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x244 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x38 () Bool)
(declare-fun x303 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x107 () Bool)
(declare-fun x185 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x242 () (_ BitVec 256))
(declare-fun x258 () (_ BitVec 256))
(declare-fun x311 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x86 () Bool)
(declare-fun x56 () (_ BitVec 256))
(declare-fun x29 () Bool)
(declare-fun x170 () (_ BitVec 256))
(declare-fun x308 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x4 () Bool)
(declare-fun x279 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x100 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x273 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x99 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x152 () Bool)
(declare-fun x148 () Bool)
(declare-fun x125 () (_ BitVec 256))
(declare-fun x68 () Bool)
(declare-fun x288 () Bool)
(declare-fun x238 () (_ BitVec 256))
(declare-fun x74 () (_ BitVec 256))
(declare-fun x25 () (_ BitVec 256))
(declare-fun x168 () (_ BitVec 256))
(declare-fun x274 () (_ BitVec 256))
(declare-fun x79 () Bool)
(declare-fun x37 () (_ BitVec 256))
(declare-fun x75 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x324 () Bool)
(declare-fun x326 () (_ BitVec 256))
(declare-fun x78 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x2 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x282 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x246 () (_ BitVec 256))
(declare-fun x146 () Bool)
(declare-fun x213 () (_ BitVec 256))
(declare-fun x292 () Bool)
(declare-fun x85 () (_ BitVec 256))
(declare-fun x317 () (_ BitVec 256))
(declare-fun x325 () (_ BitVec 256))
(declare-fun x224 () Bool)
(declare-fun x275 () Bool)
(declare-fun x327 () Bool)
(declare-fun x284 () Bool)
(declare-fun x195 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x211 () Bool)
(declare-fun x310 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x318 () (_ BitVec 256))
(declare-fun x330 () Bool)
(declare-fun x243 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x91 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x44 () Bool)
(declare-fun x188 () (_ BitVec 256))
(declare-fun x104 () Bool)
(declare-fun x214 () (_ BitVec 256))
(declare-fun x22 () Bool)
(declare-fun x57 () (_ BitVec 256))
(declare-fun x296 () (_ BitVec 256))
(declare-fun x144 () Bool)
(declare-fun x184 () Bool)
(declare-fun x223 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x119 () (_ BitVec 256))
(declare-fun x287 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x294 () (_ BitVec 256))
(declare-fun x160 () (_ BitVec 256))
(declare-fun x304 () (_ BitVec 256))
(declare-fun x181 () (_ BitVec 256))
(declare-fun x280 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x290 () Bool)
(declare-fun x92 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x293 () Bool)
(declare-fun x256 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x11 () Bool)
(declare-fun x139 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x269 () Bool)
(declare-fun x237 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x87 () Bool)
(declare-fun x179 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x291 () Bool)
(declare-fun x58 () Bool)
(declare-fun x199 () Bool)
(declare-fun x226 () (_ BitVec 256))
(declare-fun x202 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x27 () (_ BitVec 256))
(declare-fun x329 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x319 () (_ BitVec 256))
(declare-fun x206 () Bool)
(declare-fun x169 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x316 () (_ BitVec 256))
(declare-fun x267 () Bool)
(declare-fun x198 () (_ BitVec 256))
(declare-fun x203 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x40 () Bool)
(declare-fun x18 () Bool)
(declare-fun x83 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x70 () (_ BitVec 256))
(declare-fun x259 () (_ BitVec 256))
(declare-fun x193 () Bool)
(declare-fun x80 () (_ BitVec 256))
(declare-fun x254 () Bool)
(declare-fun x21 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x277 () Bool)
(declare-fun x231 () (_ BitVec 256))
(declare-fun x305 () Bool)
(declare-fun x209 () (_ BitVec 256))
(declare-fun x241 () Bool)
(declare-fun x257 () Bool)
(declare-fun x212 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x151 () Bool)
(declare-fun x266 () (_ BitVec 256))
(declare-fun x315 () (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x84 () Bool)
(declare-fun x33 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x41 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x110 () Bool)
(declare-fun x46 () Bool)
(declare-fun x13 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x240 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x105 () Bool)
(declare-fun x30 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x255 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x249 () Bool)
(declare-fun x278 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x63 () Bool)
(declare-fun x328 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x247 () (_ BitVec 256))
(declare-fun x333 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x89 () (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x301 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x94 () Bool)
(declare-fun x133 () Bool)
(declare-fun x172 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x69 () Bool)
(declare-fun x300 () Bool)
(declare-fun x281 () (_ BitVec 256))
(declare-fun x131 () (_ BitVec 256))
(declare-fun x261 () (_ BitVec 256))
(declare-fun x72 () Bool)
(declare-fun x227 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x216 () Bool)
(declare-fun x298 () Bool)
(declare-fun x114 () Bool)
(declare-fun x265 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x67 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(define-fun x207 ((x323 (_ BitVec 256)) (x228 (_ BitVec 256))) Bool (= x323 (bvudiv (bvmul x228 x323) x228)))
(define-fun x239 ((x323 (_ BitVec 256)) (x228 (_ BitVec 256))) Bool (= x323 (bvsdiv (bvmul x323 x228) x228)))
(define-fun x297 ((x323 (_ BitVec 256)) (x228 (_ BitVec 256))) Bool (= x323 (bvsdiv (bvmul x228 x323) x228)))
(define-fun x48 ((x123 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x154 ((x123 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x208 ((x123 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x299 ((x123 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x153 ((x123 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x158 ((x123 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x233 ((x123 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x109 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 x262) x33 (x212 x123)))
(define-fun x32 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 x80) x56 (x109 x123)))
(define-fun x229 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 (_ bv128 256)) x157 (x153 x123)))
(define-fun x159 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite x124 (ite x100 (x153 x123) (x229 x123)) (x153 x123)))
(define-fun x289 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 (_ bv128 256)) x245 (x159 x123)))
(define-fun x12 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite x321 (x159 x123) (x289 x123)))
(define-fun x235 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x123) x315 (x12 x123)))
(define-fun x7 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x123) x307 (x235 x123)))
(define-fun x150 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite x18 (x12 x123) (x7 x123)))
(define-fun x9 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv164 256) x123) x280 (x48 x123)))
(define-fun x101 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv196 256) x123) x181 (x9 x123)))
(define-fun x263 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x123) x175 (x101 x123)))
(define-fun x43 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 (_ bv128 256)) (_ bv100 256) (x154 x123)))
(define-fun x164 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x123) x250 (x263 x123)))
(define-fun x8 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 (_ bv324 256)) x177 (x150 x123)))
(define-fun x161 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv356 256) x123) x25 (x8 x123)))
(define-fun x232 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 (_ bv388 256)) x333 (x161 x123)))
(define-fun x234 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 (_ bv324 256)) (_ bv32 256) (x158 x123)))
(define-fun x61 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x123) (_ bv1 256) (x243 x123)))
(define-fun x313 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x123 (_ bv356 256)) (bvult x123 (_ bv388 256))) (x61 (bvadd (bvneg (_ bv356 256)) x123)) (x233 x123)))
(define-fun x76 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 (_ bv420 256)) x246 (x232 x123)))
(define-fun x268 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite x46 (x232 x123) (ite x305 (x161 x123) (ite x252 (x8 x123) (ite x71 (x150 x123) (x76 x123))))))
(define-fun x167 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x123 x131) (_ bv0 256) (x268 x123)))
(define-fun x31 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x80 x123) x113 (x32 x123)))
(define-fun x138 ((x123 (_ BitVec 256))) (_ BitVec 256) (ite (= x149 x123) x196 (x23 x123)))
(assert (= (x174 x62) (x174 (bvadd x62 (_ bv1 256)))))
(assert (=> (bvuge (_ bv10000 256) x143) (= (x174 x143) (_ bv0 256))))
(assert (= x124 (or x146 x100)))
(assert (= x91 (=> (= (= x136 x245) x22) (and (=> (and (and (= x257 (= x186 (_ bv0 256))) (or (and (and (= x253 (bvmul x186 x238)) (= (bvadd (bvneg x136) x245) x238) (= x223 x188) (bvule (_ bv0 256) x253) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x253) (not (bvugt x238 x245)) (= (bvudiv x253 (_ bv1000000000000000000 256)) x188) (x207 x186 x238)) (not x257)) (and x257 (= (_ bv0 256) x223)))) (not x22)) x306) (=> (and (= x307 (_ bv0 256)) x22) x107)))))
(assert (= (_ bv0 256) (x174 (_ bv2432040568 256))))
(assert (= (_ bv0 256) (x174 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (=> (bvuge (_ bv10000 256) x85) (= (_ bv0 256) (x174 x85))))
(assert (= (x41 (_ bv64 256) x315 (_ bv0 256)) (x174 (x41 (_ bv64 256) x315 (_ bv0 256)))))
(assert (bvugt (x41 (_ bv64 256) x80 x27) (_ bv10000 256)))
(assert (= (and x102 (not x257)) x144))
(assert (= (or x144 x230) x126))
(assert (= x280 (x278 (x41 (_ bv64 256) x280 (_ bv2 256)))))
(assert (= x230 (and x257 x102)))
(assert (not (x248 (x41 (_ bv64 256) x312 (_ bv62 256)))))
(assert (= (x278 (x41 (_ bv64 256) x181 (_ bv2 256))) x181))
(assert (= (x174 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (_ bv0 256)))
(assert (= (_ bv2 256) (x278 (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (= x199 (or x321 x126)))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) x315 (_ bv0 256)))))
(assert (=> (bvule x315 (_ bv10000 256)) (= (x174 x315) (_ bv0 256))))
(assert (= (x83 (x41 (_ bv64 256) x280 (_ bv3 256))) (_ bv64 256)))
(assert (= x94 (or x40 x330)))
(assert (= x166 (=> (and (or (and x324 (and (= x224 true) (bvuge x168 (_ bv1 256)) (= (x21 x143) x168))) (not x324)) (and (= x274 (x21 x143)) (not (bvult x205 x242)) (= x213 (x41 (_ bv64 256) x181 (_ bv2 256))) (= x194 x65) (= (x41 (_ bv64 256) x280 (_ bv2 256)) x149) (= x219 (_ bv324 256)) (not (bvugt x175 x273)) (= x65 x129) (= x113 x331) (= x34 (_ bv100 256)) (= x217 (x234 (_ bv324 256))) (= x175 x182) (= (x31 x143) x180) (bvuge x329 (_ bv1 256)) (= (x23 x178) x273) (not (bvult x329 x134)) (not (bvugt x175 x329)) (= (_ bv324 256) x26) (= x27 (x41 (_ bv64 256) x280 (_ bv3 256))) (not (bvugt x196 x273)) (= (x32 x80) x113) (= (bvadd (bvneg (_ bv324 256)) x131) x34) (= x247 (_ bv100 256)) (bvule (_ bv1 256) x274) (= x131 (bvadd (_ bv324 256) x45)) (= (x41 (_ bv64 256) x280 (_ bv2 256)) x178) (= x142 (_ bv599290589 256)) (bvuge x273 (_ bv1 256)) (= x280 x172) (= x324 (= (_ bv0 256) x217)) (not (bvult x205 x242)) (= x134 (bvadd (bvneg x175) x329)) (= (bvadd (bvneg x175) x273) x196) (= x42 x182) (= x329 (x303 x77)) (= (_ bv1 256) x264) (= x172 x13) (= x266 x180) (= x242 (x138 x213)) (= (x41 (_ bv64 256) x80 x27) x77) (= x205 (bvadd x242 x175)) (= (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x98))) x90)))
(assert (= (and x298 x332) x152))
(assert (not (x248 (x41 (_ bv64 256) x171 (_ bv62 256)))))
(assert (= (x278 (x41 (_ bv64 256) x280 (_ bv3 256))) x280))
(assert (= (x278 (x41 (_ bv64 256) x260 (_ bv62 256))) x260))
(assert (= x315 (x278 (x41 (_ bv64 256) x315 (_ bv0 256)))))
(assert (not (x248 (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (= (_ bv69 256) (x255 (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (= (x255 (x41 (_ bv64 256) x280 (_ bv3 256))) (_ bv3 256)))
(assert (= (and x298 (not x332)) x254))
(assert (= x315 (x278 (x41 (_ bv64 256) x315 (_ bv61 256)))))
(assert (= (x174 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= true x270))
(assert (x248 (_ bv4294967295 256)))
(assert (= x85 (x278 (x41 (_ bv64 256) x85 (_ bv62 256)))))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) x315 x201))))
(assert (= x292 (or x18 x122)))
(assert (= (x41 (_ bv64 256) x312 (_ bv62 256)) (x174 (x41 (_ bv64 256) x312 (_ bv62 256)))))
(assert (= (x174 (x41 (_ bv64 256) x171 (_ bv62 256))) (x41 (_ bv64 256) x171 (_ bv62 256))))
(assert (bvugt (x41 (_ bv64 256) x80 (_ bv60 256)) (_ bv10000 256)))
(assert (= (_ bv0 256) (x255 (x41 (_ bv64 256) x315 (_ bv0 256)))))
(assert (= (and x254 (not x285)) x330))
(assert (= (and x60 x3) x100))
(assert (bvugt (x41 (_ bv64 256) x315 x201) (_ bv10000 256)))
(assert (= (and (not x277) x270) x200))
(assert (= (and x285 x254) x40))
(assert (= (x83 (x41 (_ bv64 256) x280 (_ bv2 256))) (_ bv64 256)))
(assert (not (x248 (x41 (_ bv64 256) x85 (_ bv62 256)))))
(assert (= x327 (=> (and (and (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x103) (bvule x88 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x95 (_ bv0 256)) (not (= x143 x80)) (bvuge x103 (_ bv0 256)) (bvuge x97 (_ bv0 256)) (bvule (_ bv0 256) x240) (bvule x259 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x240) (bvule x311 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv4294967295 256) x135) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x328) (bvule x147 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x244 (_ bv36 256)) (bvuge x316 (_ bv0 256)) (bvule (_ bv0 256) x35) (bvule x66 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x88 (_ bv0 256)) (bvule x2 (_ bv4294967295 256)) (bvuge x80 (_ bv1 256)) x287 (bvule x80 (_ bv1461501637330902918203684832716283019655932542975 256)) (= x259 x54) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x143) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x209) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x97) (bvuge x304 (_ bv0 256)) (= (bvugt (x21 x80) (_ bv0 256)) x92) (bvule x35 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule (_ bv0 256) x209) x92 (bvuge x259 (_ bv0 256)) (bvule (_ bv0 256) x169) (bvule (_ bv0 256) x190) (bvule x190 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge x143 (_ bv1 256)) (bvuge x328 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x170) (= (bvult (_ bv0 256) (x21 x143)) x133) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x155) x133 (bvule x316 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x95) (bvuge x89 (_ bv0 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x169) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x304) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x218) (bvuge x311 (_ bv0 256)) (bvule x89 (_ bv4294967295 256)) (bvule (_ bv0 256) x170) (bvule (_ bv0 256) x155) (bvule (_ bv0 256) x218) (= x287 (= x135 x2)) (bvuge x135 (_ bv1 256)) (bvule (_ bv1 256) x2) (bvuge x147 (_ bv100 256)) (= x318 (_ bv0 256)) (bvule (_ bv0 256) x66)) (and (and (and (and (and (= (x109 x80) x258) (= x119 x16) (= (x19 x118) x136) (= x129 x121) (= x51 (x21 x80)) (= (_ bv2 256) x30) (= (bvadd x62 (_ bv1 256)) x251) (= (x47 x251) x325) (bvuge x51 (_ bv1 256)) (= x160 (bvadd (bvneg x116) x73)) (= x294 (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (= x201 (bvadd x62 (_ bv2 256))) (= x258 x56) (= x70 x279) (= (x41 (_ bv64 256) x80 (_ bv60 256)) x62) (= (x212 x262) x33) (= x156 x33) (= (x310 x192) x186) (= x227 x301) (= x192 (x41 (_ bv64 256) x315 (_ bv0 256))) (= (_ bv553353397 256) x296) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x119) (bvule x116 (_ bv340282366920938463463374607431768211455 256)) (= (x225 x294) x119) (= x118 (x41 (_ bv64 256) x315 x201)) (bvule x186 (_ bv20282409603651670423947251286015 256)) (= x302 (_ bv0 256)) (= (bvult (_ bv0 256) x160) x277) (= x116 (x78 x62)) (= x103 x262)) (= x73 x2)) (= x16 x103)) (and (= x70 x52) (= x181 (x128 (_ bv36 256))) (= x14 x85) (= x72 (bvult (_ bv0 256) x74)) (= x315 (x128 (_ bv4 256))) (= x121 x181) (= (x21 x80) x59) (= x37 (_ bv1145441982 256)) (bvule x315 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x74 (_ bv1099511627775 256)) (bvule (_ bv1 256) x59) (= x85 x112) x295 (= x295 (or (not x4) x72)) (= x74 (x179 x173)) (bvule x181 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x128 (_ bv68 256)) x52) (= x315 x301) (bvule (_ bv1 256) x52) (= x173 (x41 (_ bv64 256) x85 (_ bv62 256))))) (and (= x4 (bvugt x120 (_ bv0 256))) (bvule (_ bv1 256) x17) (= x137 (_ bv2432040568 256)) (= x117 (_ bv36 256)) (= x145 x260) (= x120 (x236 x220)) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x120) (= x220 (x41 (_ bv64 256) x260 (_ bv62 256))) (= x14 x259) (= x17 (x21 x80)) (= x260 x54)))) (and (=> (and (and (or (and (not x99) (= (= x116 x73) x184)) (and (= x184 x99) x99)) (and (= x36 (x265 x62)) (= x99 (ite (= x36 (_ bv0 256)) (= (_ bv0 256) x36) (= (_ bv0 256) x204))) (bvuge (_ bv340282366920938463463374607431768211455 256) x36))) x277) x75) (=> (and (not x277) (= x325 x245)) x91)))))
(assert (= (x174 (_ bv340282366920938463463374607431768211455 256)) (_ bv0 256)))
(assert (= (and x292 x104) x132))
(assert (x248 (_ bv599290589 256)))
(assert (=> (bvule x262 (_ bv10000 256)) (= (x174 x262) (_ bv0 256))))
(assert (= (x41 (_ bv64 256) x280 (_ bv3 256)) (x174 (x41 (_ bv64 256) x280 (_ bv3 256)))))
(assert (x248 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (=> (and (or x60 (not x60)) (= (= x157 x325) x60)) x276) x6))
(assert (= (and x199 x193) x18))
(assert (= (and (not x99) x39) x271))
(assert (not (x248 (x41 (_ bv64 256) x260 (_ bv62 256)))))
(assert (x248 (_ bv1000000000000000000 256)))
(assert (= (=> (= x332 (ite x184 x184 (not (bvult x116 x15)))) (and (=> (and x332 (= x325 x157)) x6) (=> (and (not x332) (and (= x285 (bvult x15 x73)) (or (and x285 (= x53 x15)) (and (= x53 x73) (not x285))))) x140))) x75))
(assert (=> (bvuge (_ bv10000 256) x280) (= (x174 x280) (_ bv0 256))))
(assert (= (x255 (x41 (_ bv64 256) x315 x201)) x201))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) x260 (_ bv62 256)))))
(assert (= (x83 (x41 (_ bv64 256) x171 (_ bv62 256))) (_ bv64 256)))
(assert (= x39 (and x277 x270)))
(assert (= (_ bv0 256) (x174 (_ bv1145441982 256))))
(assert (= (and x29 (not x22)) x102))
(assert (= (and x322 x288) x210))
(assert (= (_ bv0 256) (x174 (_ bv4294967295 256))))
(assert (= (x174 (_ bv1099511627775 256)) (_ bv0 256)))
(assert (= (x174 (x41 (_ bv64 256) x315 (_ bv61 256))) (x41 (_ bv64 256) x315 (_ bv61 256))))
(assert (bvugt (x41 (_ bv64 256) x171 (_ bv62 256)) (_ bv10000 256)))
(assert (not (x248 (x41 (_ bv64 256) x315 x201))))
(assert (= (and x199 (not x193)) x122))
(assert (= (x278 (x41 (_ bv64 256) x80 (_ bv60 256))) x80))
(assert (bvugt (x41 (_ bv64 256) x315 (_ bv61 256)) (_ bv10000 256)))
(assert (= x71 (and x292 (not x104))))
(assert (= (and x210 x320) x38))
(assert (= (x255 (x41 (_ bv64 256) x312 (_ bv62 256))) (_ bv62 256)))
(assert (= (x278 (x41 (_ bv64 256) x312 (_ bv62 256))) x312))
(assert (= x68 (and x110 x324)))
(assert (bvugt (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256)) (_ bv10000 256)))
(assert (x248 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) x80 (_ bv60 256)))))
(assert (= (x41 (_ bv64 256) x181 (_ bv2 256)) (x174 (x41 (_ bv64 256) x181 (_ bv2 256)))))
(assert (= (x41 (_ bv64 256) x280 (_ bv2 256)) (x174 (x41 (_ bv64 256) x280 (_ bv2 256)))))
(assert (= x206 (=> (and (= x282 (not (bvult (_ bv128 256) x45))) (= x246 (x164 (_ bv256 256)))) (and x282 x166))))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256)))))
(assert (x248 (_ bv20282409603651670423947251286015 256)))
(assert (x248 (_ bv1099511627775 256)))
(assert (= (_ bv0 256) (x174 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256))))
(assert (x248 (_ bv1145441982 256)))
(assert (= (x255 (x41 (_ bv64 256) x85 (_ bv62 256))) (_ bv62 256)))
(assert (= (x255 (x41 (_ bv64 256) x80 x27)) x27))
(assert (= (x174 (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256))) (x41 (_ bv64 256) (_ bv2 256) (_ bv69 256))))
(assert (= (_ bv61 256) (x255 (x41 (_ bv64 256) x315 (_ bv61 256)))))
(assert (= (x174 (_ bv599290589 256)) (_ bv0 256)))
(assert (= (_ bv60 256) (x255 (x41 (_ bv64 256) x80 (_ bv60 256)))))
(assert (bvugt (x41 (_ bv64 256) x280 (_ bv2 256)) (_ bv10000 256)))
(assert (= x110 (or x46 x252 x305 x71 x38)))
(assert (not (x248 (x41 (_ bv64 256) x280 (_ bv3 256)))))
(assert (=> (bvule x171 (_ bv10000 256)) (= (x174 x171) (_ bv0 256))))
(assert (= (and x288 (not x322)) x305))
(assert (= (_ bv0 256) (x174 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) x181 (_ bv2 256)))))
(assert (= (x174 (_ bv20282409603651670423947251286015 256)) (_ bv0 256)))
(assert (= x46 (and x210 (not x320))))
(assert (= x69 (and x39 x99)))
(assert (x248 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x255 (x41 (_ bv64 256) x280 (_ bv2 256))) (_ bv2 256)))
(assert (x248 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= x306 (=> (= x223 x307) x107)))
(assert (= x107 (=> (and (and (not (bvugt x237 (bvadd x307 x237))) (= (bvadd x237 x307) x139) (= x193 (= (_ bv0 256) x307)) (= (x195 x93) x237) (= (x41 (_ bv64 256) x315 (_ bv61 256)) x93)) (or (not x193) x193)) x290)))
(assert (= (and x267 x269) x241))
(assert (=> (bvule x312 (_ bv10000 256)) (= (_ bv0 256) (x174 x312))))
(assert (bvult (_ bv10000 256) (x41 (_ bv64 256) x181 (_ bv2 256))))
(assert (= (x174 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (bvult (_ bv10000 256) (x41 (_ bv64 256) x85 (_ bv62 256))))
(assert (= x140 (=> (and (= x203 (bvmul (_ bv1000000000000000000 256) x163)) (bvule (_ bv0 256) x49) (bvule x49 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= (= x163 (_ bv0 256)) x151) (= x125 x157) (x207 x36 x231) (= x231 (bvadd (bvneg x116) x53)) (not (bvult x53 x231)) (= (bvadd x325 x314) x125) (not (bvult (bvadd x314 x325) x314)) (= x314 (bvudiv x203 x204)) (= (bvmul x231 x36) x49) (bvule (_ bv1 256) x204) (or x151 x197) (= x49 x163) (= (= (_ bv1000000000000000000 256) x226) x197) (= x226 (bvudiv x203 x163))) x6)))
(assert (bvugt (x41 (_ bv64 256) x280 (_ bv3 256)) (_ bv10000 256)))
(assert (not x327))
(assert (not (x248 (x41 (_ bv64 256) x280 (_ bv2 256)))))
(assert (not (x248 (x41 (_ bv64 256) x315 (_ bv0 256)))))
(assert (not (x248 (x41 (_ bv64 256) x315 (_ bv61 256)))))
(assert (= (x174 (_ bv553353397 256)) (_ bv0 256)))
(assert (= x321 (and x22 x29)))
(assert (= (=> (and (and (and (= x189 x171) (bvule (_ bv1 256) x183) (= x171 x326) (= (x179 x319) x50) (bvuge (_ bv1099511627775 256) x50) (= x87 (or x63 (not x293))) (= x183 (x21 x80)) (= x319 (x41 (_ bv64 256) x171 (_ bv62 256))) (= (bvult (_ bv0 256) x50) x63) (= (_ bv1145441982 256) x57)) (and (= x312 x281) (= (bvugt x106 (_ bv0 256)) x293) (bvuge x202 (_ bv1 256)) (= x202 (x21 x80)) (= x259 x189) (= x312 x108) (= (_ bv36 256) x286) (= x106 (x236 x221)) (bvuge (_ bv105312291668557186697918027683670432318895095400549111254310977535 256) x106) (= x215 (_ bv2432040568 256)) (= x221 (x41 (_ bv64 256) x312 (_ bv62 256))))) (and (= x281 x259) (= (_ bv36 256) x261))) x87) x1))
(assert (x248 (_ bv340282366920938463463374607431768211455 256)))
(assert (= (or x124 x200) x29))
(assert (= x315 (x278 (x41 (_ bv64 256) x315 x201))))
(assert (= (or x68 (and (not x324) x110)) x269))
(assert (= x290 (=> (and (= (bvand x198 (_ bv1461501637330902918203684832716283019655932542975 256)) x280) (= x175 (ite (bvult x139 x52) x139 x52)) (bvule (_ bv1 256) x175) (= x104 (bvugt x45 (_ bv0 256))) (= x45 (x43 (_ bv128 256))) (not (bvult x139 x28)) (= (_ bv260 256) x214) (= x272 (_ bv0 256)) (= x82 (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x24)) (= x250 (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x82)) (= (bvadd x139 (bvneg x175)) x28) (= (x263 (_ bv160 256)) x24) (= (_ bv128 256) x185)) (and (=> (not x104) x166) (=> (and x104 (and (= (bvult (_ bv32 256) x45) x55) (= x177 (x164 (_ bv160 256))))) (and (=> (and x55 (and (= x322 (bvugt x45 (_ bv64 256))) (= x25 (x164 (_ bv192 256))))) (and (=> (not x322) x166) (=> (and (and (= x320 (bvult (_ bv96 256) x45)) (= x333 (x164 (_ bv224 256)))) x322) (and (=> x320 x206) (=> (not x320) x166))))) (=> (not x55) x166)))))))
(assert (= (_ bv62 256) (x255 (x41 (_ bv64 256) x260 (_ bv62 256)))))
(assert (=> (bvule x260 (_ bv10000 256)) (= (_ bv0 256) (x174 x260))))
(assert (bvult (_ bv10000 256) (x41 (_ bv64 256) x260 (_ bv62 256))))
(assert (= (x174 (bvadd x62 (_ bv2 256))) (x174 x62)))
(assert (= x171 (x278 (x41 (_ bv64 256) x171 (_ bv62 256)))))
(assert (=> (bvule x80 (_ bv10000 256)) (= (_ bv0 256) (x174 x80))))
(assert (= x252 (and x132 (not x55))))
(assert (= (x41 (_ bv64 256) x260 (_ bv62 256)) (x174 (x41 (_ bv64 256) x260 (_ bv62 256)))))
(assert (= (_ bv0 256) (x174 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (= x146 (and x3 (not x60))))
(assert (= (x174 (x41 (_ bv64 256) x85 (_ bv62 256))) (x41 (_ bv64 256) x85 (_ bv62 256))))
(assert (= (=> (= x245 x157) x91) x276))
(assert (bvugt (x41 (_ bv64 256) x315 (_ bv0 256)) (_ bv10000 256)))
(assert (= (or (and (not x267) x269) x241) x11))
(assert (= x3 (or x94 x152)))
(assert (= (x255 (x41 (_ bv64 256) x181 (_ bv2 256))) (_ bv2 256)))
(assert (bvugt (x41 (_ bv64 256) x312 (_ bv62 256)) (_ bv10000 256)))
(assert (= (x83 (x41 (_ bv64 256) x80 x27)) (_ bv64 256)))
(assert (= x90 (=> (and (or (and (and (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x81) (= x81 (x234 (_ bv324 256))) (= (x313 (_ bv356 256)) x256) (bvule (_ bv32 256) x81) (= x256 (_ bv1 256))) x267) (not x267)) (and (= x267 (bvugt x317 (_ bv0 256))) (= (_ bv324 256) x96) (= x67 (_ bv324 256)) (= x317 (x234 (_ bv324 256))) (= x20 (_ bv324 256)))) x1)))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) x85 (_ bv62 256)))))
(assert (= (x278 (x41 (_ bv64 256) x80 x27)) x80))
(assert (not (x248 (x41 (_ bv64 256) x80 (_ bv60 256)))))
(assert (= (x83 (x41 (_ bv64 256) x315 (_ bv61 256))) (_ bv64 256)))
(assert (x248 (_ bv2432040568 256)))
(assert (= (_ bv62 256) (x255 (x41 (_ bv64 256) x171 (_ bv62 256)))))
(assert (= (x174 (x41 (_ bv64 256) x80 x27)) (x41 (_ bv64 256) x80 x27)))
(assert (not (x248 (x41 (_ bv64 256) x80 x27))))
(assert (= (and x55 x132) x288))
(assert (= (_ bv64 256) (x83 (x41 (_ bv64 256) x312 (_ bv62 256)))))
(assert (= (x174 (x41 (_ bv64 256) x315 x201)) (x41 (_ bv64 256) x315 x201)))
(assert (=> (bvuge (_ bv10000 256) x181) (= (x174 x181) (_ bv0 256))))
(assert (x248 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= x298 (or x69 x271)))
(assert (not (x248 (x41 (_ bv64 256) x181 (_ bv2 256)))))
(assert (= (x174 (x41 (_ bv64 256) x80 (_ bv60 256))) (x41 (_ bv64 256) x80 (_ bv60 256))))
(assert (x248 (_ bv553353397 256)))
(assert (x248 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(check-sat)
(exit)
