(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x37 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x92 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x90 () Bool)
(declare-fun x16 () Bool)
(declare-fun x61 () Bool)
(declare-fun x131 () Bool)
(declare-fun x58 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x28 ((_ BitVec 256)) Bool)
(declare-fun x43 () (_ BitVec 256))
(declare-fun x147 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x152 () (_ BitVec 256))
(declare-fun x10 () Bool)
(declare-fun x55 () (_ BitVec 256))
(declare-fun x134 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x196 () (_ BitVec 256))
(declare-fun x119 () (_ BitVec 256))
(declare-fun x85 () (_ BitVec 256))
(declare-fun x111 () Bool)
(declare-fun x103 () (_ BitVec 256))
(declare-fun x54 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x183 () (_ BitVec 256))
(declare-fun x56 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x49 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x193 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x120 () (_ BitVec 256))
(declare-fun x35 () Bool)
(declare-fun x30 () Bool)
(declare-fun x195 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x78 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x5 () (_ BitVec 256))
(declare-fun x36 () Bool)
(declare-fun x114 () Bool)
(declare-fun x14 () Bool)
(declare-fun x80 () Bool)
(declare-fun x122 () Bool)
(declare-fun x40 () (_ BitVec 256))
(declare-fun x19 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x71 () (_ BitVec 256))
(declare-fun x168 () Bool)
(declare-fun x8 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x190 () Bool)
(declare-fun x62 () Bool)
(declare-fun x126 () (_ BitVec 256))
(declare-fun x169 () (_ BitVec 256))
(declare-fun x125 () Bool)
(declare-fun x89 () Bool)
(declare-fun x50 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x192 () (_ BitVec 256))
(declare-fun x171 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x186 () (_ BitVec 256))
(declare-fun x64 () (_ BitVec 256))
(declare-fun x97 () Bool)
(declare-fun x176 () (_ BitVec 256))
(declare-fun x41 () (_ BitVec 256))
(declare-fun x65 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x52 () (_ BitVec 256))
(declare-fun x117 () Bool)
(declare-fun x33 () Bool)
(declare-fun x53 () (_ BitVec 256))
(declare-fun x99 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x25 () Bool)
(declare-fun x181 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x60 () (_ BitVec 256))
(declare-fun x110 () (_ BitVec 256))
(declare-fun x180 () Bool)
(declare-fun x22 () (_ BitVec 256))
(declare-fun x172 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x158 () Bool)
(declare-fun x95 () (_ BitVec 256))
(declare-fun x51 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x154 () Bool)
(declare-fun x155 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x140 () (_ BitVec 256))
(declare-fun x113 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x163 () Bool)
(declare-fun x34 () Bool)
(declare-fun x178 () (_ BitVec 256))
(declare-fun x93 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x187 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x145 () Bool)
(declare-fun x109 () (_ BitVec 256))
(declare-fun x130 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x100 () Bool)
(declare-fun x175 () (_ BitVec 256))
(declare-fun x94 () (_ BitVec 256))
(declare-fun x129 () Bool)
(declare-fun x112 () (_ BitVec 256))
(declare-fun x194 () (_ BitVec 256))
(declare-fun x139 () Bool)
(declare-fun x82 () Bool)
(declare-fun x182 () (_ BitVec 256))
(declare-fun x57 () (_ BitVec 256))
(declare-fun x1 () (_ BitVec 256))
(declare-fun x115 () (_ BitVec 256))
(declare-fun x102 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x101 () (_ BitVec 256))
(declare-fun x123 () (_ BitVec 256))
(declare-fun x156 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x128 () (_ BitVec 256))
(declare-fun x44 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x68 () (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x42 () (_ BitVec 256))
(declare-fun x108 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x146 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x157 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x127 () (_ BitVec 256))
(declare-fun x179 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x160 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x107 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x27 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x11 () (_ BitVec 256))
(declare-fun x137 () (_ BitVec 256))
(declare-fun x73 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x173 () (_ BitVec 256))
(declare-fun x184 () (_ BitVec 256))
(declare-fun x32 () (_ BitVec 256))
(declare-fun x133 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x177 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x118 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x88 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x106 ((_ BitVec 256)) (_ BitVec 256))
(define-fun x31 ((x135 (_ BitVec 256)) (x66 (_ BitVec 256))) Bool (= x135 (bvudiv (bvmul x66 x135) x66)))
(define-fun x191 ((x135 (_ BitVec 256)) (x66 (_ BitVec 256))) Bool (= x135 (bvsdiv (bvmul x135 x66) x66)))
(define-fun x87 ((x135 (_ BitVec 256)) (x66 (_ BitVec 256))) Bool (= x135 (bvsdiv (bvmul x66 x135) x66)))
(define-fun x185 ((x13 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x39 ((x13 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x189 ((x13 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x72 ((x13 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x38 ((x13 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x148 ((x13 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x105 ((x13 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x26 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 x1) x147 (x49 x13)))
(define-fun x63 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 x116) x68 (x26 x13)))
(define-fun x83 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 (_ bv128 256)) x3 (x185 x13)))
(define-fun x98 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 (_ bv164 256)) x54 (x39 x13)))
(define-fun x76 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 (_ bv196 256)) x116 (x98 x13)))
(define-fun x151 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv228 256) x13) x41 (x76 x13)))
(define-fun x18 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 (_ bv128 256)) (_ bv100 256) (x189 x13)))
(define-fun x153 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv160 256) x13) x91 (x151 x13)))
(define-fun x67 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 (_ bv324 256)) x19 (x83 x13)))
(define-fun x74 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 (_ bv356 256)) x123 (x67 x13)))
(define-fun x75 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv388 256) x13) x118 (x74 x13)))
(define-fun x149 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv324 256) x13) (_ bv32 256) (x148 x13)))
(define-fun x79 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 (_ bv0 256)) (_ bv1 256) (x193 x13)))
(define-fun x20 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvult x13 (_ bv388 256)) (bvuge x13 (_ bv356 256))) (x79 (bvadd x13 (bvneg (_ bv356 256)))) (x105 x13)))
(define-fun x45 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv420 256) x13) x21 (x75 x13)))
(define-fun x141 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite x114 (x75 x13) (ite x61 (x74 x13) (ite x89 (x67 x13) (ite x190 (x83 x13) (x45 x13))))))
(define-fun x4 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x50 x13) (_ bv0 256) (x141 x13)))
(define-fun x17 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x13 x116) x24 (x63 x13)))
(define-fun x138 ((x13 (_ BitVec 256))) (_ BitVec 256) (ite (= x173 x13) x12 (x106 x13)))
(assert (= (x179 (_ bv64 256) x116 (_ bv2 256)) (x160 (x179 (_ bv64 256) x116 (_ bv2 256)))))
(assert (not (x28 (x179 (_ bv64 256) x54 (_ bv3 256)))))
(assert (bvugt (x179 (_ bv64 256) x116 (_ bv2 256)) (_ bv10000 256)))
(assert (x28 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (= (=> (and (or (not x33) (and (and (= (x149 (_ bv324 256)) x52) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x52) (= x101 (x20 (_ bv356 256))) (= (_ bv1 256) x101) (bvule (_ bv32 256) x52)) x33)) (and (= (_ bv324 256) x85) (= x5 (_ bv324 256)) (= (x149 (_ bv324 256)) x175) (= x33 (bvult (_ bv0 256) x175)) (= (_ bv324 256) x53))) x171) x25))
(assert (= x7 (and x90 x27)))
(assert (x28 (_ bv1000000000000000000 256)))
(assert (bvugt (x179 (_ bv64 256) x116 x126) (_ bv10000 256)))
(assert (= (x58 (x179 (_ bv64 256) x116 (_ bv2 256))) (_ bv64 256)))
(assert (= x88 true))
(assert (=> (bvuge (_ bv10000 256) x71) (= (x160 x71) (_ bv0 256))))
(assert (x28 (_ bv599290589 256)))
(assert (= x114 (and (not x139) x70)))
(assert (= x97 (=> (and (= x21 (x153 (_ bv256 256))) (= x131 (not (bvugt x109 (_ bv128 256))))) (and x111 x131))))
(assert (= x102 (and x139 x70)))
(assert (= (x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256)) (_ bv0 256)))
(assert (= (x58 (x179 (_ bv64 256) x54 (_ bv2 256))) (_ bv64 256)))
(assert (= (_ bv64 256) (x58 (x179 (_ bv64 256) x54 (_ bv3 256)))))
(assert (= x190 (and (not x80) x88)))
(assert (= (_ bv0 256) (x160 (_ bv4294967295 256))))
(assert (x28 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (x28 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256)))
(assert (= (x37 (x179 (_ bv64 256) x54 (_ bv2 256))) x54))
(assert (x28 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= x89 (and x180 (not x30))))
(assert (x28 (_ bv1165319638 256)))
(assert (= x36 (and x30 x180)))
(assert (=> (bvuge (_ bv10000 256) x116) (= (x160 x116) (_ bv0 256))))
(assert (= x70 (and x36 x158)))
(assert (=> (bvuge (_ bv10000 256) x1) (= (_ bv0 256) (x160 x1))))
(assert (= (x160 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (_ bv0 256)))
(assert (= x111 (=> (and (or (not x27) (and (and (= x165 true) (bvuge x23 (_ bv1 256)) (= (x134 x71) x23)) x27)) (and (= x161 (x179 (_ bv64 256) x116 (_ bv2 256))) (= (x134 x71) x164) (= (x179 (_ bv64 256) x54 (_ bv3 256)) x126) (= (= (_ bv0 256) x146) x27) (= x177 x128) (= (bvadd x65 x41) x93) (bvule (_ bv1 256) x164) (= (x17 x71) x177) (= x119 (_ bv324 256)) (not (bvult x93 x65)) (= x156 (bvadd (bvneg x41) x184)) (= x81 (_ bv599290589 256)) (= x174 (x179 (_ bv64 256) x116 x126)) (= (bvadd x51 (bvneg x41)) x12) (= (_ bv1 256) x137) (not (bvugt x41 x184)) (= x22 x77) (= x43 (x179 (_ bv64 256) x54 (_ bv2 256))) (= x173 (x179 (_ bv64 256) x54 (_ bv2 256))) (= (x149 (_ bv324 256)) x146) (not (bvult x51 x12)) (= (_ bv324 256) x133) (= x24 (x63 x116)) (= (x106 x43) x51) (not (bvugt x65 x93)) (= x69 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (= (bvadd (bvneg (_ bv324 256)) x50) x144) (not (bvult x51 x41)) (= x115 x47) (= x184 (x92 x174)) (= x116 x77) (= x188 x24) (= x48 x142) (= (_ bv100 256) x196) (= x50 (bvadd x109 (_ bv324 256))) (= x115 x54) (= x144 (_ bv100 256)) (not (bvugt x156 x184)) (= x142 x11) (= x65 (x138 x161)))) x25)))
(assert (= (x58 (x179 (_ bv64 256) x116 x126)) (_ bv64 256)))
(assert (= (x179 (_ bv64 256) x54 (_ bv2 256)) (x160 (x179 (_ bv64 256) x54 (_ bv2 256)))))
(assert (= (x160 (_ bv404098525 256)) (_ bv0 256)))
(assert (x28 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (= (_ bv0 256) (x160 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256))))
(assert (= (or x154 (and x10 (not x33))) x150))
(assert (x28 (_ bv4294967295 256)))
(assert (= x180 (and x80 x88)))
(assert (= (x179 (_ bv64 256) x54 (_ bv3 256)) (x160 (x179 (_ bv64 256) x54 (_ bv3 256)))))
(assert (=> (bvuge (_ bv10000 256) x54) (= (_ bv0 256) (x160 x54))))
(assert (= x171 (=> (and (= x99 x59) (= x14 (= x187 x57)) (= x183 (x134 x116)) (= x159 (_ bv4 256)) (= (_ bv404098525 256) x178) (= x121 x130) (bvuge x183 (_ bv1 256)) (= (bvadd x59 x130) x57)) x14)))
(assert (= (_ bv0 256) (x160 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (x28 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)))
(assert (= (x179 (_ bv64 256) x116 x126) (x160 (x179 (_ bv64 256) x116 x126))))
(assert (= x90 (or x114 x61 x89 x102 x190)))
(assert (= (x160 (_ bv1000000000000000000 256)) (_ bv0 256)))
(assert (= (_ bv0 256) (x160 (_ bv599290589 256))))
(assert (= (x113 (x179 (_ bv64 256) x54 (_ bv2 256))) (_ bv2 256)))
(assert (= (x113 (x179 (_ bv64 256) x54 (_ bv3 256))) (_ bv3 256)))
(assert (x28 (_ bv404098525 256)))
(assert (= (x160 (_ bv1461501637330902918203684832716283019655932542975 256)) (_ bv0 256)))
(assert (x28 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (not x16))
(assert (not (x28 (x179 (_ bv64 256) x116 x126))))
(assert (= x10 (or x7 (and (not x27) x90))))
(assert (= (and x10 x33) x154))
(assert (= (x113 (x179 (_ bv64 256) x116 (_ bv2 256))) (_ bv2 256)))
(assert (not (x28 (x179 (_ bv64 256) x116 (_ bv2 256)))))
(assert (= (_ bv0 256) (x160 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))))
(assert (bvult (_ bv10000 256) (x179 (_ bv64 256) x54 (_ bv3 256))))
(assert (bvult (_ bv10000 256) (x179 (_ bv64 256) x54 (_ bv2 256))))
(assert (= (=> (and (and (= x55 x54) (and (bvule (_ bv1 256) x192) (= x8 (bvand x176 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256))) (= x109 (x18 (_ bv128 256))) (= x68 x86) (= (bvadd x192 x194) x155) (= x187 x127) (not (bvugt x110 x155)) (= x62 (= (_ bv1000000000000000000 256) x44)) (= (_ bv1165319638 256) x42) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x32) (= (x151 (_ bv160 256)) x176) (not (bvult (bvadd x192 x194) x194)) (= x96 (_ bv128 256)) (= (bvudiv x6 (_ bv1000000000000000000 256)) x127) (bvule (_ bv1 256) x182) (= (bvmul (_ bv1000000000000000000 256) x187) x6) (= x194 (bvmul (_ bv1000000000000000000 256) x187)) (= x48 x152) (not (bvult x187 x32)) (= x86 (x26 x116)) (= x91 (bvadd (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256) x8)) (= (x134 x116) x182) (= x80 (bvult (_ bv0 256) x109)) (= x147 x120) (bvule x46 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= (_ bv0 256) x112) (bvuge x155 (_ bv2 256)) (= x110 (bvadd x155 (bvneg (_ bv1 256)))) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639934 256) x192) (= x108 (bvudiv x6 x46)) (= x55 x1) (bvule x3 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (not (bvult x41 x32)) (bvuge x46 (_ bv1 256)) (not (bvugt x108 (bvadd x108 x41))) (= x168 (= x187 (_ bv0 256))) (= x44 (bvudiv x194 x187)) (= x192 (bvadd x108 x41)) (bvule (_ bv1 256) x3) (= x147 (x49 x1)) (or x168 x62) (= (bvudiv x110 x192) x3) (= (_ bv260 256) x172))) (and (= (_ bv0 256) x132) (bvule (_ bv1 256) x143) (bvule x195 (_ bv4294967295 256)) (bvule x157 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule (_ bv0 256) x15) (bvule (_ bv0 256) x103) (bvule (_ bv0 256) x166) (bvule (_ bv0 256) x157) (bvuge x107 (_ bv0 256)) (= (= x187 x56) x117) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x166) (bvule x71 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x103) (bvule (_ bv1 256) x71) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x116) (= x125 (bvugt (x134 x71) (_ bv0 256))) (bvule x55 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x181 (_ bv0 256)) (bvuge x84 (_ bv0 256)) x125 (= (x134 x116) x95) (not (= x143 x71)) (bvule x15 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x181) (= x56 (bvadd x124 x60)) (= x64 (_ bv404098525 256)) x122 (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x29) (= x162 (_ bv4 256)) (= (bvugt (x134 x143) (_ bv0 256)) x129) (bvule (_ bv0 256) x56) (= x122 (bvugt (x134 x116) (_ bv0 256))) x129 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x107) (bvule (_ bv0 256) x195) (not (= x71 x116)) (= x99 x124) x117 (bvule (_ bv0 256) x55) (bvule x143 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvule x84 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (x78 (_ bv4 256)) x41) (bvuge x94 (_ bv0 256)) (bvule (_ bv36 256) x40) (bvule (_ bv0 256) x29) (bvule x187 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (= x121 x60) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x56) (bvule x40 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv1 256) x95) (bvule (_ bv1 256) x116) (bvule x94 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (not (= x143 x116)) (= x152 x41))) (and (=> (and (and (= (x153 (_ bv160 256)) x19) (= x30 (bvult (_ bv32 256) x109))) x80) (and (=> (not x30) x111) (=> (and x30 (and (= x123 (x153 (_ bv192 256))) (= (bvugt x109 (_ bv64 256)) x158))) (and (=> (and (and (= x118 (x153 (_ bv224 256))) (= (bvugt x109 (_ bv96 256)) x139)) x158) (and (=> x139 x97) (=> (not x139) x111))) (=> (not x158) x111))))) (=> (not x80) x111))) x16))
(assert (not (x28 (x179 (_ bv64 256) x54 (_ bv2 256)))))
(assert (= (x37 (x179 (_ bv64 256) x116 x126)) x116))
(assert (= x54 (x37 (x179 (_ bv64 256) x54 (_ bv3 256)))))
(assert (= (x160 (_ bv1165319638 256)) (_ bv0 256)))
(assert (= (and (not x158) x36) x61))
(assert (=> (bvule x143 (_ bv10000 256)) (= (_ bv0 256) (x160 x143))))
(assert (x28 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (= (x37 (x179 (_ bv64 256) x116 (_ bv2 256))) x116))
(assert (= (x160 (_ bv115792089237316195423570985008687907853269984665640564039457 256)) (_ bv0 256)))
(assert (= (x160 (_ bv16156842317565293874272834530371880720966471053262404558597773956279093428224 256)) (_ bv0 256)))
(assert (= (x113 (x179 (_ bv64 256) x116 x126)) x126))
(check-sat)
(exit)
