(set-info :smt-lib-version 2.6)
(set-logic QF_UFBV)
(set-info :source |
Generated by: Certora
Generated on: 2024-01-16
Generator: The Certora Prover
Application: Web3 security
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
(declare-fun x94 () (_ BitVec 256))
(declare-fun x63 () (_ BitVec 256))
(declare-fun x20 () Bool)
(declare-fun x185 () Bool)
(declare-fun x197 () (_ BitVec 256))
(declare-fun x178 () (_ BitVec 256))
(declare-fun x69 () (_ BitVec 256))
(declare-fun x196 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x226 () Bool)
(declare-fun x180 () (_ BitVec 256))
(declare-fun x102 () (_ BitVec 256))
(declare-fun x152 () (_ BitVec 256))
(declare-fun x103 () (_ BitVec 256))
(declare-fun x115 () Bool)
(declare-fun x100 () (_ BitVec 256))
(declare-fun x28 () (_ BitVec 256))
(declare-fun x46 () (_ BitVec 256))
(declare-fun x17 () (_ BitVec 256))
(declare-fun x7 () Bool)
(declare-fun x5 () Bool)
(declare-fun x146 () Bool)
(declare-fun x110 () (_ BitVec 256))
(declare-fun x165 () Bool)
(declare-fun x21 () (_ BitVec 256))
(declare-fun x164 () (_ BitVec 256))
(declare-fun x231 () (_ BitVec 256))
(declare-fun x56 () Bool)
(declare-fun x31 () (_ BitVec 256))
(declare-fun x87 () (_ BitVec 256))
(declare-fun x228 () Bool)
(declare-fun x118 () (_ BitVec 256))
(declare-fun x111 () (_ BitVec 256))
(declare-fun x225 () (_ BitVec 256))
(declare-fun x92 () (_ BitVec 256))
(declare-fun x3 () (_ BitVec 256))
(declare-fun x61 () Bool)
(declare-fun x211 () (_ BitVec 256))
(declare-fun x26 () (_ BitVec 256))
(declare-fun x203 () Bool)
(declare-fun x183 () (_ BitVec 256))
(declare-fun x167 () (_ BitVec 256))
(declare-fun x150 () Bool)
(declare-fun x76 () (_ BitVec 256))
(declare-fun x40 () (_ BitVec 256))
(declare-fun x30 () (_ BitVec 256))
(declare-fun x14 () (_ BitVec 256))
(declare-fun x162 () (_ BitVec 256))
(declare-fun x123 () Bool)
(declare-fun x27 () (_ BitVec 256))
(declare-fun x154 () (_ BitVec 256))
(declare-fun x230 () Bool)
(declare-fun x193 () Bool)
(declare-fun x57 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x188 () (_ BitVec 256))
(declare-fun x156 () Bool)
(declare-fun x219 () (_ BitVec 256))
(declare-fun x125 () Bool)
(declare-fun x52 () (_ BitVec 256))
(declare-fun x35 () (_ BitVec 256))
(declare-fun x16 () (_ BitVec 256))
(declare-fun x138 () (_ BitVec 256))
(declare-fun x174 () (_ BitVec 256))
(declare-fun x85 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x128 () Bool)
(declare-fun x119 () Bool)
(declare-fun x122 () (_ BitVec 256))
(declare-fun x182 () (_ BitVec 256))
(declare-fun x97 () (_ BitVec 256))
(declare-fun x223 () Bool)
(declare-fun x32 () (_ BitVec 256))
(declare-fun x160 () Bool)
(declare-fun x68 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x6 () (_ BitVec 256))
(declare-fun x143 () (_ BitVec 256))
(declare-fun x139 () (_ BitVec 256))
(declare-fun x43 () Bool)
(declare-fun x49 () (_ BitVec 256))
(declare-fun x140 () Bool)
(declare-fun x48 () (_ BitVec 256))
(declare-fun x36 () (_ BitVec 256))
(declare-fun x199 () (_ BitVec 256))
(declare-fun x204 () (_ BitVec 256))
(declare-fun x59 () (_ BitVec 256))
(declare-fun x132 () (_ BitVec 256))
(declare-fun x222 () Bool)
(declare-fun x216 () (_ BitVec 256))
(declare-fun x9 () Bool)
(declare-fun x232 () (_ BitVec 256))
(declare-fun x213 () (_ BitVec 256))
(declare-fun x166 () (_ BitVec 256))
(declare-fun x229 () (_ BitVec 256))
(declare-fun x205 () (_ BitVec 256))
(declare-fun x130 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x161 () (_ BitVec 256))
(declare-fun x201 () (_ BitVec 256))
(declare-fun x88 () (_ BitVec 256))
(declare-fun x109 () Bool)
(declare-fun x99 ((_ BitVec 256) (_ BitVec 256) (_ BitVec 256)) (_ BitVec 256))
(declare-fun x134 () (_ BitVec 256))
(declare-fun x137 () Bool)
(declare-fun x75 () (_ BitVec 256))
(declare-fun x106 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x149 () (_ BitVec 256))
(declare-fun x142 () (_ BitVec 256))
(declare-fun x73 () (_ BitVec 256))
(declare-fun x121 () (_ BitVec 256))
(declare-fun x24 () (_ BitVec 256))
(declare-fun x214 () (_ BitVec 256))
(declare-fun x153 () (_ BitVec 256))
(declare-fun x13 () (_ BitVec 256))
(declare-fun x220 () (_ BitVec 256))
(declare-fun x155 () (_ BitVec 256))
(declare-fun x221 () (_ BitVec 256))
(declare-fun x113 () (_ BitVec 256))
(declare-fun x58 () (_ BitVec 256))
(declare-fun x70 () Bool)
(declare-fun x96 () (_ BitVec 256))
(declare-fun x112 () (_ BitVec 256))
(declare-fun x105 () (_ BitVec 256))
(declare-fun x210 () Bool)
(declare-fun x212 () (_ BitVec 256))
(declare-fun x38 () (_ BitVec 256))
(declare-fun x64 () Bool)
(declare-fun x194 () Bool)
(declare-fun x44 () (_ BitVec 256))
(declare-fun x172 () Bool)
(declare-fun x29 () (_ BitVec 256))
(declare-fun x12 () (_ BitVec 256))
(declare-fun x200 () Bool)
(declare-fun x117 () (_ BitVec 256))
(declare-fun x191 () (_ BitVec 256))
(declare-fun x198 () Bool)
(declare-fun x54 () (_ BitVec 256))
(declare-fun x179 () (_ BitVec 256))
(declare-fun x163 () (_ BitVec 256))
(declare-fun x124 () (_ BitVec 256))
(declare-fun x37 () (_ BitVec 256))
(declare-fun x78 () (_ BitVec 256))
(declare-fun x45 () (_ BitVec 256))
(declare-fun x77 () (_ BitVec 256))
(declare-fun x53 ((_ BitVec 256)) Bool)
(declare-fun x173 () (_ BitVec 256))
(declare-fun x208 () (_ BitVec 256))
(declare-fun x95 () (_ BitVec 256))
(declare-fun x47 () (_ BitVec 256))
(declare-fun x145 () (_ BitVec 256))
(declare-fun x79 () (_ BitVec 256))
(declare-fun x171 () (_ BitVec 256))
(declare-fun x66 () (_ BitVec 256))
(declare-fun x133 () Bool)
(declare-fun x104 () (_ BitVec 256))
(declare-fun x50 () (_ BitVec 256))
(declare-fun x34 () (_ BitVec 256))
(declare-fun x126 () (_ BitVec 256))
(declare-fun x23 () (_ BitVec 256))
(declare-fun x62 () (_ BitVec 256))
(declare-fun x170 () (_ BitVec 256))
(declare-fun x84 () (_ BitVec 256))
(declare-fun x184 () Bool)
(declare-fun x101 () (_ BitVec 256))
(declare-fun x144 () (_ BitVec 256))
(declare-fun x86 () (_ BitVec 256))
(declare-fun x218 () (_ BitVec 256))
(declare-fun x55 () Bool)
(declare-fun x186 () (_ BitVec 256))
(declare-fun x18 () (_ BitVec 256))
(declare-fun x116 () (_ BitVec 256))
(declare-fun x81 () (_ BitVec 256))
(declare-fun x91 () (_ BitVec 256))
(declare-fun x158 () (_ BitVec 256))
(declare-fun x217 () (_ BitVec 256))
(declare-fun x215 () (_ BitVec 256))
(declare-fun x189 () (_ BitVec 256))
(declare-fun x135 () (_ BitVec 256))
(declare-fun x1 () Bool)
(declare-fun x74 () (_ BitVec 256))
(declare-fun x15 () (_ BitVec 256))
(declare-fun x131 () Bool)
(declare-fun x177 () (_ BitVec 256))
(declare-fun x224 () (_ BitVec 256))
(declare-fun x114 () Bool)
(declare-fun x4 () (_ BitVec 256))
(declare-fun x8 () Bool)
(declare-fun x19 () (_ BitVec 256))
(declare-fun x67 () Bool)
(declare-fun x89 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x83 () Bool)
(declare-fun x22 () Bool)
(declare-fun x227 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x120 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x159 () (_ BitVec 256))
(declare-fun x151 () (_ BitVec 256))
(declare-fun x39 () (_ BitVec 256))
(declare-fun x190 () (_ BitVec 256))
(declare-fun x98 () (_ BitVec 256))
(declare-fun x2 () Bool)
(declare-fun x42 () Bool)
(declare-fun x136 () (_ BitVec 256))
(declare-fun x72 ((_ BitVec 256)) (_ BitVec 256))
(declare-fun x207 () Bool)
(define-fun x168 ((x65 (_ BitVec 256)) (x175 (_ BitVec 256))) Bool (= x65 (bvudiv (bvmul x175 x65) x175)))
(define-fun x108 ((x65 (_ BitVec 256)) (x175 (_ BitVec 256))) Bool (= x65 (bvsdiv (bvmul x65 x175) x175)))
(define-fun x60 ((x65 (_ BitVec 256)) (x175 (_ BitVec 256))) Bool (= x65 (bvsdiv (bvmul x175 x65) x175)))
(define-fun x41 ((x82 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x192 ((x82 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x209 ((x82 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x147 ((x82 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x169 ((x82 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x10 ((x82 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x206 ((x82 (_ BitVec 256))) (_ BitVec 256) (_ bv0 256))
(define-fun x176 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 x199) x69 (x57 x82)))
(define-fun x127 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 x58) x218 (x176 x82)))
(define-fun x33 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv128 256)) x19 (x41 x82)))
(define-fun x202 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv164 256)) x91 (x192 x82)))
(define-fun x93 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv196 256)) x135 (x202 x82)))
(define-fun x148 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv128 256) x82) (_ bv68 256) (x209 x82)))
(define-fun x187 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv160 256)) x3 (x93 x82)))
(define-fun x51 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv292 256) x82) x167 (x33 x82)))
(define-fun x90 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv324 256)) x28 (x51 x82)))
(define-fun x195 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv356 256)) x225 (x90 x82)))
(define-fun x80 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x95 x82) x46 (x85 x82)))
(define-fun x157 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x52 x82) x59 (x80 x82)))
(define-fun x181 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv292 256)) (_ bv32 256) (x10 x82)))
(define-fun x107 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= (_ bv0 256) x82) (_ bv1 256) (x227 x82)))
(define-fun x11 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (and (bvuge x82 (_ bv324 256)) (bvugt (_ bv356 256) x82)) (x107 (bvadd (bvneg (_ bv324 256)) x82)) (x206 x82)))
(define-fun x71 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 (_ bv388 256)) x201 (x195 x82)))
(define-fun x25 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite x185 (x195 x82) (ite x223 (x90 x82) (ite x20 (x51 x82) (ite x7 (x33 x82) (x71 x82))))))
(define-fun x141 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x82 x121) (_ bv0 256) (x25 x82)))
(define-fun x129 ((x82 (_ BitVec 256))) (_ BitVec 256) (ite (= x58 x82) x100 (x127 x82)))
(assert (= x193 (or x1 (and (not x119) x172))))
(assert (not (x53 (x99 (_ bv64 256) x91 (_ bv2 256)))))
(assert (= (_ bv0 256) (x106 (_ bv115792089237316195423570985008687907853269984665640564039457 256))))
(assert (= x67 (=> (and (= (bvadd x151 x96) x13) (= x97 (_ bv1000000000000000000 256)) (not (bvult x13 x74)) (= (bvand (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256) x153) x32) (bvule x19 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= x3 (bvadd x32 (bvneg (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)))) (= (bvadd (bvneg x135) x24) x96) (= (bvadd x24 (bvneg x135)) x34) (bvuge x13 (_ bv2 256)) (= x75 (_ bv128 256)) (not (bvult x34 x171)) (= (ite (bvugt x26 x204) x204 x26) x135) (not (bvugt x34 x24)) (= x151 (bvmul x4 (_ bv1000000000000000000 256))) (bvuge x96 (_ bv1 256)) (= (bvugt x229 (_ bv0 256)) x226) (bvuge x19 (_ bv1 256)) (= (x148 (_ bv128 256)) x229) (= x189 (_ bv228 256)) (= (bvadd (bvneg (_ bv1 256)) x13) x74) (bvule x171 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256)) (not (bvugt x96 x24)) (bvule x34 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256)) (bvule x96 (_ bv115792089237316195423570985008687907853269984665640564039456584007913129639935 256)) (not (bvult (bvadd x96 x151) x151)) (= x164 (_ bv0 256)) (= x153 (x93 (_ bv160 256))) (= (bvudiv x74 x96) x19) (= (bvudiv x151 x4) x97) (= x110 (bvudiv x74 x96))) (and (=> (and x226 (and (= (bvugt x229 (_ bv32 256)) x230) (= x167 (x187 (_ bv160 256))))) (and (=> (and (and (= x28 (x187 (_ bv192 256))) (= (bvugt x229 (_ bv64 256)) x222)) x230) (and (=> (not x222) x184) (=> (and (and (= (bvugt x229 (_ bv96 256)) x2) (= x225 (x187 (_ bv224 256)))) x222) (and (=> x2 x70) (=> (not x2) x184))))) (=> (not x230) x184))) (=> (not x226) x184)))))
(assert (= (_ bv0 256) (x106 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256))))
(assert (x53 (_ bv115792089237316195423570985008687907853269984665640564039456584007913129639935 256)))
(assert (= (x68 (x99 (_ bv64 256) x58 (_ bv2 256))) (_ bv64 256)))
(assert (x53 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)))
(assert (= (and x207 x222) x133))
(assert (= (and x160 x230) x207))
(assert (not (x53 (x99 (_ bv64 256) x145 (_ bv2 256)))))
(assert (bvult (_ bv10000 256) (x99 (_ bv64 256) x145 (_ bv2 256))))
(assert (= (x99 (_ bv64 256) x58 (_ bv2 256)) (x106 (x99 (_ bv64 256) x58 (_ bv2 256)))))
(assert (= x56 (and x109 (not x200))))
(assert (= (_ bv0 256) (x106 (_ bv1461501637330902918203684832716283019655932542975 256))))
(assert (not (x53 (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (=> (bvule x6 (_ bv10000 256)) (= (_ bv0 256) (x106 x6))))
(assert (= (_ bv0 256) (x106 (_ bv4294967295 256))))
(assert (= (_ bv2 256) (x89 (x99 (_ bv64 256) x6 (_ bv2 256)))))
(assert (=> (bvule x199 (_ bv10000 256)) (= (x106 x199) (_ bv0 256))))
(assert (bvult (_ bv10000 256) (x99 (_ bv64 256) x6 (_ bv2 256))))
(assert (= x7 (and (not x226) x55)))
(assert (x53 (_ bv4294967295 256)))
(assert (= x1 (and x119 x172)))
(assert (bvult (_ bv10000 256) (x99 (_ bv64 256) x58 (_ bv2 256))))
(assert (= (x89 (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (_ bv69 256)))
(assert (= (x120 (x99 (_ bv64 256) x91 (_ bv2 256))) x91))
(assert (= x146 (=> (and (and (= (_ bv4 256) x73) (= x48 (_ bv36 256)) (bvuge x37 (_ bv1 256)) (= x37 (x196 x58)) (= x78 (_ bv404098525 256))) (and (and (= x159 x94) (= x159 x215) (bvule (_ bv1 256) x136) (= (x196 x58) x136) (= (_ bv1289409798 256) x104) (= (bvudiv x179 x110) x152) (= x14 (_ bv36 256)) (= (bvmul x159 (_ bv1000000000000000000 256)) x179) (= x94 (bvudiv x179 (_ bv1000000000000000000 256))) (= x4 x159)) (and (bvule (_ bv1 256) x178) (= x178 (x196 x84)) (= (x157 x15) x30) (= (bvule x152 x30) x64) (= x58 x145) (= (x99 (_ bv64 256) x145 (_ bv2 256)) x15) (= x145 x220) (= x188 (_ bv1889567281 256))))) x64)))
(assert (= (_ bv0 256) (x106 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256))))
(assert (= (x106 (_ bv26959946667150639794667015087019630673637144422540572481103610249215 256)) (_ bv0 256)))
(assert (not (x53 (x99 (_ bv64 256) x58 (_ bv2 256)))))
(assert (= (_ bv0 256) (x106 (_ bv2835717307 256))))
(assert (x53 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)))
(assert (=> (bvuge (_ bv10000 256) x91) (= (_ bv0 256) (x106 x91))))
(assert (x53 (_ bv1461501637330902918203684832716283019655932542975 256)))
(assert (=> (bvuge (_ bv10000 256) x58) (= (x106 x58) (_ bv0 256))))
(assert (= (_ bv64 256) (x68 (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256)))))
(assert (= (and x2 x133) x203))
(assert (= true x109))
(assert (= (_ bv0 256) (x106 (_ bv1000000000000000000 256))))
(assert (= (x99 (_ bv64 256) x6 (_ bv2 256)) (x106 (x99 (_ bv64 256) x6 (_ bv2 256)))))
(assert (= (_ bv0 256) (x106 (_ bv115792089237316195423570985008687907853269984665640564039456584007913129639935 256))))
(assert (= x20 (and x160 (not x230))))
(assert (= x6 (x120 (x99 (_ bv64 256) x6 (_ bv2 256)))))
(assert (= (x106 (_ bv404098525 256)) (_ bv0 256)))
(assert (= (x99 (_ bv64 256) x145 (_ bv2 256)) (x106 (x99 (_ bv64 256) x145 (_ bv2 256)))))
(assert (not (x53 (x99 (_ bv64 256) x6 (_ bv2 256)))))
(assert (x53 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)))
(assert (= (x106 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)) (_ bv0 256)))
(assert (x53 (_ bv404098525 256)))
(assert (= (_ bv64 256) (x68 (x99 (_ bv64 256) x145 (_ bv2 256)))))
(assert (= x123 (=> (and (and (and (= (bvmul x143 (_ bv1000000000000000000 256)) x158) (bvule (_ bv1 256) x212) (bvule (_ bv1 256) x113) (= x224 (_ bv36 256)) (bvule x113 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (= (x196 x58) x212) (= x143 x190) (= x4 x143) (= (bvudiv x158 x113) x197) (= (_ bv1289409798 256) x27) (= x143 x38) (= (bvudiv x158 (_ bv1000000000000000000 256)) x190)) (and (and (= x18 x66) (and (or (and x200 (= (_ bv0 256) x204)) (and (not x200) (and (bvule (_ bv1 256) x98) (= x211 (bvudiv x98 (_ bv10000 256))) (x168 x24 x138) (not (bvult x221 x24)) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x98) (bvuge x24 (_ bv1 256)) (bvule x138 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x221 (bvudiv (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x138)) (bvule x24 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (= x98 (bvmul x138 x24)) (= x211 x204) (bvuge x138 (_ bv1 256))))) (and (= x117 x218) (= (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256)) x62) (= (bvudiv x87 (_ bv1000000000000000000 256)) x154) (= (= x138 (_ bv0 256)) x200) (= x49 (x196 x58)) (= x4 x154) (= x18 x199) (= (_ bv0 256) x213) (= x208 x232) (= (bvmul x4 (_ bv1000000000000000000 256)) x87) (bvuge x49 (_ bv1 256)) (bvule (_ bv1 256) x24) (= x117 (x176 x58)) (= x205 (_ bv0 256)) (= x69 x44) (= (bvudiv x87 x113) x24) (= x12 (_ bv50023813 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256) x24) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x111) (= x111 (x72 x62)) (= x66 x111) (= x69 (x57 x199))))) (and x9 (= x58 x6) (= x26 (x130 (_ bv36 256))) (= x77 (x85 x45)) (= x91 (x130 (_ bv4 256))) (= x17 x26) (= x116 (_ bv1889567281 256)) (= x208 x91) (bvuge x21 (_ bv1 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x91) (= (x99 (_ bv64 256) x6 (_ bv2 256)) x45) (= x9 (bvule x197 x77)) (= x6 x76) (bvule (_ bv1 256) x26) (= x21 (x196 x84))))) (and (= (x196 x58) x132) (not (= x173 x58)) (bvule (_ bv0 256) x170) (bvuge x103 (_ bv0 256)) (bvule x84 (_ bv1461501637330902918203684832716283019655932542975 256)) x137 (= x126 (_ bv36 256)) (bvule x173 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv1461501637330902918203684832716283019655932542975 256) x23) (bvule x103 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x162) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457 256) x4) (bvule x18 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x173 (_ bv1 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x149) (bvule (_ bv1 256) x132) (= x81 (_ bv404098525 256)) (bvuge x162 (_ bv0 256)) (bvule (_ bv0 256) x86) (= x150 (bvugt (x196 x58) (_ bv0 256))) (bvule x50 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256)) (bvule (_ bv1 256) x84) (bvule x105 (_ bv4294967295 256)) (bvule x170 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) x156 (bvuge x47 (_ bv0 256)) (bvule (_ bv0 256) x18) (bvule (_ bv0 256) x79) (= x156 (bvult (_ bv0 256) (x196 x173))) x150 (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x216) (bvule x86 (_ bv1461501637330902918203684832716283019655932542975 256)) (bvuge x149 (_ bv0 256)) (bvuge (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256) x79) (= (_ bv4 256) x36) (bvule (_ bv0 256) x105) (bvule (_ bv68 256) x50) (bvule (_ bv1 256) x58) (bvule (_ bv1 256) x4) (not (= x84 x58)) (not (= x173 x84)) (bvule x47 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)) (bvule x58 (_ bv1461501637330902918203684832716283019655932542975 256)) (= (_ bv0 256) x163) (bvule (_ bv0 256) x216) (bvule (_ bv0 256) x23) (= (bvult (_ bv0 256) (x196 x84)) x137))) x67)))
(assert (= x55 (or x83 x56)))
(assert (=> (bvule x173 (_ bv10000 256)) (= (_ bv0 256) (x106 x173))))
(assert (= (x89 (x99 (_ bv64 256) x91 (_ bv2 256))) (_ bv2 256)))
(assert (= x58 (x120 (x99 (_ bv64 256) x58 (_ bv2 256)))))
(assert (= x172 (or (and (not x125) x131) x61)))
(assert (x53 (_ bv115792089237316195423570985008687907853269984665640564039457000000000000000000 256)))
(assert (x53 (_ bv39341301877480157781710804024396230103289065588583741745104145964028735258624 256)))
(assert (= (_ bv0 256) (x106 (_ bv50023813 256))))
(assert (x53 (_ bv50023813 256)))
(assert (= (=> (and (or (and x125 (and (= x16 (x196 x84)) (bvuge x16 (_ bv1 256)) (= true x210))) (not x125)) (and (not (bvult x59 x122)) (= (_ bv68 256) x39) (= x122 (x80 x174)) (= x155 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)) (= x231 x232) (= x144 (x99 (_ bv64 256) x58 (_ bv2 256))) (= x174 (x99 (_ bv64 256) x91 (_ bv2 256))) (= x46 (bvadd (bvneg x135) x186)) (= x52 (x99 (_ bv64 256) x91 (_ bv2 256))) (= (x196 x84) x183) (= (_ bv68 256) x40) (= x112 x54) (= x35 (_ bv2835717307 256)) (bvuge x183 (_ bv1 256)) (not (bvult x186 x46)) (= x214 (x181 (_ bv292 256))) (= x100 x142) (= x186 (x85 x144)) (= x135 x177) (= (bvadd (_ bv292 256) x229) x121) (= x191 (_ bv1 256)) (= x139 (_ bv292 256)) (= x231 x182) (= x177 x92) (= (= (_ bv0 256) x214) x125) (= x40 (bvadd (bvneg (_ bv292 256)) x121)) (= x124 (_ bv292 256)) (= x59 (bvadd x135 x122)) (= (x99 (_ bv64 256) x58 (_ bv2 256)) x95) (= x100 (x127 x58)) (not (bvugt x122 x59)) (= (x129 x84) x54) (not (bvugt x135 x186)))) x8) x184))
(assert (x53 (_ bv2835717307 256)))
(assert (= (x120 (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (_ bv0 256)))
(assert (= x70 (=> (and (= x201 (x187 (_ bv256 256))) (= x198 (not (bvugt x229 (_ bv128 256))))) (and x184 x198))))
(assert (= (_ bv0 256) (x106 (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256))))
(assert (= (_ bv0 256) (x106 (_ bv1289409798 256))))
(assert (bvult (_ bv10000 256) (x99 (_ bv64 256) x91 (_ bv2 256))))
(assert (= (and x207 (not x222)) x223))
(assert (= (=> (and (and (= x119 (bvult (_ bv0 256) x166)) (= (_ bv292 256) x161) (= x166 (x181 (_ bv292 256))) (= (_ bv292 256) x219) (= (_ bv292 256) x118)) (or (not x119) (and x119 (and (= x102 (x181 (_ bv292 256))) (bvuge (_ bv57896044618658097711785492504343953926634992332820282019728792003956564819967 256) x102) (bvule (_ bv32 256) x102) (= (_ bv1 256) x88) (= (x11 (_ bv324 256)) x88))))) x146) x8))
(assert (= (_ bv2 256) (x89 (x99 (_ bv64 256) x145 (_ bv2 256)))))
(assert (bvugt (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256)) (_ bv10000 256)))
(assert (= x160 (and x226 x55)))
(assert (= (x68 (x99 (_ bv64 256) x91 (_ bv2 256))) (_ bv64 256)))
(assert (=> (bvule x84 (_ bv10000 256)) (= (x106 x84) (_ bv0 256))))
(assert (x53 (_ bv1000000000000000000 256)))
(assert (x53 (_ bv115792089237316195423570985008687907853269984665640564039457584007913129639935 256)))
(assert (x53 (_ bv115792089237316195423570985008687907853269984665640564039457 256)))
(assert (=> (bvule x145 (_ bv10000 256)) (= (x106 x145) (_ bv0 256))))
(assert (x53 (_ bv1289409798 256)))
(assert (not x123))
(assert (= x61 (and x131 x125)))
(assert (= (and x109 x200) x83))
(assert (= (x120 (x99 (_ bv64 256) x145 (_ bv2 256))) x145))
(assert (= (_ bv0 256) (x106 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256))))
(assert (= (x106 (_ bv1889567281 256)) (_ bv0 256)))
(assert (= (x106 (_ bv105312291668557186697918027683670432318895095400549111254310977535 256)) (_ bv0 256)))
(assert (= (x106 (x99 (_ bv64 256) x91 (_ bv2 256))) (x99 (_ bv64 256) x91 (_ bv2 256))))
(assert (= x131 (or x223 x185 x7 x20 x203)))
(assert (= (x106 (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256))) (x99 (_ bv64 256) (_ bv0 256) (_ bv69 256))))
(assert (= x185 (and (not x2) x133)))
(assert (= (_ bv64 256) (x68 (x99 (_ bv64 256) x6 (_ bv2 256)))))
(assert (x53 (_ bv76450787359836037641860180984291677749980919077056822294353438043884394381312 256)))
(assert (= (_ bv2 256) (x89 (x99 (_ bv64 256) x58 (_ bv2 256)))))
(assert (x53 (_ bv1889567281 256)))
(check-sat)
(exit)
